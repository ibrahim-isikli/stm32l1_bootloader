
stm32l1_bootloader_app1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .mysection    00000000  08018000  08018000  00004068  2**0
                  CONTENTS
  2 .text         0000281c  0800813c  0800813c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  0800a958  0800a958  00003958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800a98c  0800a98c  00004068  2**0
                  CONTENTS
  5 .ARM          00000008  0800a98c  0800a98c  0000398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800a994  0800a994  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800a994  0800a994  00003994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800a998  0800a998  00003998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000068  20000000  0800a99c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001b8  20000068  0800aa04  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  0800aa04  00004220  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000712b  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015a2  00000000  00000000  0000b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  0000c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053e  00000000  00000000  0000ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015cdc  00000000  00000000  0000d38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000086f2  00000000  00000000  0002306a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084355  00000000  00000000  0002b75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000afab1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002184  00000000  00000000  000afaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  000b1c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800813c <__do_global_dtors_aux>:
 800813c:	b510      	push	{r4, lr}
 800813e:	4c05      	ldr	r4, [pc, #20]	@ (8008154 <__do_global_dtors_aux+0x18>)
 8008140:	7823      	ldrb	r3, [r4, #0]
 8008142:	b933      	cbnz	r3, 8008152 <__do_global_dtors_aux+0x16>
 8008144:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <__do_global_dtors_aux+0x1c>)
 8008146:	b113      	cbz	r3, 800814e <__do_global_dtors_aux+0x12>
 8008148:	4804      	ldr	r0, [pc, #16]	@ (800815c <__do_global_dtors_aux+0x20>)
 800814a:	f3af 8000 	nop.w
 800814e:	2301      	movs	r3, #1
 8008150:	7023      	strb	r3, [r4, #0]
 8008152:	bd10      	pop	{r4, pc}
 8008154:	20000068 	.word	0x20000068
 8008158:	00000000 	.word	0x00000000
 800815c:	0800a940 	.word	0x0800a940

08008160 <frame_dummy>:
 8008160:	b508      	push	{r3, lr}
 8008162:	4b03      	ldr	r3, [pc, #12]	@ (8008170 <frame_dummy+0x10>)
 8008164:	b11b      	cbz	r3, 800816e <frame_dummy+0xe>
 8008166:	4903      	ldr	r1, [pc, #12]	@ (8008174 <frame_dummy+0x14>)
 8008168:	4803      	ldr	r0, [pc, #12]	@ (8008178 <frame_dummy+0x18>)
 800816a:	f3af 8000 	nop.w
 800816e:	bd08      	pop	{r3, pc}
 8008170:	00000000 	.word	0x00000000
 8008174:	2000006c 	.word	0x2000006c
 8008178:	0800a940 	.word	0x0800a940

0800817c <__aeabi_uldivmod>:
 800817c:	b953      	cbnz	r3, 8008194 <__aeabi_uldivmod+0x18>
 800817e:	b94a      	cbnz	r2, 8008194 <__aeabi_uldivmod+0x18>
 8008180:	2900      	cmp	r1, #0
 8008182:	bf08      	it	eq
 8008184:	2800      	cmpeq	r0, #0
 8008186:	bf1c      	itt	ne
 8008188:	f04f 31ff 	movne.w	r1, #4294967295
 800818c:	f04f 30ff 	movne.w	r0, #4294967295
 8008190:	f000 b968 	b.w	8008464 <__aeabi_idiv0>
 8008194:	f1ad 0c08 	sub.w	ip, sp, #8
 8008198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800819c:	f000 f806 	bl	80081ac <__udivmoddi4>
 80081a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081a8:	b004      	add	sp, #16
 80081aa:	4770      	bx	lr

080081ac <__udivmoddi4>:
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	9d08      	ldr	r5, [sp, #32]
 80081b2:	460c      	mov	r4, r1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d14e      	bne.n	8008256 <__udivmoddi4+0xaa>
 80081b8:	4694      	mov	ip, r2
 80081ba:	458c      	cmp	ip, r1
 80081bc:	4686      	mov	lr, r0
 80081be:	fab2 f282 	clz	r2, r2
 80081c2:	d962      	bls.n	800828a <__udivmoddi4+0xde>
 80081c4:	b14a      	cbz	r2, 80081da <__udivmoddi4+0x2e>
 80081c6:	f1c2 0320 	rsb	r3, r2, #32
 80081ca:	4091      	lsls	r1, r2
 80081cc:	fa20 f303 	lsr.w	r3, r0, r3
 80081d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80081d4:	4319      	orrs	r1, r3
 80081d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80081da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80081de:	fbb1 f4f7 	udiv	r4, r1, r7
 80081e2:	fb07 1114 	mls	r1, r7, r4, r1
 80081e6:	fa1f f68c 	uxth.w	r6, ip
 80081ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80081ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80081f2:	fb04 f106 	mul.w	r1, r4, r6
 80081f6:	4299      	cmp	r1, r3
 80081f8:	d90a      	bls.n	8008210 <__udivmoddi4+0x64>
 80081fa:	eb1c 0303 	adds.w	r3, ip, r3
 80081fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8008202:	f080 8110 	bcs.w	8008426 <__udivmoddi4+0x27a>
 8008206:	4299      	cmp	r1, r3
 8008208:	f240 810d 	bls.w	8008426 <__udivmoddi4+0x27a>
 800820c:	3c02      	subs	r4, #2
 800820e:	4463      	add	r3, ip
 8008210:	1a59      	subs	r1, r3, r1
 8008212:	fbb1 f0f7 	udiv	r0, r1, r7
 8008216:	fb07 1110 	mls	r1, r7, r0, r1
 800821a:	fb00 f606 	mul.w	r6, r0, r6
 800821e:	fa1f f38e 	uxth.w	r3, lr
 8008222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008226:	429e      	cmp	r6, r3
 8008228:	d90a      	bls.n	8008240 <__udivmoddi4+0x94>
 800822a:	eb1c 0303 	adds.w	r3, ip, r3
 800822e:	f100 31ff 	add.w	r1, r0, #4294967295
 8008232:	f080 80fa 	bcs.w	800842a <__udivmoddi4+0x27e>
 8008236:	429e      	cmp	r6, r3
 8008238:	f240 80f7 	bls.w	800842a <__udivmoddi4+0x27e>
 800823c:	4463      	add	r3, ip
 800823e:	3802      	subs	r0, #2
 8008240:	2100      	movs	r1, #0
 8008242:	1b9b      	subs	r3, r3, r6
 8008244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008248:	b11d      	cbz	r5, 8008252 <__udivmoddi4+0xa6>
 800824a:	40d3      	lsrs	r3, r2
 800824c:	2200      	movs	r2, #0
 800824e:	e9c5 3200 	strd	r3, r2, [r5]
 8008252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008256:	428b      	cmp	r3, r1
 8008258:	d905      	bls.n	8008266 <__udivmoddi4+0xba>
 800825a:	b10d      	cbz	r5, 8008260 <__udivmoddi4+0xb4>
 800825c:	e9c5 0100 	strd	r0, r1, [r5]
 8008260:	2100      	movs	r1, #0
 8008262:	4608      	mov	r0, r1
 8008264:	e7f5      	b.n	8008252 <__udivmoddi4+0xa6>
 8008266:	fab3 f183 	clz	r1, r3
 800826a:	2900      	cmp	r1, #0
 800826c:	d146      	bne.n	80082fc <__udivmoddi4+0x150>
 800826e:	42a3      	cmp	r3, r4
 8008270:	d302      	bcc.n	8008278 <__udivmoddi4+0xcc>
 8008272:	4290      	cmp	r0, r2
 8008274:	f0c0 80ee 	bcc.w	8008454 <__udivmoddi4+0x2a8>
 8008278:	1a86      	subs	r6, r0, r2
 800827a:	eb64 0303 	sbc.w	r3, r4, r3
 800827e:	2001      	movs	r0, #1
 8008280:	2d00      	cmp	r5, #0
 8008282:	d0e6      	beq.n	8008252 <__udivmoddi4+0xa6>
 8008284:	e9c5 6300 	strd	r6, r3, [r5]
 8008288:	e7e3      	b.n	8008252 <__udivmoddi4+0xa6>
 800828a:	2a00      	cmp	r2, #0
 800828c:	f040 808f 	bne.w	80083ae <__udivmoddi4+0x202>
 8008290:	eba1 040c 	sub.w	r4, r1, ip
 8008294:	2101      	movs	r1, #1
 8008296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800829a:	fa1f f78c 	uxth.w	r7, ip
 800829e:	fbb4 f6f8 	udiv	r6, r4, r8
 80082a2:	fb08 4416 	mls	r4, r8, r6, r4
 80082a6:	fb07 f006 	mul.w	r0, r7, r6
 80082aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80082ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80082b2:	4298      	cmp	r0, r3
 80082b4:	d908      	bls.n	80082c8 <__udivmoddi4+0x11c>
 80082b6:	eb1c 0303 	adds.w	r3, ip, r3
 80082ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80082be:	d202      	bcs.n	80082c6 <__udivmoddi4+0x11a>
 80082c0:	4298      	cmp	r0, r3
 80082c2:	f200 80cb 	bhi.w	800845c <__udivmoddi4+0x2b0>
 80082c6:	4626      	mov	r6, r4
 80082c8:	1a1c      	subs	r4, r3, r0
 80082ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80082ce:	fb08 4410 	mls	r4, r8, r0, r4
 80082d2:	fb00 f707 	mul.w	r7, r0, r7
 80082d6:	fa1f f38e 	uxth.w	r3, lr
 80082da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80082de:	429f      	cmp	r7, r3
 80082e0:	d908      	bls.n	80082f4 <__udivmoddi4+0x148>
 80082e2:	eb1c 0303 	adds.w	r3, ip, r3
 80082e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80082ea:	d202      	bcs.n	80082f2 <__udivmoddi4+0x146>
 80082ec:	429f      	cmp	r7, r3
 80082ee:	f200 80ae 	bhi.w	800844e <__udivmoddi4+0x2a2>
 80082f2:	4620      	mov	r0, r4
 80082f4:	1bdb      	subs	r3, r3, r7
 80082f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80082fa:	e7a5      	b.n	8008248 <__udivmoddi4+0x9c>
 80082fc:	f1c1 0720 	rsb	r7, r1, #32
 8008300:	408b      	lsls	r3, r1
 8008302:	fa22 fc07 	lsr.w	ip, r2, r7
 8008306:	ea4c 0c03 	orr.w	ip, ip, r3
 800830a:	fa24 f607 	lsr.w	r6, r4, r7
 800830e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008312:	fbb6 f8f9 	udiv	r8, r6, r9
 8008316:	fa1f fe8c 	uxth.w	lr, ip
 800831a:	fb09 6618 	mls	r6, r9, r8, r6
 800831e:	fa20 f307 	lsr.w	r3, r0, r7
 8008322:	408c      	lsls	r4, r1
 8008324:	fa00 fa01 	lsl.w	sl, r0, r1
 8008328:	fb08 f00e 	mul.w	r0, r8, lr
 800832c:	431c      	orrs	r4, r3
 800832e:	0c23      	lsrs	r3, r4, #16
 8008330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008334:	4298      	cmp	r0, r3
 8008336:	fa02 f201 	lsl.w	r2, r2, r1
 800833a:	d90a      	bls.n	8008352 <__udivmoddi4+0x1a6>
 800833c:	eb1c 0303 	adds.w	r3, ip, r3
 8008340:	f108 36ff 	add.w	r6, r8, #4294967295
 8008344:	f080 8081 	bcs.w	800844a <__udivmoddi4+0x29e>
 8008348:	4298      	cmp	r0, r3
 800834a:	d97e      	bls.n	800844a <__udivmoddi4+0x29e>
 800834c:	f1a8 0802 	sub.w	r8, r8, #2
 8008350:	4463      	add	r3, ip
 8008352:	1a1e      	subs	r6, r3, r0
 8008354:	fbb6 f3f9 	udiv	r3, r6, r9
 8008358:	fb09 6613 	mls	r6, r9, r3, r6
 800835c:	fb03 fe0e 	mul.w	lr, r3, lr
 8008360:	b2a4      	uxth	r4, r4
 8008362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8008366:	45a6      	cmp	lr, r4
 8008368:	d908      	bls.n	800837c <__udivmoddi4+0x1d0>
 800836a:	eb1c 0404 	adds.w	r4, ip, r4
 800836e:	f103 30ff 	add.w	r0, r3, #4294967295
 8008372:	d266      	bcs.n	8008442 <__udivmoddi4+0x296>
 8008374:	45a6      	cmp	lr, r4
 8008376:	d964      	bls.n	8008442 <__udivmoddi4+0x296>
 8008378:	3b02      	subs	r3, #2
 800837a:	4464      	add	r4, ip
 800837c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8008380:	fba0 8302 	umull	r8, r3, r0, r2
 8008384:	eba4 040e 	sub.w	r4, r4, lr
 8008388:	429c      	cmp	r4, r3
 800838a:	46c6      	mov	lr, r8
 800838c:	461e      	mov	r6, r3
 800838e:	d350      	bcc.n	8008432 <__udivmoddi4+0x286>
 8008390:	d04d      	beq.n	800842e <__udivmoddi4+0x282>
 8008392:	b155      	cbz	r5, 80083aa <__udivmoddi4+0x1fe>
 8008394:	ebba 030e 	subs.w	r3, sl, lr
 8008398:	eb64 0406 	sbc.w	r4, r4, r6
 800839c:	fa04 f707 	lsl.w	r7, r4, r7
 80083a0:	40cb      	lsrs	r3, r1
 80083a2:	431f      	orrs	r7, r3
 80083a4:	40cc      	lsrs	r4, r1
 80083a6:	e9c5 7400 	strd	r7, r4, [r5]
 80083aa:	2100      	movs	r1, #0
 80083ac:	e751      	b.n	8008252 <__udivmoddi4+0xa6>
 80083ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80083b2:	f1c2 0320 	rsb	r3, r2, #32
 80083b6:	40d9      	lsrs	r1, r3
 80083b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80083bc:	fa20 f303 	lsr.w	r3, r0, r3
 80083c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80083c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80083c8:	fb08 1110 	mls	r1, r8, r0, r1
 80083cc:	4094      	lsls	r4, r2
 80083ce:	431c      	orrs	r4, r3
 80083d0:	fa1f f78c 	uxth.w	r7, ip
 80083d4:	0c23      	lsrs	r3, r4, #16
 80083d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80083da:	fb00 f107 	mul.w	r1, r0, r7
 80083de:	4299      	cmp	r1, r3
 80083e0:	d908      	bls.n	80083f4 <__udivmoddi4+0x248>
 80083e2:	eb1c 0303 	adds.w	r3, ip, r3
 80083e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80083ea:	d22c      	bcs.n	8008446 <__udivmoddi4+0x29a>
 80083ec:	4299      	cmp	r1, r3
 80083ee:	d92a      	bls.n	8008446 <__udivmoddi4+0x29a>
 80083f0:	3802      	subs	r0, #2
 80083f2:	4463      	add	r3, ip
 80083f4:	1a5b      	subs	r3, r3, r1
 80083f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80083fa:	fb08 3311 	mls	r3, r8, r1, r3
 80083fe:	b2a4      	uxth	r4, r4
 8008400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008404:	fb01 f307 	mul.w	r3, r1, r7
 8008408:	42a3      	cmp	r3, r4
 800840a:	d908      	bls.n	800841e <__udivmoddi4+0x272>
 800840c:	eb1c 0404 	adds.w	r4, ip, r4
 8008410:	f101 36ff 	add.w	r6, r1, #4294967295
 8008414:	d213      	bcs.n	800843e <__udivmoddi4+0x292>
 8008416:	42a3      	cmp	r3, r4
 8008418:	d911      	bls.n	800843e <__udivmoddi4+0x292>
 800841a:	3902      	subs	r1, #2
 800841c:	4464      	add	r4, ip
 800841e:	1ae4      	subs	r4, r4, r3
 8008420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008424:	e73b      	b.n	800829e <__udivmoddi4+0xf2>
 8008426:	4604      	mov	r4, r0
 8008428:	e6f2      	b.n	8008210 <__udivmoddi4+0x64>
 800842a:	4608      	mov	r0, r1
 800842c:	e708      	b.n	8008240 <__udivmoddi4+0x94>
 800842e:	45c2      	cmp	sl, r8
 8008430:	d2af      	bcs.n	8008392 <__udivmoddi4+0x1e6>
 8008432:	ebb8 0e02 	subs.w	lr, r8, r2
 8008436:	eb63 060c 	sbc.w	r6, r3, ip
 800843a:	3801      	subs	r0, #1
 800843c:	e7a9      	b.n	8008392 <__udivmoddi4+0x1e6>
 800843e:	4631      	mov	r1, r6
 8008440:	e7ed      	b.n	800841e <__udivmoddi4+0x272>
 8008442:	4603      	mov	r3, r0
 8008444:	e79a      	b.n	800837c <__udivmoddi4+0x1d0>
 8008446:	4630      	mov	r0, r6
 8008448:	e7d4      	b.n	80083f4 <__udivmoddi4+0x248>
 800844a:	46b0      	mov	r8, r6
 800844c:	e781      	b.n	8008352 <__udivmoddi4+0x1a6>
 800844e:	4463      	add	r3, ip
 8008450:	3802      	subs	r0, #2
 8008452:	e74f      	b.n	80082f4 <__udivmoddi4+0x148>
 8008454:	4606      	mov	r6, r0
 8008456:	4623      	mov	r3, r4
 8008458:	4608      	mov	r0, r1
 800845a:	e711      	b.n	8008280 <__udivmoddi4+0xd4>
 800845c:	3e02      	subs	r6, #2
 800845e:	4463      	add	r3, ip
 8008460:	e732      	b.n	80082c8 <__udivmoddi4+0x11c>
 8008462:	bf00      	nop

08008464 <__aeabi_idiv0>:
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop

08008468 <_write>:




int _write(int file, char*ptr, int len)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
	int data_idx;

	for(data_idx = 0; data_idx < len; data_idx++)
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e00a      	b.n	8008490 <_write+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, 100);
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	1c4b      	adds	r3, r1, #1
 800847e:	60bb      	str	r3, [r7, #8]
 8008480:	2364      	movs	r3, #100	@ 0x64
 8008482:	2201      	movs	r2, #1
 8008484:	4807      	ldr	r0, [pc, #28]	@ (80084a4 <_write+0x3c>)
 8008486:	f001 fb8b 	bl	8009ba0 <HAL_UART_Transmit>
	for(data_idx = 0; data_idx < len; data_idx++)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	3301      	adds	r3, #1
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	dbf0      	blt.n	800847a <_write+0x12>

	return len;
 8008498:	687b      	ldr	r3, [r7, #4]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000084 	.word	0x20000084

080084a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0

  // bootloaderdaki referans api tablosuna bir isaretci olustuyoruz
  // sonuc olarak api struct'i kopyalamiyor, diyor ki 0x8018000 bu adreste api fonksiyon tablon mevcut
  // o adresteki yapiya bak

  struct BootloaderSharedAPI *api = (struct BootloaderSharedAPI*) 0x8018000;
 80084ae:	4b0b      	ldr	r3, [pc, #44]	@ (80084dc <main+0x34>)
 80084b0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084b2:	f000 fa22 	bl	80088fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084b6:	f000 f815 	bl	80084e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084ba:	f000 f88b 	bl	80085d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80084be:	f000 f85f 	bl	8008580 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("APP(1) Running\r\n");
 80084c2:	4807      	ldr	r0, [pc, #28]	@ (80084e0 <main+0x38>)
 80084c4:	f001 feae 	bl	800a224 <puts>
	api->blink(200);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	20c8      	movs	r0, #200	@ 0xc8
 80084ce:	4798      	blx	r3
	HAL_Delay(1000);
 80084d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80084d4:	f000 fa80 	bl	80089d8 <HAL_Delay>
	printf("APP(1) Running\r\n");
 80084d8:	bf00      	nop
 80084da:	e7f2      	b.n	80084c2 <main+0x1a>
 80084dc:	08018000 	.word	0x08018000
 80084e0:	0800a958 	.word	0x0800a958

080084e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b092      	sub	sp, #72	@ 0x48
 80084e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084ea:	f107 0314 	add.w	r3, r7, #20
 80084ee:	2234      	movs	r2, #52	@ 0x34
 80084f0:	2100      	movs	r1, #0
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 ff76 	bl	800a3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084f8:	463b      	mov	r3, r7
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	605a      	str	r2, [r3, #4]
 8008500:	609a      	str	r2, [r3, #8]
 8008502:	60da      	str	r2, [r3, #12]
 8008504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008506:	4b1d      	ldr	r3, [pc, #116]	@ (800857c <SystemClock_Config+0x98>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800850e:	4a1b      	ldr	r2, [pc, #108]	@ (800857c <SystemClock_Config+0x98>)
 8008510:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008514:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008516:	2302      	movs	r3, #2
 8008518:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800851a:	2301      	movs	r3, #1
 800851c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800851e:	2310      	movs	r3, #16
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008522:	2302      	movs	r3, #2
 8008524:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008526:	2300      	movs	r3, #0
 8008528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800852a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800852e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8008530:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008534:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008536:	f107 0314 	add.w	r3, r7, #20
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fcea 	bl	8008f14 <HAL_RCC_OscConfig>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8008546:	f000 f883 	bl	8008650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800854a:	230f      	movs	r3, #15
 800854c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800854e:	2303      	movs	r3, #3
 8008550:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800855a:	2300      	movs	r3, #0
 800855c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800855e:	463b      	mov	r3, r7
 8008560:	2101      	movs	r1, #1
 8008562:	4618      	mov	r0, r3
 8008564:	f001 f806 	bl	8009574 <HAL_RCC_ClockConfig>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800856e:	f000 f86f 	bl	8008650 <Error_Handler>
  }
}
 8008572:	bf00      	nop
 8008574:	3748      	adds	r7, #72	@ 0x48
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40007000 	.word	0x40007000

08008580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008584:	4b11      	ldr	r3, [pc, #68]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 8008586:	4a12      	ldr	r2, [pc, #72]	@ (80085d0 <MX_USART2_UART_Init+0x50>)
 8008588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800858a:	4b10      	ldr	r3, [pc, #64]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 800858c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008592:	4b0e      	ldr	r3, [pc, #56]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 8008594:	2200      	movs	r2, #0
 8008596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008598:	4b0c      	ldr	r3, [pc, #48]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 800859a:	2200      	movs	r2, #0
 800859c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800859e:	4b0b      	ldr	r3, [pc, #44]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80085a4:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 80085a6:	220c      	movs	r2, #12
 80085a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085aa:	4b08      	ldr	r3, [pc, #32]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80085b0:	4b06      	ldr	r3, [pc, #24]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80085b6:	4805      	ldr	r0, [pc, #20]	@ (80085cc <MX_USART2_UART_Init+0x4c>)
 80085b8:	f001 faa2 	bl	8009b00 <HAL_UART_Init>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80085c2:	f000 f845 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80085c6:	bf00      	nop
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000084 	.word	0x20000084
 80085d0:	40004400 	.word	0x40004400

080085d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	605a      	str	r2, [r3, #4]
 80085e4:	609a      	str	r2, [r3, #8]
 80085e6:	60da      	str	r2, [r3, #12]
 80085e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ea:	4b17      	ldr	r3, [pc, #92]	@ (8008648 <MX_GPIO_Init+0x74>)
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	4a16      	ldr	r2, [pc, #88]	@ (8008648 <MX_GPIO_Init+0x74>)
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	61d3      	str	r3, [r2, #28]
 80085f6:	4b14      	ldr	r3, [pc, #80]	@ (8008648 <MX_GPIO_Init+0x74>)
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	60bb      	str	r3, [r7, #8]
 8008600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008602:	4b11      	ldr	r3, [pc, #68]	@ (8008648 <MX_GPIO_Init+0x74>)
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	4a10      	ldr	r2, [pc, #64]	@ (8008648 <MX_GPIO_Init+0x74>)
 8008608:	f043 0302 	orr.w	r3, r3, #2
 800860c:	61d3      	str	r3, [r2, #28]
 800860e:	4b0e      	ldr	r3, [pc, #56]	@ (8008648 <MX_GPIO_Init+0x74>)
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	607b      	str	r3, [r7, #4]
 8008618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800861a:	2200      	movs	r2, #0
 800861c:	2180      	movs	r1, #128	@ 0x80
 800861e:	480b      	ldr	r0, [pc, #44]	@ (800864c <MX_GPIO_Init+0x78>)
 8008620:	f000 fc60 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8008624:	2380      	movs	r3, #128	@ 0x80
 8008626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008628:	2301      	movs	r3, #1
 800862a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008630:	2300      	movs	r3, #0
 8008632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8008634:	f107 030c 	add.w	r3, r7, #12
 8008638:	4619      	mov	r1, r3
 800863a:	4804      	ldr	r0, [pc, #16]	@ (800864c <MX_GPIO_Init+0x78>)
 800863c:	f000 fad2 	bl	8008be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008640:	bf00      	nop
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40023800 	.word	0x40023800
 800864c:	40020400 	.word	0x40020400

08008650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008654:	b672      	cpsid	i
}
 8008656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <Error_Handler+0x8>

0800865c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8008662:	4b15      	ldr	r3, [pc, #84]	@ (80086b8 <HAL_MspInit+0x5c>)
 8008664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008666:	4a14      	ldr	r2, [pc, #80]	@ (80086b8 <HAL_MspInit+0x5c>)
 8008668:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800866c:	6253      	str	r3, [r2, #36]	@ 0x24
 800866e:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <HAL_MspInit+0x5c>)
 8008670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800867a:	4b0f      	ldr	r3, [pc, #60]	@ (80086b8 <HAL_MspInit+0x5c>)
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	4a0e      	ldr	r2, [pc, #56]	@ (80086b8 <HAL_MspInit+0x5c>)
 8008680:	f043 0301 	orr.w	r3, r3, #1
 8008684:	6213      	str	r3, [r2, #32]
 8008686:	4b0c      	ldr	r3, [pc, #48]	@ (80086b8 <HAL_MspInit+0x5c>)
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	60bb      	str	r3, [r7, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008692:	4b09      	ldr	r3, [pc, #36]	@ (80086b8 <HAL_MspInit+0x5c>)
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	4a08      	ldr	r2, [pc, #32]	@ (80086b8 <HAL_MspInit+0x5c>)
 8008698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800869c:	6253      	str	r3, [r2, #36]	@ 0x24
 800869e:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <HAL_MspInit+0x5c>)
 80086a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086a6:	607b      	str	r3, [r7, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80086aa:	2007      	movs	r0, #7
 80086ac:	f000 fa66 	bl	8008b7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80086b0:	bf00      	nop
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40023800 	.word	0x40023800

080086bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08a      	sub	sp, #40	@ 0x28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c4:	f107 0314 	add.w	r3, r7, #20
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	605a      	str	r2, [r3, #4]
 80086ce:	609a      	str	r2, [r3, #8]
 80086d0:	60da      	str	r2, [r3, #12]
 80086d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a17      	ldr	r2, [pc, #92]	@ (8008738 <HAL_UART_MspInit+0x7c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d127      	bne.n	800872e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80086de:	4b17      	ldr	r3, [pc, #92]	@ (800873c <HAL_UART_MspInit+0x80>)
 80086e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e2:	4a16      	ldr	r2, [pc, #88]	@ (800873c <HAL_UART_MspInit+0x80>)
 80086e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80086ea:	4b14      	ldr	r3, [pc, #80]	@ (800873c <HAL_UART_MspInit+0x80>)
 80086ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086f6:	4b11      	ldr	r3, [pc, #68]	@ (800873c <HAL_UART_MspInit+0x80>)
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	4a10      	ldr	r2, [pc, #64]	@ (800873c <HAL_UART_MspInit+0x80>)
 80086fc:	f043 0301 	orr.w	r3, r3, #1
 8008700:	61d3      	str	r3, [r2, #28]
 8008702:	4b0e      	ldr	r3, [pc, #56]	@ (800873c <HAL_UART_MspInit+0x80>)
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800870e:	230c      	movs	r3, #12
 8008710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008712:	2302      	movs	r3, #2
 8008714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800871a:	2303      	movs	r3, #3
 800871c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800871e:	2307      	movs	r3, #7
 8008720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008722:	f107 0314 	add.w	r3, r7, #20
 8008726:	4619      	mov	r1, r3
 8008728:	4805      	ldr	r0, [pc, #20]	@ (8008740 <HAL_UART_MspInit+0x84>)
 800872a:	f000 fa5b 	bl	8008be4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800872e:	bf00      	nop
 8008730:	3728      	adds	r7, #40	@ 0x28
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	40004400 	.word	0x40004400
 800873c:	40023800 	.word	0x40023800
 8008740:	40020000 	.word	0x40020000

08008744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008748:	bf00      	nop
 800874a:	e7fd      	b.n	8008748 <NMI_Handler+0x4>

0800874c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008750:	bf00      	nop
 8008752:	e7fd      	b.n	8008750 <HardFault_Handler+0x4>

08008754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <MemManage_Handler+0x4>

0800875c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008760:	bf00      	nop
 8008762:	e7fd      	b.n	8008760 <BusFault_Handler+0x4>

08008764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008768:	bf00      	nop
 800876a:	e7fd      	b.n	8008768 <UsageFault_Handler+0x4>

0800876c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008770:	bf00      	nop
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800877c:	bf00      	nop
 800877e:	46bd      	mov	sp, r7
 8008780:	bc80      	pop	{r7}
 8008782:	4770      	bx	lr

08008784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008788:	bf00      	nop
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr

08008790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008794:	f000 f904 	bl	80089a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008798:	bf00      	nop
 800879a:	bd80      	pop	{r7, pc}

0800879c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	e00a      	b.n	80087c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80087ae:	f3af 8000 	nop.w
 80087b2:	4601      	mov	r1, r0
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	60ba      	str	r2, [r7, #8]
 80087ba:	b2ca      	uxtb	r2, r1
 80087bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	3301      	adds	r3, #1
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	dbf0      	blt.n	80087ae <_read+0x12>
  }

  return len;
 80087cc:	687b      	ldr	r3, [r7, #4]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80087de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80087fc:	605a      	str	r2, [r3, #4]
  return 0;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	bc80      	pop	{r7}
 8008808:	4770      	bx	lr

0800880a <_isatty>:

int _isatty(int file)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008812:	2301      	movs	r3, #1
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr

0800881e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800881e:	b480      	push	{r7}
 8008820:	b085      	sub	sp, #20
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr
	...

08008838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008840:	4a14      	ldr	r2, [pc, #80]	@ (8008894 <_sbrk+0x5c>)
 8008842:	4b15      	ldr	r3, [pc, #84]	@ (8008898 <_sbrk+0x60>)
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800884c:	4b13      	ldr	r3, [pc, #76]	@ (800889c <_sbrk+0x64>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008854:	4b11      	ldr	r3, [pc, #68]	@ (800889c <_sbrk+0x64>)
 8008856:	4a12      	ldr	r2, [pc, #72]	@ (80088a0 <_sbrk+0x68>)
 8008858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800885a:	4b10      	ldr	r3, [pc, #64]	@ (800889c <_sbrk+0x64>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4413      	add	r3, r2
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d207      	bcs.n	8008878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008868:	f001 fe0a 	bl	800a480 <__errno>
 800886c:	4603      	mov	r3, r0
 800886e:	220c      	movs	r2, #12
 8008870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008872:	f04f 33ff 	mov.w	r3, #4294967295
 8008876:	e009      	b.n	800888c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008878:	4b08      	ldr	r3, [pc, #32]	@ (800889c <_sbrk+0x64>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800887e:	4b07      	ldr	r3, [pc, #28]	@ (800889c <_sbrk+0x64>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4413      	add	r3, r2
 8008886:	4a05      	ldr	r2, [pc, #20]	@ (800889c <_sbrk+0x64>)
 8008888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800888a:	68fb      	ldr	r3, [r7, #12]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20008000 	.word	0x20008000
 8008898:	00000400 	.word	0x00000400
 800889c:	200000cc 	.word	0x200000cc
 80088a0:	20000220 	.word	0x20000220

080088a4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80088a8:	bf00      	nop
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr

080088b0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80088b0:	f7ff fff8 	bl	80088a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80088b4:	480b      	ldr	r0, [pc, #44]	@ (80088e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80088b6:	490c      	ldr	r1, [pc, #48]	@ (80088e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80088b8:	4a0c      	ldr	r2, [pc, #48]	@ (80088ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80088ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80088bc:	e002      	b.n	80088c4 <LoopCopyDataInit>

080088be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80088be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80088c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80088c2:	3304      	adds	r3, #4

080088c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80088c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80088c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80088c8:	d3f9      	bcc.n	80088be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80088ca:	4a09      	ldr	r2, [pc, #36]	@ (80088f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80088cc:	4c09      	ldr	r4, [pc, #36]	@ (80088f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80088ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80088d0:	e001      	b.n	80088d6 <LoopFillZerobss>

080088d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80088d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80088d4:	3204      	adds	r2, #4

080088d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80088d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80088d8:	d3fb      	bcc.n	80088d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80088da:	f001 fdd7 	bl	800a48c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80088de:	f7ff fde3 	bl	80084a8 <main>
  bx lr
 80088e2:	4770      	bx	lr
  ldr r0, =_sdata
 80088e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80088e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80088ec:	0800a99c 	.word	0x0800a99c
  ldr r2, =_sbss
 80088f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80088f4:	20000220 	.word	0x20000220

080088f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80088f8:	e7fe      	b.n	80088f8 <ADC1_IRQHandler>

080088fa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008904:	2003      	movs	r0, #3
 8008906:	f000 f939 	bl	8008b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800890a:	2000      	movs	r0, #0
 800890c:	f000 f80e 	bl	800892c <HAL_InitTick>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	71fb      	strb	r3, [r7, #7]
 800891a:	e001      	b.n	8008920 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800891c:	f7ff fe9e 	bl	800865c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008920:	79fb      	ldrb	r3, [r7, #7]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008938:	4b16      	ldr	r3, [pc, #88]	@ (8008994 <HAL_InitTick+0x68>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d022      	beq.n	8008986 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008940:	4b15      	ldr	r3, [pc, #84]	@ (8008998 <HAL_InitTick+0x6c>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	4b13      	ldr	r3, [pc, #76]	@ (8008994 <HAL_InitTick+0x68>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800894c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008950:	fbb2 f3f3 	udiv	r3, r2, r3
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f938 	bl	8008bca <HAL_SYSTICK_Config>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10f      	bne.n	8008980 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b0f      	cmp	r3, #15
 8008964:	d809      	bhi.n	800897a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008966:	2200      	movs	r2, #0
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	f04f 30ff 	mov.w	r0, #4294967295
 800896e:	f000 f910 	bl	8008b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008972:	4a0a      	ldr	r2, [pc, #40]	@ (800899c <HAL_InitTick+0x70>)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	e007      	b.n	800898a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	73fb      	strb	r3, [r7, #15]
 800897e:	e004      	b.n	800898a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	73fb      	strb	r3, [r7, #15]
 8008984:	e001      	b.n	800898a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20000008 	.word	0x20000008
 8008998:	20000000 	.word	0x20000000
 800899c:	20000004 	.word	0x20000004

080089a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089a4:	4b05      	ldr	r3, [pc, #20]	@ (80089bc <HAL_IncTick+0x1c>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <HAL_IncTick+0x20>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4413      	add	r3, r2
 80089ae:	4a03      	ldr	r2, [pc, #12]	@ (80089bc <HAL_IncTick+0x1c>)
 80089b0:	6013      	str	r3, [r2, #0]
}
 80089b2:	bf00      	nop
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	200000d0 	.word	0x200000d0
 80089c0:	20000008 	.word	0x20000008

080089c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089c4:	b480      	push	{r7}
 80089c6:	af00      	add	r7, sp, #0
  return uwTick;
 80089c8:	4b02      	ldr	r3, [pc, #8]	@ (80089d4 <HAL_GetTick+0x10>)
 80089ca:	681b      	ldr	r3, [r3, #0]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bc80      	pop	{r7}
 80089d2:	4770      	bx	lr
 80089d4:	200000d0 	.word	0x200000d0

080089d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80089e0:	f7ff fff0 	bl	80089c4 <HAL_GetTick>
 80089e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f0:	d004      	beq.n	80089fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80089f2:	4b09      	ldr	r3, [pc, #36]	@ (8008a18 <HAL_Delay+0x40>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4413      	add	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80089fc:	bf00      	nop
 80089fe:	f7ff ffe1 	bl	80089c4 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d8f7      	bhi.n	80089fe <HAL_Delay+0x26>
  {
  }
}
 8008a0e:	bf00      	nop
 8008a10:	bf00      	nop
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20000008 	.word	0x20000008

08008a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a60 <__NVIC_SetPriorityGrouping+0x44>)
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008a38:	4013      	ands	r3, r2
 8008a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a4e:	4a04      	ldr	r2, [pc, #16]	@ (8008a60 <__NVIC_SetPriorityGrouping+0x44>)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	60d3      	str	r3, [r2, #12]
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	e000ed00 	.word	0xe000ed00

08008a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a68:	4b04      	ldr	r3, [pc, #16]	@ (8008a7c <__NVIC_GetPriorityGrouping+0x18>)
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	0a1b      	lsrs	r3, r3, #8
 8008a6e:	f003 0307 	and.w	r3, r3, #7
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bc80      	pop	{r7}
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	e000ed00 	.word	0xe000ed00

08008a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	db0a      	blt.n	8008aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	490c      	ldr	r1, [pc, #48]	@ (8008acc <__NVIC_SetPriority+0x4c>)
 8008a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a9e:	0112      	lsls	r2, r2, #4
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008aa8:	e00a      	b.n	8008ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	4908      	ldr	r1, [pc, #32]	@ (8008ad0 <__NVIC_SetPriority+0x50>)
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	f003 030f 	and.w	r3, r3, #15
 8008ab6:	3b04      	subs	r3, #4
 8008ab8:	0112      	lsls	r2, r2, #4
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	440b      	add	r3, r1
 8008abe:	761a      	strb	r2, [r3, #24]
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	e000e100 	.word	0xe000e100
 8008ad0:	e000ed00 	.word	0xe000ed00

08008ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b089      	sub	sp, #36	@ 0x24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	f1c3 0307 	rsb	r3, r3, #7
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	bf28      	it	cs
 8008af2:	2304      	movcs	r3, #4
 8008af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	3304      	adds	r3, #4
 8008afa:	2b06      	cmp	r3, #6
 8008afc:	d902      	bls.n	8008b04 <NVIC_EncodePriority+0x30>
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	3b03      	subs	r3, #3
 8008b02:	e000      	b.n	8008b06 <NVIC_EncodePriority+0x32>
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b08:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b12:	43da      	mvns	r2, r3
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	401a      	ands	r2, r3
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	fa01 f303 	lsl.w	r3, r1, r3
 8008b26:	43d9      	mvns	r1, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b2c:	4313      	orrs	r3, r2
         );
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3724      	adds	r7, #36	@ 0x24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bc80      	pop	{r7}
 8008b36:	4770      	bx	lr

08008b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b48:	d301      	bcc.n	8008b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e00f      	b.n	8008b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b78 <SysTick_Config+0x40>)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b56:	210f      	movs	r1, #15
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	f7ff ff90 	bl	8008a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b60:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <SysTick_Config+0x40>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b66:	4b04      	ldr	r3, [pc, #16]	@ (8008b78 <SysTick_Config+0x40>)
 8008b68:	2207      	movs	r2, #7
 8008b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	e000e010 	.word	0xe000e010

08008b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7ff ff49 	bl	8008a1c <__NVIC_SetPriorityGrouping>
}
 8008b8a:	bf00      	nop
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	4603      	mov	r3, r0
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	607a      	str	r2, [r7, #4]
 8008b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ba4:	f7ff ff5e 	bl	8008a64 <__NVIC_GetPriorityGrouping>
 8008ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	6978      	ldr	r0, [r7, #20]
 8008bb0:	f7ff ff90 	bl	8008ad4 <NVIC_EncodePriority>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff ff5f 	bl	8008a80 <__NVIC_SetPriority>
}
 8008bc2:	bf00      	nop
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff ffb0 	bl	8008b38 <SysTick_Config>
 8008bd8:	4603      	mov	r3, r0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8008bfa:	e154      	b.n	8008ea6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	2101      	movs	r1, #1
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	fa01 f303 	lsl.w	r3, r1, r3
 8008c08:	4013      	ands	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 8146 	beq.w	8008ea0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d005      	beq.n	8008c2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d130      	bne.n	8008c8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	2203      	movs	r2, #3
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4013      	ands	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	68da      	ldr	r2, [r3, #12]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8008c62:	2201      	movs	r2, #1
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	091b      	lsrs	r3, r3, #4
 8008c78:	f003 0201 	and.w	r2, r3, #1
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d017      	beq.n	8008cca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	43db      	mvns	r3, r3
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d123      	bne.n	8008d1e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	08da      	lsrs	r2, r3, #3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3208      	adds	r2, #8
 8008cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	220f      	movs	r2, #15
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	691a      	ldr	r2, [r3, #16]
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	08da      	lsrs	r2, r3, #3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3208      	adds	r2, #8
 8008d18:	6939      	ldr	r1, [r7, #16]
 8008d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	2203      	movs	r2, #3
 8008d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2e:	43db      	mvns	r3, r3
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	4013      	ands	r3, r2
 8008d34:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f003 0203 	and.w	r2, r3, #3
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 80a0 	beq.w	8008ea0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d60:	4b58      	ldr	r3, [pc, #352]	@ (8008ec4 <HAL_GPIO_Init+0x2e0>)
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	4a57      	ldr	r2, [pc, #348]	@ (8008ec4 <HAL_GPIO_Init+0x2e0>)
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	6213      	str	r3, [r2, #32]
 8008d6c:	4b55      	ldr	r3, [pc, #340]	@ (8008ec4 <HAL_GPIO_Init+0x2e0>)
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	60bb      	str	r3, [r7, #8]
 8008d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8008d78:	4a53      	ldr	r2, [pc, #332]	@ (8008ec8 <HAL_GPIO_Init+0x2e4>)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	089b      	lsrs	r3, r3, #2
 8008d7e:	3302      	adds	r3, #2
 8008d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f003 0303 	and.w	r3, r3, #3
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	220f      	movs	r2, #15
 8008d90:	fa02 f303 	lsl.w	r3, r2, r3
 8008d94:	43db      	mvns	r3, r3
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a4b      	ldr	r2, [pc, #300]	@ (8008ecc <HAL_GPIO_Init+0x2e8>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d019      	beq.n	8008dd8 <HAL_GPIO_Init+0x1f4>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a4a      	ldr	r2, [pc, #296]	@ (8008ed0 <HAL_GPIO_Init+0x2ec>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d013      	beq.n	8008dd4 <HAL_GPIO_Init+0x1f0>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a49      	ldr	r2, [pc, #292]	@ (8008ed4 <HAL_GPIO_Init+0x2f0>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00d      	beq.n	8008dd0 <HAL_GPIO_Init+0x1ec>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a48      	ldr	r2, [pc, #288]	@ (8008ed8 <HAL_GPIO_Init+0x2f4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d007      	beq.n	8008dcc <HAL_GPIO_Init+0x1e8>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a47      	ldr	r2, [pc, #284]	@ (8008edc <HAL_GPIO_Init+0x2f8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d101      	bne.n	8008dc8 <HAL_GPIO_Init+0x1e4>
 8008dc4:	2304      	movs	r3, #4
 8008dc6:	e008      	b.n	8008dda <HAL_GPIO_Init+0x1f6>
 8008dc8:	2305      	movs	r3, #5
 8008dca:	e006      	b.n	8008dda <HAL_GPIO_Init+0x1f6>
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e004      	b.n	8008dda <HAL_GPIO_Init+0x1f6>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e002      	b.n	8008dda <HAL_GPIO_Init+0x1f6>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <HAL_GPIO_Init+0x1f6>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	f002 0203 	and.w	r2, r2, #3
 8008de0:	0092      	lsls	r2, r2, #2
 8008de2:	4093      	lsls	r3, r2
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008dea:	4937      	ldr	r1, [pc, #220]	@ (8008ec8 <HAL_GPIO_Init+0x2e4>)
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	089b      	lsrs	r3, r3, #2
 8008df0:	3302      	adds	r3, #2
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008df8:	4b39      	ldr	r3, [pc, #228]	@ (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	43db      	mvns	r3, r3
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4013      	ands	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008e1c:	4a30      	ldr	r2, [pc, #192]	@ (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e22:	4b2f      	ldr	r3, [pc, #188]	@ (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008e46:	4a26      	ldr	r2, [pc, #152]	@ (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008e4c:	4b24      	ldr	r3, [pc, #144]	@ (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	43db      	mvns	r3, r3
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008e70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e76:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	43db      	mvns	r3, r3
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	4013      	ands	r3, r2
 8008e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008e9a:	4a11      	ldr	r2, [pc, #68]	@ (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f47f aea3 	bne.w	8008bfc <HAL_GPIO_Init+0x18>
  }
}
 8008eb6:	bf00      	nop
 8008eb8:	bf00      	nop
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40023800 	.word	0x40023800
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40020000 	.word	0x40020000
 8008ed0:	40020400 	.word	0x40020400
 8008ed4:	40020800 	.word	0x40020800
 8008ed8:	40020c00 	.word	0x40020c00
 8008edc:	40021000 	.word	0x40021000
 8008ee0:	40010400 	.word	0x40010400

08008ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	807b      	strh	r3, [r7, #2]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ef4:	787b      	ldrb	r3, [r7, #1]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008efa:	887a      	ldrh	r2, [r7, #2]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8008f00:	e003      	b.n	8008f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8008f02:	887b      	ldrh	r3, [r7, #2]
 8008f04:	041a      	lsls	r2, r3, #16
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	619a      	str	r2, [r3, #24]
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bc80      	pop	{r7}
 8008f12:	4770      	bx	lr

08008f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b088      	sub	sp, #32
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e31d      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f26:	4b94      	ldr	r3, [pc, #592]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 030c 	and.w	r3, r3, #12
 8008f2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f30:	4b91      	ldr	r3, [pc, #580]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f38:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d07b      	beq.n	800903e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	2b08      	cmp	r3, #8
 8008f4a:	d006      	beq.n	8008f5a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	2b0c      	cmp	r3, #12
 8008f50:	d10f      	bne.n	8008f72 <HAL_RCC_OscConfig+0x5e>
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f58:	d10b      	bne.n	8008f72 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f5a:	4b87      	ldr	r3, [pc, #540]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d06a      	beq.n	800903c <HAL_RCC_OscConfig+0x128>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d166      	bne.n	800903c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e2f7      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d106      	bne.n	8008f88 <HAL_RCC_OscConfig+0x74>
 8008f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	e02d      	b.n	8008fe4 <HAL_RCC_OscConfig+0xd0>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10c      	bne.n	8008faa <HAL_RCC_OscConfig+0x96>
 8008f90:	4b79      	ldr	r3, [pc, #484]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a78      	ldr	r2, [pc, #480]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	4b76      	ldr	r3, [pc, #472]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a75      	ldr	r2, [pc, #468]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	e01c      	b.n	8008fe4 <HAL_RCC_OscConfig+0xd0>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	d10c      	bne.n	8008fcc <HAL_RCC_OscConfig+0xb8>
 8008fb2:	4b71      	ldr	r3, [pc, #452]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a70      	ldr	r2, [pc, #448]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a6d      	ldr	r2, [pc, #436]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	e00b      	b.n	8008fe4 <HAL_RCC_OscConfig+0xd0>
 8008fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a69      	ldr	r2, [pc, #420]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	4b67      	ldr	r3, [pc, #412]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a66      	ldr	r2, [pc, #408]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8008fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d013      	beq.n	8009014 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fec:	f7ff fcea 	bl	80089c4 <HAL_GetTick>
 8008ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ff2:	e008      	b.n	8009006 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ff4:	f7ff fce6 	bl	80089c4 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	2b64      	cmp	r3, #100	@ 0x64
 8009000:	d901      	bls.n	8009006 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e2ad      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009006:	4b5c      	ldr	r3, [pc, #368]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0f0      	beq.n	8008ff4 <HAL_RCC_OscConfig+0xe0>
 8009012:	e014      	b.n	800903e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009014:	f7ff fcd6 	bl	80089c4 <HAL_GetTick>
 8009018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800901a:	e008      	b.n	800902e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800901c:	f7ff fcd2 	bl	80089c4 <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	2b64      	cmp	r3, #100	@ 0x64
 8009028:	d901      	bls.n	800902e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e299      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800902e:	4b52      	ldr	r3, [pc, #328]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1f0      	bne.n	800901c <HAL_RCC_OscConfig+0x108>
 800903a:	e000      	b.n	800903e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800903c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d05a      	beq.n	8009100 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b04      	cmp	r3, #4
 800904e:	d005      	beq.n	800905c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2b0c      	cmp	r3, #12
 8009054:	d119      	bne.n	800908a <HAL_RCC_OscConfig+0x176>
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d116      	bne.n	800908a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800905c:	4b46      	ldr	r3, [pc, #280]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <HAL_RCC_OscConfig+0x160>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d001      	beq.n	8009074 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e276      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009074:	4b40      	ldr	r3, [pc, #256]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	021b      	lsls	r3, r3, #8
 8009082:	493d      	ldr	r1, [pc, #244]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009084:	4313      	orrs	r3, r2
 8009086:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009088:	e03a      	b.n	8009100 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d020      	beq.n	80090d4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009092:	4b3a      	ldr	r3, [pc, #232]	@ (800917c <HAL_RCC_OscConfig+0x268>)
 8009094:	2201      	movs	r2, #1
 8009096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009098:	f7ff fc94 	bl	80089c4 <HAL_GetTick>
 800909c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090a0:	f7ff fc90 	bl	80089c4 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e257      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090b2:	4b31      	ldr	r3, [pc, #196]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0f0      	beq.n	80090a0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090be:	4b2e      	ldr	r3, [pc, #184]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	492a      	ldr	r1, [pc, #168]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	604b      	str	r3, [r1, #4]
 80090d2:	e015      	b.n	8009100 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090d4:	4b29      	ldr	r3, [pc, #164]	@ (800917c <HAL_RCC_OscConfig+0x268>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090da:	f7ff fc73 	bl	80089c4 <HAL_GetTick>
 80090de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090e0:	e008      	b.n	80090f4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090e2:	f7ff fc6f 	bl	80089c4 <HAL_GetTick>
 80090e6:	4602      	mov	r2, r0
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d901      	bls.n	80090f4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e236      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090f4:	4b20      	ldr	r3, [pc, #128]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1f0      	bne.n	80090e2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 80b8 	beq.w	800927e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d170      	bne.n	80091f6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009114:	4b18      	ldr	r3, [pc, #96]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <HAL_RCC_OscConfig+0x218>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e21a      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a1a      	ldr	r2, [r3, #32]
 8009130:	4b11      	ldr	r3, [pc, #68]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009138:	429a      	cmp	r2, r3
 800913a:	d921      	bls.n	8009180 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	4618      	mov	r0, r3
 8009142:	f000 fc7d 	bl	8009a40 <RCC_SetFlashLatencyFromMSIRange>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e208      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009150:	4b09      	ldr	r3, [pc, #36]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a1b      	ldr	r3, [r3, #32]
 800915c:	4906      	ldr	r1, [pc, #24]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 800915e:	4313      	orrs	r3, r2
 8009160:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009162:	4b05      	ldr	r3, [pc, #20]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	061b      	lsls	r3, r3, #24
 8009170:	4901      	ldr	r1, [pc, #4]	@ (8009178 <HAL_RCC_OscConfig+0x264>)
 8009172:	4313      	orrs	r3, r2
 8009174:	604b      	str	r3, [r1, #4]
 8009176:	e020      	b.n	80091ba <HAL_RCC_OscConfig+0x2a6>
 8009178:	40023800 	.word	0x40023800
 800917c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009180:	4b99      	ldr	r3, [pc, #612]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	4996      	ldr	r1, [pc, #600]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 800918e:	4313      	orrs	r3, r2
 8009190:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009192:	4b95      	ldr	r3, [pc, #596]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	061b      	lsls	r3, r3, #24
 80091a0:	4991      	ldr	r1, [pc, #580]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fc48 	bl	8009a40 <RCC_SetFlashLatencyFromMSIRange>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e1d3      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	0b5b      	lsrs	r3, r3, #13
 80091c0:	3301      	adds	r3, #1
 80091c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80091c6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80091ca:	4a87      	ldr	r2, [pc, #540]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80091cc:	6892      	ldr	r2, [r2, #8]
 80091ce:	0912      	lsrs	r2, r2, #4
 80091d0:	f002 020f 	and.w	r2, r2, #15
 80091d4:	4985      	ldr	r1, [pc, #532]	@ (80093ec <HAL_RCC_OscConfig+0x4d8>)
 80091d6:	5c8a      	ldrb	r2, [r1, r2]
 80091d8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80091da:	4a85      	ldr	r2, [pc, #532]	@ (80093f0 <HAL_RCC_OscConfig+0x4dc>)
 80091dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80091de:	4b85      	ldr	r3, [pc, #532]	@ (80093f4 <HAL_RCC_OscConfig+0x4e0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fba2 	bl	800892c <HAL_InitTick>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d045      	beq.n	800927e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	e1b5      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d029      	beq.n	8009252 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80091fe:	4b7e      	ldr	r3, [pc, #504]	@ (80093f8 <HAL_RCC_OscConfig+0x4e4>)
 8009200:	2201      	movs	r2, #1
 8009202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009204:	f7ff fbde 	bl	80089c4 <HAL_GetTick>
 8009208:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800920c:	f7ff fbda 	bl	80089c4 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e1a1      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800921e:	4b72      	ldr	r3, [pc, #456]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f0      	beq.n	800920c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800922a:	4b6f      	ldr	r3, [pc, #444]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	496c      	ldr	r1, [pc, #432]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009238:	4313      	orrs	r3, r2
 800923a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800923c:	4b6a      	ldr	r3, [pc, #424]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	061b      	lsls	r3, r3, #24
 800924a:	4967      	ldr	r1, [pc, #412]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 800924c:	4313      	orrs	r3, r2
 800924e:	604b      	str	r3, [r1, #4]
 8009250:	e015      	b.n	800927e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009252:	4b69      	ldr	r3, [pc, #420]	@ (80093f8 <HAL_RCC_OscConfig+0x4e4>)
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009258:	f7ff fbb4 	bl	80089c4 <HAL_GetTick>
 800925c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800925e:	e008      	b.n	8009272 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009260:	f7ff fbb0 	bl	80089c4 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	2b02      	cmp	r3, #2
 800926c:	d901      	bls.n	8009272 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e177      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009272:	4b5d      	ldr	r3, [pc, #372]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1f0      	bne.n	8009260 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d030      	beq.n	80092ec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d016      	beq.n	80092c0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009292:	4b5a      	ldr	r3, [pc, #360]	@ (80093fc <HAL_RCC_OscConfig+0x4e8>)
 8009294:	2201      	movs	r2, #1
 8009296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009298:	f7ff fb94 	bl	80089c4 <HAL_GetTick>
 800929c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800929e:	e008      	b.n	80092b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092a0:	f7ff fb90 	bl	80089c4 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d901      	bls.n	80092b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	e157      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092b2:	4b4d      	ldr	r3, [pc, #308]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80092b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0f0      	beq.n	80092a0 <HAL_RCC_OscConfig+0x38c>
 80092be:	e015      	b.n	80092ec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092c0:	4b4e      	ldr	r3, [pc, #312]	@ (80093fc <HAL_RCC_OscConfig+0x4e8>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092c6:	f7ff fb7d 	bl	80089c4 <HAL_GetTick>
 80092ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092cc:	e008      	b.n	80092e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092ce:	f7ff fb79 	bl	80089c4 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d901      	bls.n	80092e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e140      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092e0:	4b41      	ldr	r3, [pc, #260]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80092e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1f0      	bne.n	80092ce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80b5 	beq.w	8009464 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092fa:	2300      	movs	r3, #0
 80092fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092fe:	4b3a      	ldr	r3, [pc, #232]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10d      	bne.n	8009326 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800930a:	4b37      	ldr	r3, [pc, #220]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 800930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930e:	4a36      	ldr	r2, [pc, #216]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009314:	6253      	str	r3, [r2, #36]	@ 0x24
 8009316:	4b34      	ldr	r3, [pc, #208]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800931e:	60bb      	str	r3, [r7, #8]
 8009320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009322:	2301      	movs	r3, #1
 8009324:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009326:	4b36      	ldr	r3, [pc, #216]	@ (8009400 <HAL_RCC_OscConfig+0x4ec>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932e:	2b00      	cmp	r3, #0
 8009330:	d118      	bne.n	8009364 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009332:	4b33      	ldr	r3, [pc, #204]	@ (8009400 <HAL_RCC_OscConfig+0x4ec>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a32      	ldr	r2, [pc, #200]	@ (8009400 <HAL_RCC_OscConfig+0x4ec>)
 8009338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800933c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800933e:	f7ff fb41 	bl	80089c4 <HAL_GetTick>
 8009342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009344:	e008      	b.n	8009358 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009346:	f7ff fb3d 	bl	80089c4 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b64      	cmp	r3, #100	@ 0x64
 8009352:	d901      	bls.n	8009358 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e104      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009358:	4b29      	ldr	r3, [pc, #164]	@ (8009400 <HAL_RCC_OscConfig+0x4ec>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0f0      	beq.n	8009346 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d106      	bne.n	800937a <HAL_RCC_OscConfig+0x466>
 800936c:	4b1e      	ldr	r3, [pc, #120]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 800936e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009370:	4a1d      	ldr	r2, [pc, #116]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009376:	6353      	str	r3, [r2, #52]	@ 0x34
 8009378:	e02d      	b.n	80093d6 <HAL_RCC_OscConfig+0x4c2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10c      	bne.n	800939c <HAL_RCC_OscConfig+0x488>
 8009382:	4b19      	ldr	r3, [pc, #100]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009386:	4a18      	ldr	r2, [pc, #96]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800938c:	6353      	str	r3, [r2, #52]	@ 0x34
 800938e:	4b16      	ldr	r3, [pc, #88]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009392:	4a15      	ldr	r2, [pc, #84]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 8009394:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009398:	6353      	str	r3, [r2, #52]	@ 0x34
 800939a:	e01c      	b.n	80093d6 <HAL_RCC_OscConfig+0x4c2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	2b05      	cmp	r3, #5
 80093a2:	d10c      	bne.n	80093be <HAL_RCC_OscConfig+0x4aa>
 80093a4:	4b10      	ldr	r3, [pc, #64]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80093a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a8:	4a0f      	ldr	r2, [pc, #60]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80093aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80093ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80093b0:	4b0d      	ldr	r3, [pc, #52]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80093b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b4:	4a0c      	ldr	r2, [pc, #48]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80093b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80093bc:	e00b      	b.n	80093d6 <HAL_RCC_OscConfig+0x4c2>
 80093be:	4b0a      	ldr	r3, [pc, #40]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80093c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093c2:	4a09      	ldr	r2, [pc, #36]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80093c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80093ca:	4b07      	ldr	r3, [pc, #28]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80093cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ce:	4a06      	ldr	r2, [pc, #24]	@ (80093e8 <HAL_RCC_OscConfig+0x4d4>)
 80093d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093d4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d024      	beq.n	8009428 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093de:	f7ff faf1 	bl	80089c4 <HAL_GetTick>
 80093e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093e4:	e019      	b.n	800941a <HAL_RCC_OscConfig+0x506>
 80093e6:	bf00      	nop
 80093e8:	40023800 	.word	0x40023800
 80093ec:	0800a974 	.word	0x0800a974
 80093f0:	20000000 	.word	0x20000000
 80093f4:	20000004 	.word	0x20000004
 80093f8:	42470020 	.word	0x42470020
 80093fc:	42470680 	.word	0x42470680
 8009400:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009404:	f7ff fade 	bl	80089c4 <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009412:	4293      	cmp	r3, r2
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e0a3      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800941a:	4b54      	ldr	r3, [pc, #336]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 800941c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0ee      	beq.n	8009404 <HAL_RCC_OscConfig+0x4f0>
 8009426:	e014      	b.n	8009452 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009428:	f7ff facc 	bl	80089c4 <HAL_GetTick>
 800942c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800942e:	e00a      	b.n	8009446 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009430:	f7ff fac8 	bl	80089c4 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800943e:	4293      	cmp	r3, r2
 8009440:	d901      	bls.n	8009446 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e08d      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009446:	4b49      	ldr	r3, [pc, #292]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 8009448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800944a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1ee      	bne.n	8009430 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009452:	7ffb      	ldrb	r3, [r7, #31]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d105      	bne.n	8009464 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009458:	4b44      	ldr	r3, [pc, #272]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	4a43      	ldr	r2, [pc, #268]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 800945e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009462:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009468:	2b00      	cmp	r3, #0
 800946a:	d079      	beq.n	8009560 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	2b0c      	cmp	r3, #12
 8009470:	d056      	beq.n	8009520 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009476:	2b02      	cmp	r3, #2
 8009478:	d13b      	bne.n	80094f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800947a:	4b3d      	ldr	r3, [pc, #244]	@ (8009570 <HAL_RCC_OscConfig+0x65c>)
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009480:	f7ff faa0 	bl	80089c4 <HAL_GetTick>
 8009484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009486:	e008      	b.n	800949a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009488:	f7ff fa9c 	bl	80089c4 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d901      	bls.n	800949a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e063      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800949a:	4b34      	ldr	r3, [pc, #208]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1f0      	bne.n	8009488 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094a6:	4b31      	ldr	r3, [pc, #196]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	4319      	orrs	r1, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094bc:	430b      	orrs	r3, r1
 80094be:	492b      	ldr	r1, [pc, #172]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094c4:	4b2a      	ldr	r3, [pc, #168]	@ (8009570 <HAL_RCC_OscConfig+0x65c>)
 80094c6:	2201      	movs	r2, #1
 80094c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094ca:	f7ff fa7b 	bl	80089c4 <HAL_GetTick>
 80094ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094d0:	e008      	b.n	80094e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094d2:	f7ff fa77 	bl	80089c4 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d901      	bls.n	80094e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e03e      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094e4:	4b21      	ldr	r3, [pc, #132]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0f0      	beq.n	80094d2 <HAL_RCC_OscConfig+0x5be>
 80094f0:	e036      	b.n	8009560 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009570 <HAL_RCC_OscConfig+0x65c>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094f8:	f7ff fa64 	bl	80089c4 <HAL_GetTick>
 80094fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094fe:	e008      	b.n	8009512 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009500:	f7ff fa60 	bl	80089c4 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e027      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009512:	4b16      	ldr	r3, [pc, #88]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1f0      	bne.n	8009500 <HAL_RCC_OscConfig+0x5ec>
 800951e:	e01f      	b.n	8009560 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e01a      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800952c:	4b0f      	ldr	r3, [pc, #60]	@ (800956c <HAL_RCC_OscConfig+0x658>)
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953c:	429a      	cmp	r2, r3
 800953e:	d10d      	bne.n	800955c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800954a:	429a      	cmp	r2, r3
 800954c:	d106      	bne.n	800955c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009558:	429a      	cmp	r2, r3
 800955a:	d001      	beq.n	8009560 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e000      	b.n	8009562 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3720      	adds	r7, #32
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40023800 	.word	0x40023800
 8009570:	42470060 	.word	0x42470060

08009574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e11a      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009588:	4b8f      	ldr	r3, [pc, #572]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d919      	bls.n	80095ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d105      	bne.n	80095a8 <HAL_RCC_ClockConfig+0x34>
 800959c:	4b8a      	ldr	r3, [pc, #552]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a89      	ldr	r2, [pc, #548]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 80095a2:	f043 0304 	orr.w	r3, r3, #4
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	4b87      	ldr	r3, [pc, #540]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f023 0201 	bic.w	r2, r3, #1
 80095b0:	4985      	ldr	r1, [pc, #532]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095b8:	4b83      	ldr	r3, [pc, #524]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d001      	beq.n	80095ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e0f9      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d008      	beq.n	80095e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095d6:	4b7d      	ldr	r3, [pc, #500]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	497a      	ldr	r1, [pc, #488]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 808e 	beq.w	8009712 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d107      	bne.n	800960e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095fe:	4b73      	ldr	r3, [pc, #460]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d121      	bne.n	800964e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e0d7      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b03      	cmp	r3, #3
 8009614:	d107      	bne.n	8009626 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009616:	4b6d      	ldr	r3, [pc, #436]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d115      	bne.n	800964e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e0cb      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d107      	bne.n	800963e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800962e:	4b67      	ldr	r3, [pc, #412]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e0bf      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800963e:	4b63      	ldr	r3, [pc, #396]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e0b7      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800964e:	4b5f      	ldr	r3, [pc, #380]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f023 0203 	bic.w	r2, r3, #3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	495c      	ldr	r1, [pc, #368]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 800965c:	4313      	orrs	r3, r2
 800965e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009660:	f7ff f9b0 	bl	80089c4 <HAL_GetTick>
 8009664:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d112      	bne.n	8009694 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800966e:	e00a      	b.n	8009686 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009670:	f7ff f9a8 	bl	80089c4 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800967e:	4293      	cmp	r3, r2
 8009680:	d901      	bls.n	8009686 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e09b      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009686:	4b51      	ldr	r3, [pc, #324]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 030c 	and.w	r3, r3, #12
 800968e:	2b08      	cmp	r3, #8
 8009690:	d1ee      	bne.n	8009670 <HAL_RCC_ClockConfig+0xfc>
 8009692:	e03e      	b.n	8009712 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b03      	cmp	r3, #3
 800969a:	d112      	bne.n	80096c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800969c:	e00a      	b.n	80096b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800969e:	f7ff f991 	bl	80089c4 <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d901      	bls.n	80096b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e084      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80096b4:	4b45      	ldr	r3, [pc, #276]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f003 030c 	and.w	r3, r3, #12
 80096bc:	2b0c      	cmp	r3, #12
 80096be:	d1ee      	bne.n	800969e <HAL_RCC_ClockConfig+0x12a>
 80096c0:	e027      	b.n	8009712 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d11d      	bne.n	8009706 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80096ca:	e00a      	b.n	80096e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096cc:	f7ff f97a 	bl	80089c4 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096da:	4293      	cmp	r3, r2
 80096dc:	d901      	bls.n	80096e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e06d      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80096e2:	4b3a      	ldr	r3, [pc, #232]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 030c 	and.w	r3, r3, #12
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d1ee      	bne.n	80096cc <HAL_RCC_ClockConfig+0x158>
 80096ee:	e010      	b.n	8009712 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096f0:	f7ff f968 	bl	80089c4 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096fe:	4293      	cmp	r3, r2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e05b      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009706:	4b31      	ldr	r3, [pc, #196]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f003 030c 	and.w	r3, r3, #12
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1ee      	bne.n	80096f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009712:	4b2d      	ldr	r3, [pc, #180]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	429a      	cmp	r2, r3
 800971e:	d219      	bcs.n	8009754 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d105      	bne.n	8009732 <HAL_RCC_ClockConfig+0x1be>
 8009726:	4b28      	ldr	r3, [pc, #160]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a27      	ldr	r2, [pc, #156]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 800972c:	f043 0304 	orr.w	r3, r3, #4
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	4b25      	ldr	r3, [pc, #148]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f023 0201 	bic.w	r2, r3, #1
 800973a:	4923      	ldr	r1, [pc, #140]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	4313      	orrs	r3, r2
 8009740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009742:	4b21      	ldr	r3, [pc, #132]	@ (80097c8 <HAL_RCC_ClockConfig+0x254>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	429a      	cmp	r2, r3
 800974e:	d001      	beq.n	8009754 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e034      	b.n	80097be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d008      	beq.n	8009772 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009760:	4b1a      	ldr	r3, [pc, #104]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	4917      	ldr	r1, [pc, #92]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 800976e:	4313      	orrs	r3, r2
 8009770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0308 	and.w	r3, r3, #8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d009      	beq.n	8009792 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800977e:	4b13      	ldr	r3, [pc, #76]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	490f      	ldr	r1, [pc, #60]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 800978e:	4313      	orrs	r3, r2
 8009790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009792:	f000 f823 	bl	80097dc <HAL_RCC_GetSysClockFreq>
 8009796:	4602      	mov	r2, r0
 8009798:	4b0c      	ldr	r3, [pc, #48]	@ (80097cc <HAL_RCC_ClockConfig+0x258>)
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	091b      	lsrs	r3, r3, #4
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	490b      	ldr	r1, [pc, #44]	@ (80097d0 <HAL_RCC_ClockConfig+0x25c>)
 80097a4:	5ccb      	ldrb	r3, [r1, r3]
 80097a6:	fa22 f303 	lsr.w	r3, r2, r3
 80097aa:	4a0a      	ldr	r2, [pc, #40]	@ (80097d4 <HAL_RCC_ClockConfig+0x260>)
 80097ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80097ae:	4b0a      	ldr	r3, [pc, #40]	@ (80097d8 <HAL_RCC_ClockConfig+0x264>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff f8ba 	bl	800892c <HAL_InitTick>
 80097b8:	4603      	mov	r3, r0
 80097ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80097bc:	7afb      	ldrb	r3, [r7, #11]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	40023c00 	.word	0x40023c00
 80097cc:	40023800 	.word	0x40023800
 80097d0:	0800a974 	.word	0x0800a974
 80097d4:	20000000 	.word	0x20000000
 80097d8:	20000004 	.word	0x20000004

080097dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097e0:	b092      	sub	sp, #72	@ 0x48
 80097e2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80097e4:	4b79      	ldr	r3, [pc, #484]	@ (80099cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80097ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ec:	f003 030c 	and.w	r3, r3, #12
 80097f0:	2b0c      	cmp	r3, #12
 80097f2:	d00d      	beq.n	8009810 <HAL_RCC_GetSysClockFreq+0x34>
 80097f4:	2b0c      	cmp	r3, #12
 80097f6:	f200 80d5 	bhi.w	80099a4 <HAL_RCC_GetSysClockFreq+0x1c8>
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d002      	beq.n	8009804 <HAL_RCC_GetSysClockFreq+0x28>
 80097fe:	2b08      	cmp	r3, #8
 8009800:	d003      	beq.n	800980a <HAL_RCC_GetSysClockFreq+0x2e>
 8009802:	e0cf      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009804:	4b72      	ldr	r3, [pc, #456]	@ (80099d0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009806:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009808:	e0da      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800980a:	4b72      	ldr	r3, [pc, #456]	@ (80099d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800980c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800980e:	e0d7      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009812:	0c9b      	lsrs	r3, r3, #18
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	4b6f      	ldr	r3, [pc, #444]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800981a:	5c9b      	ldrb	r3, [r3, r2]
 800981c:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800981e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009820:	0d9b      	lsrs	r3, r3, #22
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	3301      	adds	r3, #1
 8009828:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800982a:	4b68      	ldr	r3, [pc, #416]	@ (80099cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d05d      	beq.n	80098f2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009838:	2200      	movs	r2, #0
 800983a:	4618      	mov	r0, r3
 800983c:	4611      	mov	r1, r2
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	4622      	mov	r2, r4
 8009844:	462b      	mov	r3, r5
 8009846:	f04f 0000 	mov.w	r0, #0
 800984a:	f04f 0100 	mov.w	r1, #0
 800984e:	0159      	lsls	r1, r3, #5
 8009850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009854:	0150      	lsls	r0, r2, #5
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4621      	mov	r1, r4
 800985c:	1a51      	subs	r1, r2, r1
 800985e:	6139      	str	r1, [r7, #16]
 8009860:	4629      	mov	r1, r5
 8009862:	eb63 0301 	sbc.w	r3, r3, r1
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	f04f 0200 	mov.w	r2, #0
 800986c:	f04f 0300 	mov.w	r3, #0
 8009870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009874:	4659      	mov	r1, fp
 8009876:	018b      	lsls	r3, r1, #6
 8009878:	4651      	mov	r1, sl
 800987a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800987e:	4651      	mov	r1, sl
 8009880:	018a      	lsls	r2, r1, #6
 8009882:	46d4      	mov	ip, sl
 8009884:	ebb2 080c 	subs.w	r8, r2, ip
 8009888:	4659      	mov	r1, fp
 800988a:	eb63 0901 	sbc.w	r9, r3, r1
 800988e:	f04f 0200 	mov.w	r2, #0
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800989a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800989e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098a2:	4690      	mov	r8, r2
 80098a4:	4699      	mov	r9, r3
 80098a6:	4623      	mov	r3, r4
 80098a8:	eb18 0303 	adds.w	r3, r8, r3
 80098ac:	60bb      	str	r3, [r7, #8]
 80098ae:	462b      	mov	r3, r5
 80098b0:	eb49 0303 	adc.w	r3, r9, r3
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	f04f 0200 	mov.w	r2, #0
 80098ba:	f04f 0300 	mov.w	r3, #0
 80098be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80098c2:	4629      	mov	r1, r5
 80098c4:	024b      	lsls	r3, r1, #9
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	4604      	mov	r4, r0
 80098cc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80098d0:	4601      	mov	r1, r0
 80098d2:	024a      	lsls	r2, r1, #9
 80098d4:	4610      	mov	r0, r2
 80098d6:	4619      	mov	r1, r3
 80098d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098da:	2200      	movs	r2, #0
 80098dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80098e4:	f7fe fc4a 	bl	800817c <__aeabi_uldivmod>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4613      	mov	r3, r2
 80098ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80098f0:	e055      	b.n	800999e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f4:	2200      	movs	r2, #0
 80098f6:	623b      	str	r3, [r7, #32]
 80098f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80098fa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80098fe:	4642      	mov	r2, r8
 8009900:	464b      	mov	r3, r9
 8009902:	f04f 0000 	mov.w	r0, #0
 8009906:	f04f 0100 	mov.w	r1, #0
 800990a:	0159      	lsls	r1, r3, #5
 800990c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009910:	0150      	lsls	r0, r2, #5
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	46c4      	mov	ip, r8
 8009918:	ebb2 0a0c 	subs.w	sl, r2, ip
 800991c:	4640      	mov	r0, r8
 800991e:	4649      	mov	r1, r9
 8009920:	468c      	mov	ip, r1
 8009922:	eb63 0b0c 	sbc.w	fp, r3, ip
 8009926:	f04f 0200 	mov.w	r2, #0
 800992a:	f04f 0300 	mov.w	r3, #0
 800992e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009932:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009936:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800993a:	ebb2 040a 	subs.w	r4, r2, sl
 800993e:	eb63 050b 	sbc.w	r5, r3, fp
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	00eb      	lsls	r3, r5, #3
 800994c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009950:	00e2      	lsls	r2, r4, #3
 8009952:	4614      	mov	r4, r2
 8009954:	461d      	mov	r5, r3
 8009956:	4603      	mov	r3, r0
 8009958:	18e3      	adds	r3, r4, r3
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	460b      	mov	r3, r1
 800995e:	eb45 0303 	adc.w	r3, r5, r3
 8009962:	607b      	str	r3, [r7, #4]
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009970:	4629      	mov	r1, r5
 8009972:	028b      	lsls	r3, r1, #10
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	4604      	mov	r4, r0
 800997a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800997e:	4601      	mov	r1, r0
 8009980:	028a      	lsls	r2, r1, #10
 8009982:	4610      	mov	r0, r2
 8009984:	4619      	mov	r1, r3
 8009986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009988:	2200      	movs	r2, #0
 800998a:	61bb      	str	r3, [r7, #24]
 800998c:	61fa      	str	r2, [r7, #28]
 800998e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009992:	f7fe fbf3 	bl	800817c <__aeabi_uldivmod>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4613      	mov	r3, r2
 800999c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800999e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099a0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80099a2:	e00d      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80099a4:	4b09      	ldr	r3, [pc, #36]	@ (80099cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	0b5b      	lsrs	r3, r3, #13
 80099aa:	f003 0307 	and.w	r3, r3, #7
 80099ae:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80099b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b2:	3301      	adds	r3, #1
 80099b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80099b8:	fa02 f303 	lsl.w	r3, r2, r3
 80099bc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80099be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3748      	adds	r7, #72	@ 0x48
 80099c6:	46bd      	mov	sp, r7
 80099c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099cc:	40023800 	.word	0x40023800
 80099d0:	00f42400 	.word	0x00f42400
 80099d4:	007a1200 	.word	0x007a1200
 80099d8:	0800a968 	.word	0x0800a968

080099dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099e0:	4b02      	ldr	r3, [pc, #8]	@ (80099ec <HAL_RCC_GetHCLKFreq+0x10>)
 80099e2:	681b      	ldr	r3, [r3, #0]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bc80      	pop	{r7}
 80099ea:	4770      	bx	lr
 80099ec:	20000000 	.word	0x20000000

080099f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80099f4:	f7ff fff2 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 80099f8:	4602      	mov	r2, r0
 80099fa:	4b05      	ldr	r3, [pc, #20]	@ (8009a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	4903      	ldr	r1, [pc, #12]	@ (8009a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a06:	5ccb      	ldrb	r3, [r1, r3]
 8009a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	40023800 	.word	0x40023800
 8009a14:	0800a984 	.word	0x0800a984

08009a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009a1c:	f7ff ffde 	bl	80099dc <HAL_RCC_GetHCLKFreq>
 8009a20:	4602      	mov	r2, r0
 8009a22:	4b05      	ldr	r3, [pc, #20]	@ (8009a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	0adb      	lsrs	r3, r3, #11
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	4903      	ldr	r1, [pc, #12]	@ (8009a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a2e:	5ccb      	ldrb	r3, [r1, r3]
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	0800a984 	.word	0x0800a984

08009a40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009a48:	2300      	movs	r3, #0
 8009a4a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009a4c:	4b29      	ldr	r3, [pc, #164]	@ (8009af4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d12c      	bne.n	8009ab2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009a58:	4b26      	ldr	r3, [pc, #152]	@ (8009af4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009a64:	4b24      	ldr	r3, [pc, #144]	@ (8009af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	e016      	b.n	8009a9e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a70:	4b20      	ldr	r3, [pc, #128]	@ (8009af4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a74:	4a1f      	ldr	r2, [pc, #124]	@ (8009af4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a7a:	6253      	str	r3, [r2, #36]	@ 0x24
 8009a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8009af4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009a88:	4b1b      	ldr	r3, [pc, #108]	@ (8009af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8009a90:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a92:	4b18      	ldr	r3, [pc, #96]	@ (8009af4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a96:	4a17      	ldr	r2, [pc, #92]	@ (8009af4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a9c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8009aa4:	d105      	bne.n	8009ab2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009aac:	d101      	bne.n	8009ab2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8009aae:	2301      	movs	r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d105      	bne.n	8009ac4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8009ab8:	4b10      	ldr	r3, [pc, #64]	@ (8009afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a0f      	ldr	r2, [pc, #60]	@ (8009afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009abe:	f043 0304 	orr.w	r3, r3, #4
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8009afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f023 0201 	bic.w	r2, r3, #1
 8009acc:	490b      	ldr	r1, [pc, #44]	@ (8009afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009ad4:	4b09      	ldr	r3, [pc, #36]	@ (8009afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d001      	beq.n	8009ae6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e000      	b.n	8009ae8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	371c      	adds	r7, #28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	40023800 	.word	0x40023800
 8009af8:	40007000 	.word	0x40007000
 8009afc:	40023c00 	.word	0x40023c00

08009b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e042      	b.n	8009b98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7fe fdc8 	bl	80086bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2224      	movs	r2, #36	@ 0x24
 8009b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f971 	bl	8009e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	691a      	ldr	r2, [r3, #16]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695a      	ldr	r2, [r3, #20]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68da      	ldr	r2, [r3, #12]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08a      	sub	sp, #40	@ 0x28
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	4613      	mov	r3, r2
 8009bae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d175      	bne.n	8009cac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <HAL_UART_Transmit+0x2c>
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e06e      	b.n	8009cae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2221      	movs	r2, #33	@ 0x21
 8009bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bde:	f7fe fef1 	bl	80089c4 <HAL_GetTick>
 8009be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	88fa      	ldrh	r2, [r7, #6]
 8009be8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	88fa      	ldrh	r2, [r7, #6]
 8009bee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bf8:	d108      	bne.n	8009c0c <HAL_UART_Transmit+0x6c>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	e003      	b.n	8009c14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c14:	e02e      	b.n	8009c74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2180      	movs	r1, #128	@ 0x80
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 f848 	bl	8009cb6 <UART_WaitOnFlagUntilTimeout>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e03a      	b.n	8009cae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10b      	bne.n	8009c56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	461a      	mov	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	3302      	adds	r3, #2
 8009c52:	61bb      	str	r3, [r7, #24]
 8009c54:	e007      	b.n	8009c66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	781a      	ldrb	r2, [r3, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	3301      	adds	r3, #1
 8009c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1cb      	bne.n	8009c16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2200      	movs	r2, #0
 8009c86:	2140      	movs	r1, #64	@ 0x40
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f814 	bl	8009cb6 <UART_WaitOnFlagUntilTimeout>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e006      	b.n	8009cae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e000      	b.n	8009cae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009cac:	2302      	movs	r3, #2
  }
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3720      	adds	r7, #32
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b086      	sub	sp, #24
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	603b      	str	r3, [r7, #0]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc6:	e03b      	b.n	8009d40 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cce:	d037      	beq.n	8009d40 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd0:	f7fe fe78 	bl	80089c4 <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	6a3a      	ldr	r2, [r7, #32]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d302      	bcc.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e03a      	b.n	8009d60 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d023      	beq.n	8009d40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b80      	cmp	r3, #128	@ 0x80
 8009cfc:	d020      	beq.n	8009d40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b40      	cmp	r3, #64	@ 0x40
 8009d02:	d01d      	beq.n	8009d40 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0308 	and.w	r3, r3, #8
 8009d0e:	2b08      	cmp	r3, #8
 8009d10:	d116      	bne.n	8009d40 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	617b      	str	r3, [r7, #20]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	617b      	str	r3, [r7, #20]
 8009d26:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 f81d 	bl	8009d68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2208      	movs	r2, #8
 8009d32:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e00f      	b.n	8009d60 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	4013      	ands	r3, r2
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	bf0c      	ite	eq
 8009d50:	2301      	moveq	r3, #1
 8009d52:	2300      	movne	r3, #0
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	461a      	mov	r2, r3
 8009d58:	79fb      	ldrb	r3, [r7, #7]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d0b4      	beq.n	8009cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b095      	sub	sp, #84	@ 0x54
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	330c      	adds	r3, #12
 8009d76:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7a:	e853 3f00 	ldrex	r3, [r3]
 8009d7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	330c      	adds	r3, #12
 8009d8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d90:	643a      	str	r2, [r7, #64]	@ 0x40
 8009d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e5      	bne.n	8009d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3314      	adds	r3, #20
 8009daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	f023 0301 	bic.w	r3, r3, #1
 8009dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3314      	adds	r3, #20
 8009dc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e5      	bne.n	8009da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d119      	bne.n	8009e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f023 0310 	bic.w	r3, r3, #16
 8009df6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	330c      	adds	r3, #12
 8009dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e00:	61ba      	str	r2, [r7, #24]
 8009e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	6979      	ldr	r1, [r7, #20]
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e5      	bne.n	8009de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009e22:	bf00      	nop
 8009e24:	3754      	adds	r7, #84	@ 0x54
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bc80      	pop	{r7}
 8009e2a:	4770      	bx	lr

08009e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689a      	ldr	r2, [r3, #8]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	431a      	orrs	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	431a      	orrs	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009e6c:	f023 030c 	bic.w	r3, r3, #12
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	430b      	orrs	r3, r1
 8009e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a55      	ldr	r2, [pc, #340]	@ (8009fec <UART_SetConfig+0x1c0>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d103      	bne.n	8009ea2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009e9a:	f7ff fdbd 	bl	8009a18 <HAL_RCC_GetPCLK2Freq>
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	e002      	b.n	8009ea8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009ea2:	f7ff fda5 	bl	80099f0 <HAL_RCC_GetPCLK1Freq>
 8009ea6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009eb0:	d14c      	bne.n	8009f4c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	009a      	lsls	r2, r3, #2
 8009ebc:	441a      	add	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec8:	4a49      	ldr	r2, [pc, #292]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009eca:	fba2 2303 	umull	r2, r3, r2, r3
 8009ece:	095b      	lsrs	r3, r3, #5
 8009ed0:	0119      	lsls	r1, r3, #4
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009a      	lsls	r2, r3, #2
 8009edc:	441a      	add	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ee8:	4b41      	ldr	r3, [pc, #260]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009eea:	fba3 0302 	umull	r0, r3, r3, r2
 8009eee:	095b      	lsrs	r3, r3, #5
 8009ef0:	2064      	movs	r0, #100	@ 0x64
 8009ef2:	fb00 f303 	mul.w	r3, r0, r3
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	3332      	adds	r3, #50	@ 0x32
 8009efc:	4a3c      	ldr	r2, [pc, #240]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009efe:	fba2 2303 	umull	r2, r3, r2, r3
 8009f02:	095b      	lsrs	r3, r3, #5
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009f0a:	4419      	add	r1, r3
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	009a      	lsls	r2, r3, #2
 8009f16:	441a      	add	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f22:	4b33      	ldr	r3, [pc, #204]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009f24:	fba3 0302 	umull	r0, r3, r3, r2
 8009f28:	095b      	lsrs	r3, r3, #5
 8009f2a:	2064      	movs	r0, #100	@ 0x64
 8009f2c:	fb00 f303 	mul.w	r3, r0, r3
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	3332      	adds	r3, #50	@ 0x32
 8009f36:	4a2e      	ldr	r2, [pc, #184]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009f38:	fba2 2303 	umull	r2, r3, r2, r3
 8009f3c:	095b      	lsrs	r3, r3, #5
 8009f3e:	f003 0207 	and.w	r2, r3, #7
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	440a      	add	r2, r1
 8009f48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f4a:	e04a      	b.n	8009fe2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	009a      	lsls	r2, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f62:	4a23      	ldr	r2, [pc, #140]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009f64:	fba2 2303 	umull	r2, r3, r2, r3
 8009f68:	095b      	lsrs	r3, r3, #5
 8009f6a:	0119      	lsls	r1, r3, #4
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	009a      	lsls	r2, r3, #2
 8009f76:	441a      	add	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f82:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009f84:	fba3 0302 	umull	r0, r3, r3, r2
 8009f88:	095b      	lsrs	r3, r3, #5
 8009f8a:	2064      	movs	r0, #100	@ 0x64
 8009f8c:	fb00 f303 	mul.w	r3, r0, r3
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	3332      	adds	r3, #50	@ 0x32
 8009f96:	4a16      	ldr	r2, [pc, #88]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009f98:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9c:	095b      	lsrs	r3, r3, #5
 8009f9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fa2:	4419      	add	r1, r3
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009a      	lsls	r2, r3, #2
 8009fae:	441a      	add	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009fbc:	fba3 0302 	umull	r0, r3, r3, r2
 8009fc0:	095b      	lsrs	r3, r3, #5
 8009fc2:	2064      	movs	r0, #100	@ 0x64
 8009fc4:	fb00 f303 	mul.w	r3, r0, r3
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	3332      	adds	r3, #50	@ 0x32
 8009fce:	4a08      	ldr	r2, [pc, #32]	@ (8009ff0 <UART_SetConfig+0x1c4>)
 8009fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd4:	095b      	lsrs	r3, r3, #5
 8009fd6:	f003 020f 	and.w	r2, r3, #15
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	440a      	add	r2, r1
 8009fe0:	609a      	str	r2, [r3, #8]
}
 8009fe2:	bf00      	nop
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	40013800 	.word	0x40013800
 8009ff0:	51eb851f 	.word	0x51eb851f

08009ff4 <std>:
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	b510      	push	{r4, lr}
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8009ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a002:	6083      	str	r3, [r0, #8]
 800a004:	8181      	strh	r1, [r0, #12]
 800a006:	6643      	str	r3, [r0, #100]	@ 0x64
 800a008:	81c2      	strh	r2, [r0, #14]
 800a00a:	6183      	str	r3, [r0, #24]
 800a00c:	4619      	mov	r1, r3
 800a00e:	2208      	movs	r2, #8
 800a010:	305c      	adds	r0, #92	@ 0x5c
 800a012:	f000 f9e7 	bl	800a3e4 <memset>
 800a016:	4b0d      	ldr	r3, [pc, #52]	@ (800a04c <std+0x58>)
 800a018:	6224      	str	r4, [r4, #32]
 800a01a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a01c:	4b0c      	ldr	r3, [pc, #48]	@ (800a050 <std+0x5c>)
 800a01e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a020:	4b0c      	ldr	r3, [pc, #48]	@ (800a054 <std+0x60>)
 800a022:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a024:	4b0c      	ldr	r3, [pc, #48]	@ (800a058 <std+0x64>)
 800a026:	6323      	str	r3, [r4, #48]	@ 0x30
 800a028:	4b0c      	ldr	r3, [pc, #48]	@ (800a05c <std+0x68>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d006      	beq.n	800a03c <std+0x48>
 800a02e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a032:	4294      	cmp	r4, r2
 800a034:	d002      	beq.n	800a03c <std+0x48>
 800a036:	33d0      	adds	r3, #208	@ 0xd0
 800a038:	429c      	cmp	r4, r3
 800a03a:	d105      	bne.n	800a048 <std+0x54>
 800a03c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a044:	f000 ba46 	b.w	800a4d4 <__retarget_lock_init_recursive>
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	bf00      	nop
 800a04c:	0800a235 	.word	0x0800a235
 800a050:	0800a257 	.word	0x0800a257
 800a054:	0800a28f 	.word	0x0800a28f
 800a058:	0800a2b3 	.word	0x0800a2b3
 800a05c:	200000d4 	.word	0x200000d4

0800a060 <stdio_exit_handler>:
 800a060:	4a02      	ldr	r2, [pc, #8]	@ (800a06c <stdio_exit_handler+0xc>)
 800a062:	4903      	ldr	r1, [pc, #12]	@ (800a070 <stdio_exit_handler+0x10>)
 800a064:	4803      	ldr	r0, [pc, #12]	@ (800a074 <stdio_exit_handler+0x14>)
 800a066:	f000 b869 	b.w	800a13c <_fwalk_sglue>
 800a06a:	bf00      	nop
 800a06c:	2000000c 	.word	0x2000000c
 800a070:	0800a7c9 	.word	0x0800a7c9
 800a074:	2000001c 	.word	0x2000001c

0800a078 <cleanup_stdio>:
 800a078:	6841      	ldr	r1, [r0, #4]
 800a07a:	4b0c      	ldr	r3, [pc, #48]	@ (800a0ac <cleanup_stdio+0x34>)
 800a07c:	b510      	push	{r4, lr}
 800a07e:	4299      	cmp	r1, r3
 800a080:	4604      	mov	r4, r0
 800a082:	d001      	beq.n	800a088 <cleanup_stdio+0x10>
 800a084:	f000 fba0 	bl	800a7c8 <_fflush_r>
 800a088:	68a1      	ldr	r1, [r4, #8]
 800a08a:	4b09      	ldr	r3, [pc, #36]	@ (800a0b0 <cleanup_stdio+0x38>)
 800a08c:	4299      	cmp	r1, r3
 800a08e:	d002      	beq.n	800a096 <cleanup_stdio+0x1e>
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fb99 	bl	800a7c8 <_fflush_r>
 800a096:	68e1      	ldr	r1, [r4, #12]
 800a098:	4b06      	ldr	r3, [pc, #24]	@ (800a0b4 <cleanup_stdio+0x3c>)
 800a09a:	4299      	cmp	r1, r3
 800a09c:	d004      	beq.n	800a0a8 <cleanup_stdio+0x30>
 800a09e:	4620      	mov	r0, r4
 800a0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a4:	f000 bb90 	b.w	800a7c8 <_fflush_r>
 800a0a8:	bd10      	pop	{r4, pc}
 800a0aa:	bf00      	nop
 800a0ac:	200000d4 	.word	0x200000d4
 800a0b0:	2000013c 	.word	0x2000013c
 800a0b4:	200001a4 	.word	0x200001a4

0800a0b8 <global_stdio_init.part.0>:
 800a0b8:	b510      	push	{r4, lr}
 800a0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e8 <global_stdio_init.part.0+0x30>)
 800a0bc:	4c0b      	ldr	r4, [pc, #44]	@ (800a0ec <global_stdio_init.part.0+0x34>)
 800a0be:	4a0c      	ldr	r2, [pc, #48]	@ (800a0f0 <global_stdio_init.part.0+0x38>)
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f7ff ff94 	bl	8009ff4 <std>
 800a0cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	2109      	movs	r1, #9
 800a0d4:	f7ff ff8e 	bl	8009ff4 <std>
 800a0d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0dc:	2202      	movs	r2, #2
 800a0de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0e2:	2112      	movs	r1, #18
 800a0e4:	f7ff bf86 	b.w	8009ff4 <std>
 800a0e8:	2000020c 	.word	0x2000020c
 800a0ec:	200000d4 	.word	0x200000d4
 800a0f0:	0800a061 	.word	0x0800a061

0800a0f4 <__sfp_lock_acquire>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	@ (800a0fc <__sfp_lock_acquire+0x8>)
 800a0f6:	f000 b9ee 	b.w	800a4d6 <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	20000215 	.word	0x20000215

0800a100 <__sfp_lock_release>:
 800a100:	4801      	ldr	r0, [pc, #4]	@ (800a108 <__sfp_lock_release+0x8>)
 800a102:	f000 b9e9 	b.w	800a4d8 <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	20000215 	.word	0x20000215

0800a10c <__sinit>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	4604      	mov	r4, r0
 800a110:	f7ff fff0 	bl	800a0f4 <__sfp_lock_acquire>
 800a114:	6a23      	ldr	r3, [r4, #32]
 800a116:	b11b      	cbz	r3, 800a120 <__sinit+0x14>
 800a118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a11c:	f7ff bff0 	b.w	800a100 <__sfp_lock_release>
 800a120:	4b04      	ldr	r3, [pc, #16]	@ (800a134 <__sinit+0x28>)
 800a122:	6223      	str	r3, [r4, #32]
 800a124:	4b04      	ldr	r3, [pc, #16]	@ (800a138 <__sinit+0x2c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1f5      	bne.n	800a118 <__sinit+0xc>
 800a12c:	f7ff ffc4 	bl	800a0b8 <global_stdio_init.part.0>
 800a130:	e7f2      	b.n	800a118 <__sinit+0xc>
 800a132:	bf00      	nop
 800a134:	0800a079 	.word	0x0800a079
 800a138:	2000020c 	.word	0x2000020c

0800a13c <_fwalk_sglue>:
 800a13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a140:	4607      	mov	r7, r0
 800a142:	4688      	mov	r8, r1
 800a144:	4614      	mov	r4, r2
 800a146:	2600      	movs	r6, #0
 800a148:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a14c:	f1b9 0901 	subs.w	r9, r9, #1
 800a150:	d505      	bpl.n	800a15e <_fwalk_sglue+0x22>
 800a152:	6824      	ldr	r4, [r4, #0]
 800a154:	2c00      	cmp	r4, #0
 800a156:	d1f7      	bne.n	800a148 <_fwalk_sglue+0xc>
 800a158:	4630      	mov	r0, r6
 800a15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d907      	bls.n	800a174 <_fwalk_sglue+0x38>
 800a164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a168:	3301      	adds	r3, #1
 800a16a:	d003      	beq.n	800a174 <_fwalk_sglue+0x38>
 800a16c:	4629      	mov	r1, r5
 800a16e:	4638      	mov	r0, r7
 800a170:	47c0      	blx	r8
 800a172:	4306      	orrs	r6, r0
 800a174:	3568      	adds	r5, #104	@ 0x68
 800a176:	e7e9      	b.n	800a14c <_fwalk_sglue+0x10>

0800a178 <_puts_r>:
 800a178:	6a03      	ldr	r3, [r0, #32]
 800a17a:	b570      	push	{r4, r5, r6, lr}
 800a17c:	4605      	mov	r5, r0
 800a17e:	460e      	mov	r6, r1
 800a180:	6884      	ldr	r4, [r0, #8]
 800a182:	b90b      	cbnz	r3, 800a188 <_puts_r+0x10>
 800a184:	f7ff ffc2 	bl	800a10c <__sinit>
 800a188:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a18a:	07db      	lsls	r3, r3, #31
 800a18c:	d405      	bmi.n	800a19a <_puts_r+0x22>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	0598      	lsls	r0, r3, #22
 800a192:	d402      	bmi.n	800a19a <_puts_r+0x22>
 800a194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a196:	f000 f99e 	bl	800a4d6 <__retarget_lock_acquire_recursive>
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	0719      	lsls	r1, r3, #28
 800a19e:	d502      	bpl.n	800a1a6 <_puts_r+0x2e>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d135      	bne.n	800a212 <_puts_r+0x9a>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 f8c5 	bl	800a338 <__swsetup_r>
 800a1ae:	b380      	cbz	r0, 800a212 <_puts_r+0x9a>
 800a1b0:	f04f 35ff 	mov.w	r5, #4294967295
 800a1b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1b6:	07da      	lsls	r2, r3, #31
 800a1b8:	d405      	bmi.n	800a1c6 <_puts_r+0x4e>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	059b      	lsls	r3, r3, #22
 800a1be:	d402      	bmi.n	800a1c6 <_puts_r+0x4e>
 800a1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1c2:	f000 f989 	bl	800a4d8 <__retarget_lock_release_recursive>
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	da04      	bge.n	800a1d8 <_puts_r+0x60>
 800a1ce:	69a2      	ldr	r2, [r4, #24]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	dc17      	bgt.n	800a204 <_puts_r+0x8c>
 800a1d4:	290a      	cmp	r1, #10
 800a1d6:	d015      	beq.n	800a204 <_puts_r+0x8c>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	6022      	str	r2, [r4, #0]
 800a1de:	7019      	strb	r1, [r3, #0]
 800a1e0:	68a3      	ldr	r3, [r4, #8]
 800a1e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	60a3      	str	r3, [r4, #8]
 800a1ea:	2900      	cmp	r1, #0
 800a1ec:	d1ed      	bne.n	800a1ca <_puts_r+0x52>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	da11      	bge.n	800a216 <_puts_r+0x9e>
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	210a      	movs	r1, #10
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 f85f 	bl	800a2ba <__swbuf_r>
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d0d7      	beq.n	800a1b0 <_puts_r+0x38>
 800a200:	250a      	movs	r5, #10
 800a202:	e7d7      	b.n	800a1b4 <_puts_r+0x3c>
 800a204:	4622      	mov	r2, r4
 800a206:	4628      	mov	r0, r5
 800a208:	f000 f857 	bl	800a2ba <__swbuf_r>
 800a20c:	3001      	adds	r0, #1
 800a20e:	d1e7      	bne.n	800a1e0 <_puts_r+0x68>
 800a210:	e7ce      	b.n	800a1b0 <_puts_r+0x38>
 800a212:	3e01      	subs	r6, #1
 800a214:	e7e4      	b.n	800a1e0 <_puts_r+0x68>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	220a      	movs	r2, #10
 800a21e:	701a      	strb	r2, [r3, #0]
 800a220:	e7ee      	b.n	800a200 <_puts_r+0x88>
	...

0800a224 <puts>:
 800a224:	4b02      	ldr	r3, [pc, #8]	@ (800a230 <puts+0xc>)
 800a226:	4601      	mov	r1, r0
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	f7ff bfa5 	b.w	800a178 <_puts_r>
 800a22e:	bf00      	nop
 800a230:	20000018 	.word	0x20000018

0800a234 <__sread>:
 800a234:	b510      	push	{r4, lr}
 800a236:	460c      	mov	r4, r1
 800a238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23c:	f000 f8fc 	bl	800a438 <_read_r>
 800a240:	2800      	cmp	r0, #0
 800a242:	bfab      	itete	ge
 800a244:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a246:	89a3      	ldrhlt	r3, [r4, #12]
 800a248:	181b      	addge	r3, r3, r0
 800a24a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a24e:	bfac      	ite	ge
 800a250:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a252:	81a3      	strhlt	r3, [r4, #12]
 800a254:	bd10      	pop	{r4, pc}

0800a256 <__swrite>:
 800a256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25a:	461f      	mov	r7, r3
 800a25c:	898b      	ldrh	r3, [r1, #12]
 800a25e:	4605      	mov	r5, r0
 800a260:	05db      	lsls	r3, r3, #23
 800a262:	460c      	mov	r4, r1
 800a264:	4616      	mov	r6, r2
 800a266:	d505      	bpl.n	800a274 <__swrite+0x1e>
 800a268:	2302      	movs	r3, #2
 800a26a:	2200      	movs	r2, #0
 800a26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a270:	f000 f8d0 	bl	800a414 <_lseek_r>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	4632      	mov	r2, r6
 800a278:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	4628      	mov	r0, r5
 800a280:	463b      	mov	r3, r7
 800a282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a28a:	f000 b8e7 	b.w	800a45c <_write_r>

0800a28e <__sseek>:
 800a28e:	b510      	push	{r4, lr}
 800a290:	460c      	mov	r4, r1
 800a292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a296:	f000 f8bd 	bl	800a414 <_lseek_r>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	bf15      	itete	ne
 800a2a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2aa:	81a3      	strheq	r3, [r4, #12]
 800a2ac:	bf18      	it	ne
 800a2ae:	81a3      	strhne	r3, [r4, #12]
 800a2b0:	bd10      	pop	{r4, pc}

0800a2b2 <__sclose>:
 800a2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b6:	f000 b89d 	b.w	800a3f4 <_close_r>

0800a2ba <__swbuf_r>:
 800a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2bc:	460e      	mov	r6, r1
 800a2be:	4614      	mov	r4, r2
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	b118      	cbz	r0, 800a2cc <__swbuf_r+0x12>
 800a2c4:	6a03      	ldr	r3, [r0, #32]
 800a2c6:	b90b      	cbnz	r3, 800a2cc <__swbuf_r+0x12>
 800a2c8:	f7ff ff20 	bl	800a10c <__sinit>
 800a2cc:	69a3      	ldr	r3, [r4, #24]
 800a2ce:	60a3      	str	r3, [r4, #8]
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	071a      	lsls	r2, r3, #28
 800a2d4:	d501      	bpl.n	800a2da <__swbuf_r+0x20>
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	b943      	cbnz	r3, 800a2ec <__swbuf_r+0x32>
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f000 f82b 	bl	800a338 <__swsetup_r>
 800a2e2:	b118      	cbz	r0, 800a2ec <__swbuf_r+0x32>
 800a2e4:	f04f 37ff 	mov.w	r7, #4294967295
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	6922      	ldr	r2, [r4, #16]
 800a2f0:	b2f6      	uxtb	r6, r6
 800a2f2:	1a98      	subs	r0, r3, r2
 800a2f4:	6963      	ldr	r3, [r4, #20]
 800a2f6:	4637      	mov	r7, r6
 800a2f8:	4283      	cmp	r3, r0
 800a2fa:	dc05      	bgt.n	800a308 <__swbuf_r+0x4e>
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 fa62 	bl	800a7c8 <_fflush_r>
 800a304:	2800      	cmp	r0, #0
 800a306:	d1ed      	bne.n	800a2e4 <__swbuf_r+0x2a>
 800a308:	68a3      	ldr	r3, [r4, #8]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	60a3      	str	r3, [r4, #8]
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	6022      	str	r2, [r4, #0]
 800a314:	701e      	strb	r6, [r3, #0]
 800a316:	6962      	ldr	r2, [r4, #20]
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d004      	beq.n	800a328 <__swbuf_r+0x6e>
 800a31e:	89a3      	ldrh	r3, [r4, #12]
 800a320:	07db      	lsls	r3, r3, #31
 800a322:	d5e1      	bpl.n	800a2e8 <__swbuf_r+0x2e>
 800a324:	2e0a      	cmp	r6, #10
 800a326:	d1df      	bne.n	800a2e8 <__swbuf_r+0x2e>
 800a328:	4621      	mov	r1, r4
 800a32a:	4628      	mov	r0, r5
 800a32c:	f000 fa4c 	bl	800a7c8 <_fflush_r>
 800a330:	2800      	cmp	r0, #0
 800a332:	d0d9      	beq.n	800a2e8 <__swbuf_r+0x2e>
 800a334:	e7d6      	b.n	800a2e4 <__swbuf_r+0x2a>
	...

0800a338 <__swsetup_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4b29      	ldr	r3, [pc, #164]	@ (800a3e0 <__swsetup_r+0xa8>)
 800a33c:	4605      	mov	r5, r0
 800a33e:	6818      	ldr	r0, [r3, #0]
 800a340:	460c      	mov	r4, r1
 800a342:	b118      	cbz	r0, 800a34c <__swsetup_r+0x14>
 800a344:	6a03      	ldr	r3, [r0, #32]
 800a346:	b90b      	cbnz	r3, 800a34c <__swsetup_r+0x14>
 800a348:	f7ff fee0 	bl	800a10c <__sinit>
 800a34c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a350:	0719      	lsls	r1, r3, #28
 800a352:	d422      	bmi.n	800a39a <__swsetup_r+0x62>
 800a354:	06da      	lsls	r2, r3, #27
 800a356:	d407      	bmi.n	800a368 <__swsetup_r+0x30>
 800a358:	2209      	movs	r2, #9
 800a35a:	602a      	str	r2, [r5, #0]
 800a35c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	81a3      	strh	r3, [r4, #12]
 800a366:	e033      	b.n	800a3d0 <__swsetup_r+0x98>
 800a368:	0758      	lsls	r0, r3, #29
 800a36a:	d512      	bpl.n	800a392 <__swsetup_r+0x5a>
 800a36c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a36e:	b141      	cbz	r1, 800a382 <__swsetup_r+0x4a>
 800a370:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a374:	4299      	cmp	r1, r3
 800a376:	d002      	beq.n	800a37e <__swsetup_r+0x46>
 800a378:	4628      	mov	r0, r5
 800a37a:	f000 f8af 	bl	800a4dc <_free_r>
 800a37e:	2300      	movs	r3, #0
 800a380:	6363      	str	r3, [r4, #52]	@ 0x34
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	2300      	movs	r3, #0
 800a38c:	6063      	str	r3, [r4, #4]
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	f043 0308 	orr.w	r3, r3, #8
 800a398:	81a3      	strh	r3, [r4, #12]
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	b94b      	cbnz	r3, 800a3b2 <__swsetup_r+0x7a>
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3a8:	d003      	beq.n	800a3b2 <__swsetup_r+0x7a>
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 fa58 	bl	800a862 <__smakebuf_r>
 800a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b6:	f013 0201 	ands.w	r2, r3, #1
 800a3ba:	d00a      	beq.n	800a3d2 <__swsetup_r+0x9a>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	60a2      	str	r2, [r4, #8]
 800a3c0:	6962      	ldr	r2, [r4, #20]
 800a3c2:	4252      	negs	r2, r2
 800a3c4:	61a2      	str	r2, [r4, #24]
 800a3c6:	6922      	ldr	r2, [r4, #16]
 800a3c8:	b942      	cbnz	r2, 800a3dc <__swsetup_r+0xa4>
 800a3ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a3ce:	d1c5      	bne.n	800a35c <__swsetup_r+0x24>
 800a3d0:	bd38      	pop	{r3, r4, r5, pc}
 800a3d2:	0799      	lsls	r1, r3, #30
 800a3d4:	bf58      	it	pl
 800a3d6:	6962      	ldrpl	r2, [r4, #20]
 800a3d8:	60a2      	str	r2, [r4, #8]
 800a3da:	e7f4      	b.n	800a3c6 <__swsetup_r+0x8e>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e7f7      	b.n	800a3d0 <__swsetup_r+0x98>
 800a3e0:	20000018 	.word	0x20000018

0800a3e4 <memset>:
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	4402      	add	r2, r0
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d100      	bne.n	800a3ee <memset+0xa>
 800a3ec:	4770      	bx	lr
 800a3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f2:	e7f9      	b.n	800a3e8 <memset+0x4>

0800a3f4 <_close_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	4d05      	ldr	r5, [pc, #20]	@ (800a410 <_close_r+0x1c>)
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	f7fe f9e9 	bl	80087d6 <_close>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_close_r+0x1a>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_close_r+0x1a>
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	20000210 	.word	0x20000210

0800a414 <_lseek_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4604      	mov	r4, r0
 800a418:	4608      	mov	r0, r1
 800a41a:	4611      	mov	r1, r2
 800a41c:	2200      	movs	r2, #0
 800a41e:	4d05      	ldr	r5, [pc, #20]	@ (800a434 <_lseek_r+0x20>)
 800a420:	602a      	str	r2, [r5, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	f7fe f9fb 	bl	800881e <_lseek>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_lseek_r+0x1e>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_lseek_r+0x1e>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	20000210 	.word	0x20000210

0800a438 <_read_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4604      	mov	r4, r0
 800a43c:	4608      	mov	r0, r1
 800a43e:	4611      	mov	r1, r2
 800a440:	2200      	movs	r2, #0
 800a442:	4d05      	ldr	r5, [pc, #20]	@ (800a458 <_read_r+0x20>)
 800a444:	602a      	str	r2, [r5, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	f7fe f9a8 	bl	800879c <_read>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_read_r+0x1e>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_read_r+0x1e>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20000210 	.word	0x20000210

0800a45c <_write_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4604      	mov	r4, r0
 800a460:	4608      	mov	r0, r1
 800a462:	4611      	mov	r1, r2
 800a464:	2200      	movs	r2, #0
 800a466:	4d05      	ldr	r5, [pc, #20]	@ (800a47c <_write_r+0x20>)
 800a468:	602a      	str	r2, [r5, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	f7fd fffc 	bl	8008468 <_write>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d102      	bne.n	800a47a <_write_r+0x1e>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b103      	cbz	r3, 800a47a <_write_r+0x1e>
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	20000210 	.word	0x20000210

0800a480 <__errno>:
 800a480:	4b01      	ldr	r3, [pc, #4]	@ (800a488 <__errno+0x8>)
 800a482:	6818      	ldr	r0, [r3, #0]
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	20000018 	.word	0x20000018

0800a48c <__libc_init_array>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	2600      	movs	r6, #0
 800a490:	4d0c      	ldr	r5, [pc, #48]	@ (800a4c4 <__libc_init_array+0x38>)
 800a492:	4c0d      	ldr	r4, [pc, #52]	@ (800a4c8 <__libc_init_array+0x3c>)
 800a494:	1b64      	subs	r4, r4, r5
 800a496:	10a4      	asrs	r4, r4, #2
 800a498:	42a6      	cmp	r6, r4
 800a49a:	d109      	bne.n	800a4b0 <__libc_init_array+0x24>
 800a49c:	f000 fa50 	bl	800a940 <_init>
 800a4a0:	2600      	movs	r6, #0
 800a4a2:	4d0a      	ldr	r5, [pc, #40]	@ (800a4cc <__libc_init_array+0x40>)
 800a4a4:	4c0a      	ldr	r4, [pc, #40]	@ (800a4d0 <__libc_init_array+0x44>)
 800a4a6:	1b64      	subs	r4, r4, r5
 800a4a8:	10a4      	asrs	r4, r4, #2
 800a4aa:	42a6      	cmp	r6, r4
 800a4ac:	d105      	bne.n	800a4ba <__libc_init_array+0x2e>
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}
 800a4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b4:	4798      	blx	r3
 800a4b6:	3601      	adds	r6, #1
 800a4b8:	e7ee      	b.n	800a498 <__libc_init_array+0xc>
 800a4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4be:	4798      	blx	r3
 800a4c0:	3601      	adds	r6, #1
 800a4c2:	e7f2      	b.n	800a4aa <__libc_init_array+0x1e>
 800a4c4:	0800a994 	.word	0x0800a994
 800a4c8:	0800a994 	.word	0x0800a994
 800a4cc:	0800a994 	.word	0x0800a994
 800a4d0:	0800a998 	.word	0x0800a998

0800a4d4 <__retarget_lock_init_recursive>:
 800a4d4:	4770      	bx	lr

0800a4d6 <__retarget_lock_acquire_recursive>:
 800a4d6:	4770      	bx	lr

0800a4d8 <__retarget_lock_release_recursive>:
 800a4d8:	4770      	bx	lr
	...

0800a4dc <_free_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4605      	mov	r5, r0
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	d040      	beq.n	800a566 <_free_r+0x8a>
 800a4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e8:	1f0c      	subs	r4, r1, #4
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	bfb8      	it	lt
 800a4ee:	18e4      	addlt	r4, r4, r3
 800a4f0:	f000 f8de 	bl	800a6b0 <__malloc_lock>
 800a4f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a568 <_free_r+0x8c>)
 800a4f6:	6813      	ldr	r3, [r2, #0]
 800a4f8:	b933      	cbnz	r3, 800a508 <_free_r+0x2c>
 800a4fa:	6063      	str	r3, [r4, #4]
 800a4fc:	6014      	str	r4, [r2, #0]
 800a4fe:	4628      	mov	r0, r5
 800a500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a504:	f000 b8da 	b.w	800a6bc <__malloc_unlock>
 800a508:	42a3      	cmp	r3, r4
 800a50a:	d908      	bls.n	800a51e <_free_r+0x42>
 800a50c:	6820      	ldr	r0, [r4, #0]
 800a50e:	1821      	adds	r1, r4, r0
 800a510:	428b      	cmp	r3, r1
 800a512:	bf01      	itttt	eq
 800a514:	6819      	ldreq	r1, [r3, #0]
 800a516:	685b      	ldreq	r3, [r3, #4]
 800a518:	1809      	addeq	r1, r1, r0
 800a51a:	6021      	streq	r1, [r4, #0]
 800a51c:	e7ed      	b.n	800a4fa <_free_r+0x1e>
 800a51e:	461a      	mov	r2, r3
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	b10b      	cbz	r3, 800a528 <_free_r+0x4c>
 800a524:	42a3      	cmp	r3, r4
 800a526:	d9fa      	bls.n	800a51e <_free_r+0x42>
 800a528:	6811      	ldr	r1, [r2, #0]
 800a52a:	1850      	adds	r0, r2, r1
 800a52c:	42a0      	cmp	r0, r4
 800a52e:	d10b      	bne.n	800a548 <_free_r+0x6c>
 800a530:	6820      	ldr	r0, [r4, #0]
 800a532:	4401      	add	r1, r0
 800a534:	1850      	adds	r0, r2, r1
 800a536:	4283      	cmp	r3, r0
 800a538:	6011      	str	r1, [r2, #0]
 800a53a:	d1e0      	bne.n	800a4fe <_free_r+0x22>
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4408      	add	r0, r1
 800a542:	6010      	str	r0, [r2, #0]
 800a544:	6053      	str	r3, [r2, #4]
 800a546:	e7da      	b.n	800a4fe <_free_r+0x22>
 800a548:	d902      	bls.n	800a550 <_free_r+0x74>
 800a54a:	230c      	movs	r3, #12
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	e7d6      	b.n	800a4fe <_free_r+0x22>
 800a550:	6820      	ldr	r0, [r4, #0]
 800a552:	1821      	adds	r1, r4, r0
 800a554:	428b      	cmp	r3, r1
 800a556:	bf01      	itttt	eq
 800a558:	6819      	ldreq	r1, [r3, #0]
 800a55a:	685b      	ldreq	r3, [r3, #4]
 800a55c:	1809      	addeq	r1, r1, r0
 800a55e:	6021      	streq	r1, [r4, #0]
 800a560:	6063      	str	r3, [r4, #4]
 800a562:	6054      	str	r4, [r2, #4]
 800a564:	e7cb      	b.n	800a4fe <_free_r+0x22>
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	2000021c 	.word	0x2000021c

0800a56c <sbrk_aligned>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	4e0f      	ldr	r6, [pc, #60]	@ (800a5ac <sbrk_aligned+0x40>)
 800a570:	460c      	mov	r4, r1
 800a572:	6831      	ldr	r1, [r6, #0]
 800a574:	4605      	mov	r5, r0
 800a576:	b911      	cbnz	r1, 800a57e <sbrk_aligned+0x12>
 800a578:	f000 f9d2 	bl	800a920 <_sbrk_r>
 800a57c:	6030      	str	r0, [r6, #0]
 800a57e:	4621      	mov	r1, r4
 800a580:	4628      	mov	r0, r5
 800a582:	f000 f9cd 	bl	800a920 <_sbrk_r>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d103      	bne.n	800a592 <sbrk_aligned+0x26>
 800a58a:	f04f 34ff 	mov.w	r4, #4294967295
 800a58e:	4620      	mov	r0, r4
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	1cc4      	adds	r4, r0, #3
 800a594:	f024 0403 	bic.w	r4, r4, #3
 800a598:	42a0      	cmp	r0, r4
 800a59a:	d0f8      	beq.n	800a58e <sbrk_aligned+0x22>
 800a59c:	1a21      	subs	r1, r4, r0
 800a59e:	4628      	mov	r0, r5
 800a5a0:	f000 f9be 	bl	800a920 <_sbrk_r>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d1f2      	bne.n	800a58e <sbrk_aligned+0x22>
 800a5a8:	e7ef      	b.n	800a58a <sbrk_aligned+0x1e>
 800a5aa:	bf00      	nop
 800a5ac:	20000218 	.word	0x20000218

0800a5b0 <_malloc_r>:
 800a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b4:	1ccd      	adds	r5, r1, #3
 800a5b6:	f025 0503 	bic.w	r5, r5, #3
 800a5ba:	3508      	adds	r5, #8
 800a5bc:	2d0c      	cmp	r5, #12
 800a5be:	bf38      	it	cc
 800a5c0:	250c      	movcc	r5, #12
 800a5c2:	2d00      	cmp	r5, #0
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	db01      	blt.n	800a5cc <_malloc_r+0x1c>
 800a5c8:	42a9      	cmp	r1, r5
 800a5ca:	d904      	bls.n	800a5d6 <_malloc_r+0x26>
 800a5cc:	230c      	movs	r3, #12
 800a5ce:	6033      	str	r3, [r6, #0]
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6ac <_malloc_r+0xfc>
 800a5da:	f000 f869 	bl	800a6b0 <__malloc_lock>
 800a5de:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e2:	461c      	mov	r4, r3
 800a5e4:	bb44      	cbnz	r4, 800a638 <_malloc_r+0x88>
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7ff ffbf 	bl	800a56c <sbrk_aligned>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	d158      	bne.n	800a6a6 <_malloc_r+0xf6>
 800a5f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a5f8:	4627      	mov	r7, r4
 800a5fa:	2f00      	cmp	r7, #0
 800a5fc:	d143      	bne.n	800a686 <_malloc_r+0xd6>
 800a5fe:	2c00      	cmp	r4, #0
 800a600:	d04b      	beq.n	800a69a <_malloc_r+0xea>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	4639      	mov	r1, r7
 800a606:	4630      	mov	r0, r6
 800a608:	eb04 0903 	add.w	r9, r4, r3
 800a60c:	f000 f988 	bl	800a920 <_sbrk_r>
 800a610:	4581      	cmp	r9, r0
 800a612:	d142      	bne.n	800a69a <_malloc_r+0xea>
 800a614:	6821      	ldr	r1, [r4, #0]
 800a616:	4630      	mov	r0, r6
 800a618:	1a6d      	subs	r5, r5, r1
 800a61a:	4629      	mov	r1, r5
 800a61c:	f7ff ffa6 	bl	800a56c <sbrk_aligned>
 800a620:	3001      	adds	r0, #1
 800a622:	d03a      	beq.n	800a69a <_malloc_r+0xea>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	442b      	add	r3, r5
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	f8d8 3000 	ldr.w	r3, [r8]
 800a62e:	685a      	ldr	r2, [r3, #4]
 800a630:	bb62      	cbnz	r2, 800a68c <_malloc_r+0xdc>
 800a632:	f8c8 7000 	str.w	r7, [r8]
 800a636:	e00f      	b.n	800a658 <_malloc_r+0xa8>
 800a638:	6822      	ldr	r2, [r4, #0]
 800a63a:	1b52      	subs	r2, r2, r5
 800a63c:	d420      	bmi.n	800a680 <_malloc_r+0xd0>
 800a63e:	2a0b      	cmp	r2, #11
 800a640:	d917      	bls.n	800a672 <_malloc_r+0xc2>
 800a642:	1961      	adds	r1, r4, r5
 800a644:	42a3      	cmp	r3, r4
 800a646:	6025      	str	r5, [r4, #0]
 800a648:	bf18      	it	ne
 800a64a:	6059      	strne	r1, [r3, #4]
 800a64c:	6863      	ldr	r3, [r4, #4]
 800a64e:	bf08      	it	eq
 800a650:	f8c8 1000 	streq.w	r1, [r8]
 800a654:	5162      	str	r2, [r4, r5]
 800a656:	604b      	str	r3, [r1, #4]
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f82f 	bl	800a6bc <__malloc_unlock>
 800a65e:	f104 000b 	add.w	r0, r4, #11
 800a662:	1d23      	adds	r3, r4, #4
 800a664:	f020 0007 	bic.w	r0, r0, #7
 800a668:	1ac2      	subs	r2, r0, r3
 800a66a:	bf1c      	itt	ne
 800a66c:	1a1b      	subne	r3, r3, r0
 800a66e:	50a3      	strne	r3, [r4, r2]
 800a670:	e7af      	b.n	800a5d2 <_malloc_r+0x22>
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	42a3      	cmp	r3, r4
 800a676:	bf0c      	ite	eq
 800a678:	f8c8 2000 	streq.w	r2, [r8]
 800a67c:	605a      	strne	r2, [r3, #4]
 800a67e:	e7eb      	b.n	800a658 <_malloc_r+0xa8>
 800a680:	4623      	mov	r3, r4
 800a682:	6864      	ldr	r4, [r4, #4]
 800a684:	e7ae      	b.n	800a5e4 <_malloc_r+0x34>
 800a686:	463c      	mov	r4, r7
 800a688:	687f      	ldr	r7, [r7, #4]
 800a68a:	e7b6      	b.n	800a5fa <_malloc_r+0x4a>
 800a68c:	461a      	mov	r2, r3
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	42a3      	cmp	r3, r4
 800a692:	d1fb      	bne.n	800a68c <_malloc_r+0xdc>
 800a694:	2300      	movs	r3, #0
 800a696:	6053      	str	r3, [r2, #4]
 800a698:	e7de      	b.n	800a658 <_malloc_r+0xa8>
 800a69a:	230c      	movs	r3, #12
 800a69c:	4630      	mov	r0, r6
 800a69e:	6033      	str	r3, [r6, #0]
 800a6a0:	f000 f80c 	bl	800a6bc <__malloc_unlock>
 800a6a4:	e794      	b.n	800a5d0 <_malloc_r+0x20>
 800a6a6:	6005      	str	r5, [r0, #0]
 800a6a8:	e7d6      	b.n	800a658 <_malloc_r+0xa8>
 800a6aa:	bf00      	nop
 800a6ac:	2000021c 	.word	0x2000021c

0800a6b0 <__malloc_lock>:
 800a6b0:	4801      	ldr	r0, [pc, #4]	@ (800a6b8 <__malloc_lock+0x8>)
 800a6b2:	f7ff bf10 	b.w	800a4d6 <__retarget_lock_acquire_recursive>
 800a6b6:	bf00      	nop
 800a6b8:	20000214 	.word	0x20000214

0800a6bc <__malloc_unlock>:
 800a6bc:	4801      	ldr	r0, [pc, #4]	@ (800a6c4 <__malloc_unlock+0x8>)
 800a6be:	f7ff bf0b 	b.w	800a4d8 <__retarget_lock_release_recursive>
 800a6c2:	bf00      	nop
 800a6c4:	20000214 	.word	0x20000214

0800a6c8 <__sflush_r>:
 800a6c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	0716      	lsls	r6, r2, #28
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	d454      	bmi.n	800a780 <__sflush_r+0xb8>
 800a6d6:	684b      	ldr	r3, [r1, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dc02      	bgt.n	800a6e2 <__sflush_r+0x1a>
 800a6dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	dd48      	ble.n	800a774 <__sflush_r+0xac>
 800a6e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6e4:	2e00      	cmp	r6, #0
 800a6e6:	d045      	beq.n	800a774 <__sflush_r+0xac>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6ee:	682f      	ldr	r7, [r5, #0]
 800a6f0:	6a21      	ldr	r1, [r4, #32]
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	d030      	beq.n	800a758 <__sflush_r+0x90>
 800a6f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	0759      	lsls	r1, r3, #29
 800a6fc:	d505      	bpl.n	800a70a <__sflush_r+0x42>
 800a6fe:	6863      	ldr	r3, [r4, #4]
 800a700:	1ad2      	subs	r2, r2, r3
 800a702:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a704:	b10b      	cbz	r3, 800a70a <__sflush_r+0x42>
 800a706:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a708:	1ad2      	subs	r2, r2, r3
 800a70a:	2300      	movs	r3, #0
 800a70c:	4628      	mov	r0, r5
 800a70e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a710:	6a21      	ldr	r1, [r4, #32]
 800a712:	47b0      	blx	r6
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	d106      	bne.n	800a728 <__sflush_r+0x60>
 800a71a:	6829      	ldr	r1, [r5, #0]
 800a71c:	291d      	cmp	r1, #29
 800a71e:	d82b      	bhi.n	800a778 <__sflush_r+0xb0>
 800a720:	4a28      	ldr	r2, [pc, #160]	@ (800a7c4 <__sflush_r+0xfc>)
 800a722:	410a      	asrs	r2, r1
 800a724:	07d6      	lsls	r6, r2, #31
 800a726:	d427      	bmi.n	800a778 <__sflush_r+0xb0>
 800a728:	2200      	movs	r2, #0
 800a72a:	6062      	str	r2, [r4, #4]
 800a72c:	6922      	ldr	r2, [r4, #16]
 800a72e:	04d9      	lsls	r1, r3, #19
 800a730:	6022      	str	r2, [r4, #0]
 800a732:	d504      	bpl.n	800a73e <__sflush_r+0x76>
 800a734:	1c42      	adds	r2, r0, #1
 800a736:	d101      	bne.n	800a73c <__sflush_r+0x74>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b903      	cbnz	r3, 800a73e <__sflush_r+0x76>
 800a73c:	6560      	str	r0, [r4, #84]	@ 0x54
 800a73e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a740:	602f      	str	r7, [r5, #0]
 800a742:	b1b9      	cbz	r1, 800a774 <__sflush_r+0xac>
 800a744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a748:	4299      	cmp	r1, r3
 800a74a:	d002      	beq.n	800a752 <__sflush_r+0x8a>
 800a74c:	4628      	mov	r0, r5
 800a74e:	f7ff fec5 	bl	800a4dc <_free_r>
 800a752:	2300      	movs	r3, #0
 800a754:	6363      	str	r3, [r4, #52]	@ 0x34
 800a756:	e00d      	b.n	800a774 <__sflush_r+0xac>
 800a758:	2301      	movs	r3, #1
 800a75a:	4628      	mov	r0, r5
 800a75c:	47b0      	blx	r6
 800a75e:	4602      	mov	r2, r0
 800a760:	1c50      	adds	r0, r2, #1
 800a762:	d1c9      	bne.n	800a6f8 <__sflush_r+0x30>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0c6      	beq.n	800a6f8 <__sflush_r+0x30>
 800a76a:	2b1d      	cmp	r3, #29
 800a76c:	d001      	beq.n	800a772 <__sflush_r+0xaa>
 800a76e:	2b16      	cmp	r3, #22
 800a770:	d11d      	bne.n	800a7ae <__sflush_r+0xe6>
 800a772:	602f      	str	r7, [r5, #0]
 800a774:	2000      	movs	r0, #0
 800a776:	e021      	b.n	800a7bc <__sflush_r+0xf4>
 800a778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a77c:	b21b      	sxth	r3, r3
 800a77e:	e01a      	b.n	800a7b6 <__sflush_r+0xee>
 800a780:	690f      	ldr	r7, [r1, #16]
 800a782:	2f00      	cmp	r7, #0
 800a784:	d0f6      	beq.n	800a774 <__sflush_r+0xac>
 800a786:	0793      	lsls	r3, r2, #30
 800a788:	bf18      	it	ne
 800a78a:	2300      	movne	r3, #0
 800a78c:	680e      	ldr	r6, [r1, #0]
 800a78e:	bf08      	it	eq
 800a790:	694b      	ldreq	r3, [r1, #20]
 800a792:	1bf6      	subs	r6, r6, r7
 800a794:	600f      	str	r7, [r1, #0]
 800a796:	608b      	str	r3, [r1, #8]
 800a798:	2e00      	cmp	r6, #0
 800a79a:	ddeb      	ble.n	800a774 <__sflush_r+0xac>
 800a79c:	4633      	mov	r3, r6
 800a79e:	463a      	mov	r2, r7
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	6a21      	ldr	r1, [r4, #32]
 800a7a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a7a8:	47e0      	blx	ip
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	dc07      	bgt.n	800a7be <__sflush_r+0xf6>
 800a7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ba:	81a3      	strh	r3, [r4, #12]
 800a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7be:	4407      	add	r7, r0
 800a7c0:	1a36      	subs	r6, r6, r0
 800a7c2:	e7e9      	b.n	800a798 <__sflush_r+0xd0>
 800a7c4:	dfbffffe 	.word	0xdfbffffe

0800a7c8 <_fflush_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	690b      	ldr	r3, [r1, #16]
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	b913      	cbnz	r3, 800a7d8 <_fflush_r+0x10>
 800a7d2:	2500      	movs	r5, #0
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	b118      	cbz	r0, 800a7e2 <_fflush_r+0x1a>
 800a7da:	6a03      	ldr	r3, [r0, #32]
 800a7dc:	b90b      	cbnz	r3, 800a7e2 <_fflush_r+0x1a>
 800a7de:	f7ff fc95 	bl	800a10c <__sinit>
 800a7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0f3      	beq.n	800a7d2 <_fflush_r+0xa>
 800a7ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7ec:	07d0      	lsls	r0, r2, #31
 800a7ee:	d404      	bmi.n	800a7fa <_fflush_r+0x32>
 800a7f0:	0599      	lsls	r1, r3, #22
 800a7f2:	d402      	bmi.n	800a7fa <_fflush_r+0x32>
 800a7f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7f6:	f7ff fe6e 	bl	800a4d6 <__retarget_lock_acquire_recursive>
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	f7ff ff63 	bl	800a6c8 <__sflush_r>
 800a802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a804:	4605      	mov	r5, r0
 800a806:	07da      	lsls	r2, r3, #31
 800a808:	d4e4      	bmi.n	800a7d4 <_fflush_r+0xc>
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	059b      	lsls	r3, r3, #22
 800a80e:	d4e1      	bmi.n	800a7d4 <_fflush_r+0xc>
 800a810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a812:	f7ff fe61 	bl	800a4d8 <__retarget_lock_release_recursive>
 800a816:	e7dd      	b.n	800a7d4 <_fflush_r+0xc>

0800a818 <__swhatbuf_r>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	460c      	mov	r4, r1
 800a81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a820:	4615      	mov	r5, r2
 800a822:	2900      	cmp	r1, #0
 800a824:	461e      	mov	r6, r3
 800a826:	b096      	sub	sp, #88	@ 0x58
 800a828:	da0c      	bge.n	800a844 <__swhatbuf_r+0x2c>
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	2100      	movs	r1, #0
 800a82e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a832:	bf14      	ite	ne
 800a834:	2340      	movne	r3, #64	@ 0x40
 800a836:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a83a:	2000      	movs	r0, #0
 800a83c:	6031      	str	r1, [r6, #0]
 800a83e:	602b      	str	r3, [r5, #0]
 800a840:	b016      	add	sp, #88	@ 0x58
 800a842:	bd70      	pop	{r4, r5, r6, pc}
 800a844:	466a      	mov	r2, sp
 800a846:	f000 f849 	bl	800a8dc <_fstat_r>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	dbed      	blt.n	800a82a <__swhatbuf_r+0x12>
 800a84e:	9901      	ldr	r1, [sp, #4]
 800a850:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a854:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a858:	4259      	negs	r1, r3
 800a85a:	4159      	adcs	r1, r3
 800a85c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a860:	e7eb      	b.n	800a83a <__swhatbuf_r+0x22>

0800a862 <__smakebuf_r>:
 800a862:	898b      	ldrh	r3, [r1, #12]
 800a864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a866:	079d      	lsls	r5, r3, #30
 800a868:	4606      	mov	r6, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	d507      	bpl.n	800a87e <__smakebuf_r+0x1c>
 800a86e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	2301      	movs	r3, #1
 800a878:	6163      	str	r3, [r4, #20]
 800a87a:	b003      	add	sp, #12
 800a87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a87e:	466a      	mov	r2, sp
 800a880:	ab01      	add	r3, sp, #4
 800a882:	f7ff ffc9 	bl	800a818 <__swhatbuf_r>
 800a886:	9f00      	ldr	r7, [sp, #0]
 800a888:	4605      	mov	r5, r0
 800a88a:	4639      	mov	r1, r7
 800a88c:	4630      	mov	r0, r6
 800a88e:	f7ff fe8f 	bl	800a5b0 <_malloc_r>
 800a892:	b948      	cbnz	r0, 800a8a8 <__smakebuf_r+0x46>
 800a894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a898:	059a      	lsls	r2, r3, #22
 800a89a:	d4ee      	bmi.n	800a87a <__smakebuf_r+0x18>
 800a89c:	f023 0303 	bic.w	r3, r3, #3
 800a8a0:	f043 0302 	orr.w	r3, r3, #2
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	e7e2      	b.n	800a86e <__smakebuf_r+0xc>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b2:	81a3      	strh	r3, [r4, #12]
 800a8b4:	9b01      	ldr	r3, [sp, #4]
 800a8b6:	6020      	str	r0, [r4, #0]
 800a8b8:	b15b      	cbz	r3, 800a8d2 <__smakebuf_r+0x70>
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8c0:	f000 f81e 	bl	800a900 <_isatty_r>
 800a8c4:	b128      	cbz	r0, 800a8d2 <__smakebuf_r+0x70>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	f023 0303 	bic.w	r3, r3, #3
 800a8cc:	f043 0301 	orr.w	r3, r3, #1
 800a8d0:	81a3      	strh	r3, [r4, #12]
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	431d      	orrs	r5, r3
 800a8d6:	81a5      	strh	r5, [r4, #12]
 800a8d8:	e7cf      	b.n	800a87a <__smakebuf_r+0x18>
	...

0800a8dc <_fstat_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	2300      	movs	r3, #0
 800a8e0:	4d06      	ldr	r5, [pc, #24]	@ (800a8fc <_fstat_r+0x20>)
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	602b      	str	r3, [r5, #0]
 800a8ea:	f7fd ff7f 	bl	80087ec <_fstat>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	d102      	bne.n	800a8f8 <_fstat_r+0x1c>
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	b103      	cbz	r3, 800a8f8 <_fstat_r+0x1c>
 800a8f6:	6023      	str	r3, [r4, #0]
 800a8f8:	bd38      	pop	{r3, r4, r5, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000210 	.word	0x20000210

0800a900 <_isatty_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	2300      	movs	r3, #0
 800a904:	4d05      	ldr	r5, [pc, #20]	@ (800a91c <_isatty_r+0x1c>)
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	602b      	str	r3, [r5, #0]
 800a90c:	f7fd ff7d 	bl	800880a <_isatty>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_isatty_r+0x1a>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	b103      	cbz	r3, 800a91a <_isatty_r+0x1a>
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	20000210 	.word	0x20000210

0800a920 <_sbrk_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	2300      	movs	r3, #0
 800a924:	4d05      	ldr	r5, [pc, #20]	@ (800a93c <_sbrk_r+0x1c>)
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f7fd ff84 	bl	8008838 <_sbrk>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_sbrk_r+0x1a>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_sbrk_r+0x1a>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	20000210 	.word	0x20000210

0800a940 <_init>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr

0800a94c <_fini>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	bf00      	nop
 800a950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a952:	bc08      	pop	{r3}
 800a954:	469e      	mov	lr, r3
 800a956:	4770      	bx	lr
