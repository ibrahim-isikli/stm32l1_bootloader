
stm32l1_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .mysection    00000000  08018000  08018000  00004068  2**0
                  CONTENTS
  2 .text         00002868  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000074  080029a4  080029a4  000039a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08002a18  08002a18  00004068  2**0
                  CONTENTS
  5 .ARM          00000008  08002a18  08002a18  00003a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08002a20  08002a20  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08002a20  08002a20  00003a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08002a24  08002a24  00003a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000068  20000000  08002a28  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001b8  20000068  08002a90  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  08002a90  00004220  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007182  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015e7  00000000  00000000  0000b213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0000c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054a  00000000  00000000  0000cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015cdc  00000000  00000000  0000d44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008737  00000000  00000000  00023126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008435a  00000000  00000000  0002b85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000afbb7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021c8  00000000  00000000  000afbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000b1dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	0800298c 	.word	0x0800298c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	0800298c 	.word	0x0800298c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <go2APP>:
0x20000000  +-----------------------------+
 *
 * */

void go2APP(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
	uint32_t jump_address;
	pFunction jump_to_app;
	printf("[SYSTEM]: BOOTLOADER START\r\n");
 800046e:	4813      	ldr	r0, [pc, #76]	@ (80004bc <go2APP+0x54>)
 8000470:	f001 fefe 	bl	8002270 <puts>
	// --------------  flash app bolgesinde yuklu bir app var mi diye kontrol ediyoruz --------------------------------
	// ( *(uint32_t*)FLASH_APP_ADDR ) -> vektor tablosundaki ilk word'u okur  yani MSP degerine bakiyoruz
	// MSP degeri RAM'deki stack degerinin tepesini gosteriyor
	// & 0x2FFE0000 -> bu maskelemenin amaci MSP degeri gercekten de RAM'i isaret ediyor mu
	// MSP RAM'i gosteriyorsa -> burada gecerli bir app imaji var (kaba bir kontrol)
	if(  (( *(uint32_t*)FLASH_APP_ADDR ) & 0x2FFE0000) == 0x20000000  )
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <go2APP+0x58>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <go2APP+0x5c>)
 800047a:	4013      	ands	r3, r2
 800047c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000480:	d114      	bne.n	80004ac <go2APP+0x44>
	{
		printf("[SYSTEM]: APP START\r\n");
 8000482:	4811      	ldr	r0, [pc, #68]	@ (80004c8 <go2APP+0x60>)
 8000484:	f001 fef4 	bl	8002270 <puts>
		HAL_Delay(100);
 8000488:	2064      	movs	r0, #100	@ 0x64
 800048a:	f000 facb 	bl	8000a24 <HAL_Delay>

			// --------------------app'e atlama----------------------------------------
		jump_address = *(uint32_t*)(FLASH_APP_ADDR + 4); // Reset handler adresini jump_addr olarak tut
 800048e:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <go2APP+0x64>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	60fb      	str	r3, [r7, #12]
		// bu deger reset handler fonksiyonuna dallanacagimiz giris adresi
		// neden buna ziplayacagiz -> cunku reset handler : .data kopyalama, .bss sifirlama, system clocklarini kurmayi halledip main()'e geciren gercek baslangic noktasi
		jump_to_app = (pFunction) jump_address; // artik fonksiyon pointer'la fonksiyonlara erisebilirim
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	60bb      	str	r3, [r7, #8]

		__set_MSP(*(uint32_t*)(FLASH_APP_ADDR)); // app'in stack pointerini kuruyoruz
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <go2APP+0x58>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f383 8808 	msr	MSP, r3
}
 80004a4:	bf00      	nop
		jump_to_app();                           // app'in reset handler'ini cagiriyoruz
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	4798      	blx	r3
	}
	else
	{
		printf("[SYSTEM]: APP NOT FOUND\r\n");
	}
}
 80004aa:	e002      	b.n	80004b2 <go2APP+0x4a>
		printf("[SYSTEM]: APP NOT FOUND\r\n");
 80004ac:	4808      	ldr	r0, [pc, #32]	@ (80004d0 <go2APP+0x68>)
 80004ae:	f001 fedf 	bl	8002270 <puts>
}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	080029a4 	.word	0x080029a4
 80004c0:	08008000 	.word	0x08008000
 80004c4:	2ffe0000 	.word	0x2ffe0000
 80004c8:	080029c0 	.word	0x080029c0
 80004cc:	08008004 	.word	0x08008004
 80004d0:	080029d8 	.word	0x080029d8

080004d4 <_write>:

int _write(int file, char*ptr, int len)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
	int data_idx;

	for(data_idx = 0; data_idx < len; data_idx++)
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e00a      	b.n	80004fc <_write+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, 100);
 80004e6:	68b9      	ldr	r1, [r7, #8]
 80004e8:	1c4b      	adds	r3, r1, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	2364      	movs	r3, #100	@ 0x64
 80004ee:	2201      	movs	r2, #1
 80004f0:	4807      	ldr	r0, [pc, #28]	@ (8000510 <_write+0x3c>)
 80004f2:	f001 fb7b 	bl	8001bec <HAL_UART_Transmit>
	for(data_idx = 0; data_idx < len; data_idx++)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697a      	ldr	r2, [r7, #20]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf0      	blt.n	80004e6 <_write+0x12>

	return len;
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000084 	.word	0x20000084

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fa15 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f808 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f87e 	bl	8000620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f852 	bl	80005cc <MX_USART2_UART_Init>
	  //blink(100);
	  //TurnOnLED(0);
#ifdef TUTORIAL
	  (*Functions[0])(100);
#endif
	  go2APP();
 8000528:	f7ff ff9e 	bl	8000468 <go2APP>
 800052c:	e7fc      	b.n	8000528 <main+0x14>
	...

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b092      	sub	sp, #72	@ 0x48
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2234      	movs	r2, #52	@ 0x34
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 ff76 	bl	8002430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <SystemClock_Config+0x98>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800055a:	4a1b      	ldr	r2, [pc, #108]	@ (80005c8 <SystemClock_Config+0x98>)
 800055c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000560:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2300      	movs	r3, #0
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000576:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800057c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fcea 	bl	8000f60 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000592:	f000 f883 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 f806 	bl	80015c0 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ba:	f000 f86f 	bl	800069c <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3748      	adds	r7, #72	@ 0x48
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	@ (800061c <MX_USART2_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_USART2_UART_Init+0x4c>)
 8000604:	f001 faa2 	bl	8001b4c <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f845 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000084 	.word	0x20000084
 800061c:	40004400 	.word	0x40004400

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <MX_GPIO_Init+0x74>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <MX_GPIO_Init+0x74>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_GPIO_Init+0x74>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_GPIO_Init+0x74>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <MX_GPIO_Init+0x74>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_GPIO_Init+0x74>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2180      	movs	r1, #128	@ 0x80
 800066a:	480b      	ldr	r0, [pc, #44]	@ (8000698 <MX_GPIO_Init+0x78>)
 800066c:	f000 fc60 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4619      	mov	r1, r3
 8000686:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_GPIO_Init+0x78>)
 8000688:	f000 fad2 	bl	8000c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020400 	.word	0x40020400

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <Error_Handler+0x8>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <HAL_MspInit+0x5c>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <HAL_MspInit+0x5c>)
 80006b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006b8:	6253      	str	r3, [r2, #36]	@ 0x24
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_MspInit+0x5c>)
 80006bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_MspInit+0x5c>)
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <HAL_MspInit+0x5c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6213      	str	r3, [r2, #32]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <HAL_MspInit+0x5c>)
 80006d4:	6a1b      	ldr	r3, [r3, #32]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_MspInit+0x5c>)
 80006e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <HAL_MspInit+0x5c>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_MspInit+0x5c>)
 80006ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006f6:	2007      	movs	r0, #7
 80006f8:	f000 fa66 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800

08000708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <HAL_UART_MspInit+0x7c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d127      	bne.n	800077a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <HAL_UART_MspInit+0x80>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800072e:	4a16      	ldr	r2, [pc, #88]	@ (8000788 <HAL_UART_MspInit+0x80>)
 8000730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000734:	6253      	str	r3, [r2, #36]	@ 0x24
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <HAL_UART_MspInit+0x80>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <HAL_UART_MspInit+0x80>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a10      	ldr	r2, [pc, #64]	@ (8000788 <HAL_UART_MspInit+0x80>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <HAL_UART_MspInit+0x80>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800075a:	230c      	movs	r3, #12
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800076a:	2307      	movs	r3, #7
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <HAL_UART_MspInit+0x84>)
 8000776:	f000 fa5b 	bl	8000c30 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	@ 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40004400 	.word	0x40004400
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <NMI_Handler+0x4>

08000798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <MemManage_Handler+0x4>

080007a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f904 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e00a      	b.n	8000810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007fa:	f3af 8000 	nop.w
 80007fe:	4601      	mov	r1, r0
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	b2ca      	uxtb	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf0      	blt.n	80007fa <_read+0x12>
  }

  return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000848:	605a      	str	r2, [r3, #4]
  return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <_isatty>:

int _isatty(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
	...

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f001 fe0a 	bl	80024cc <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20008000 	.word	0x20008000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	200000cc 	.word	0x200000cc
 80008ec:	20000220 	.word	0x20000220

080008f0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff fff8 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	@ (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	@ (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	@ (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f001 fdd7 	bl	80024d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fdf3 	bl	8000514 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000938:	08002a28 	.word	0x08002a28
  ldr r2, =_sbss
 800093c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000940:	20000220 	.word	0x20000220

08000944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>

08000946 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f939 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f80e 	bl	8000978 <HAL_InitTick>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e001      	b.n	800096c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000968:	f7ff fe9e 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096c:	79fb      	ldrb	r3, [r7, #7]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <HAL_InitTick+0x68>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d022      	beq.n	80009d2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <HAL_InitTick+0x6c>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <HAL_InitTick+0x68>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000998:	fbb1 f3f3 	udiv	r3, r1, r3
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f938 	bl	8000c16 <HAL_SYSTICK_Config>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10f      	bne.n	80009cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d809      	bhi.n	80009c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b2:	2200      	movs	r2, #0
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ba:	f000 f910 	bl	8000bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_InitTick+0x70>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	e007      	b.n	80009d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e004      	b.n	80009d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e001      	b.n	80009d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_IncTick+0x20>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a03      	ldr	r2, [pc, #12]	@ (8000a08 <HAL_IncTick+0x1c>)
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200000d0 	.word	0x200000d0
 8000a0c:	20000008 	.word	0x20000008

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	@ (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	200000d0 	.word	0x200000d0

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fff0 	bl	8000a10 <HAL_GetTick>
 8000a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3c:	d004      	beq.n	8000a48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_Delay+0x40>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a48:	bf00      	nop
 8000a4a:	f7ff ffe1 	bl	8000a10 <HAL_GetTick>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d8f7      	bhi.n	8000a4a <HAL_Delay+0x26>
  {
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000008 	.word	0x20000008

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff90 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff49 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff5e 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff90 	bl	8000b20 <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5f 	bl	8000acc <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffb0 	bl	8000b84 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c46:	e154      	b.n	8000ef2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8146 	beq.w	8000eec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d005      	beq.n	8000c78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d130      	bne.n	8000cda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	f003 0201 	and.w	r2, r3, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d017      	beq.n	8000d16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	6939      	ldr	r1, [r7, #16]
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0203 	and.w	r2, r3, #3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80a0 	beq.w	8000eec <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b58      	ldr	r3, [pc, #352]	@ (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	4a57      	ldr	r2, [pc, #348]	@ (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6213      	str	r3, [r2, #32]
 8000db8:	4b55      	ldr	r3, [pc, #340]	@ (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dc4:	4a53      	ldr	r2, [pc, #332]	@ (8000f14 <HAL_GPIO_Init+0x2e4>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a4b      	ldr	r2, [pc, #300]	@ (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d019      	beq.n	8000e24 <HAL_GPIO_Init+0x1f4>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a4a      	ldr	r2, [pc, #296]	@ (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d013      	beq.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a49      	ldr	r2, [pc, #292]	@ (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <HAL_GPIO_Init+0x1ec>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a48      	ldr	r2, [pc, #288]	@ (8000f24 <HAL_GPIO_Init+0x2f4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d007      	beq.n	8000e18 <HAL_GPIO_Init+0x1e8>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a47      	ldr	r2, [pc, #284]	@ (8000f28 <HAL_GPIO_Init+0x2f8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d101      	bne.n	8000e14 <HAL_GPIO_Init+0x1e4>
 8000e10:	2304      	movs	r3, #4
 8000e12:	e008      	b.n	8000e26 <HAL_GPIO_Init+0x1f6>
 8000e14:	2305      	movs	r3, #5
 8000e16:	e006      	b.n	8000e26 <HAL_GPIO_Init+0x1f6>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e004      	b.n	8000e26 <HAL_GPIO_Init+0x1f6>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0x1f6>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <HAL_GPIO_Init+0x1f6>
 8000e24:	2300      	movs	r3, #0
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	f002 0203 	and.w	r2, r2, #3
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	4093      	lsls	r3, r2
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e36:	4937      	ldr	r1, [pc, #220]	@ (8000f14 <HAL_GPIO_Init+0x2e4>)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e44:	4b39      	ldr	r3, [pc, #228]	@ (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e68:	4a30      	ldr	r2, [pc, #192]	@ (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e92:	4a26      	ldr	r2, [pc, #152]	@ (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e98:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ee6:	4a11      	ldr	r2, [pc, #68]	@ (8000f2c <HAL_GPIO_Init+0x2fc>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f47f aea3 	bne.w	8000c48 <HAL_GPIO_Init+0x18>
  }
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40010000 	.word	0x40010000
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f4c:	e003      	b.n	8000f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	041a      	lsls	r2, r3, #16
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	619a      	str	r2, [r3, #24]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e31d      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f72:	4b94      	ldr	r3, [pc, #592]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f7c:	4b91      	ldr	r3, [pc, #580]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f84:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d07b      	beq.n	800108a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d006      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b0c      	cmp	r3, #12
 8000f9c:	d10f      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5e>
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa4:	d10b      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa6:	4b87      	ldr	r3, [pc, #540]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d06a      	beq.n	8001088 <HAL_RCC_OscConfig+0x128>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d166      	bne.n	8001088 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e2f7      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d106      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x74>
 8000fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7e      	ldr	r2, [pc, #504]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e02d      	b.n	8001030 <HAL_RCC_OscConfig+0xd0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x96>
 8000fdc:	4b79      	ldr	r3, [pc, #484]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a78      	ldr	r2, [pc, #480]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b76      	ldr	r3, [pc, #472]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a75      	ldr	r2, [pc, #468]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	e01c      	b.n	8001030 <HAL_RCC_OscConfig+0xd0>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0xb8>
 8000ffe:	4b71      	ldr	r3, [pc, #452]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a70      	ldr	r2, [pc, #448]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b6e      	ldr	r3, [pc, #440]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a6d      	ldr	r2, [pc, #436]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8001010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0xd0>
 8001018:	4b6a      	ldr	r3, [pc, #424]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a69      	ldr	r2, [pc, #420]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800101e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b67      	ldr	r3, [pc, #412]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a66      	ldr	r2, [pc, #408]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800102a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800102e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fcea 	bl	8000a10 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fce6 	bl	8000a10 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	@ 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e2ad      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001052:	4b5c      	ldr	r3, [pc, #368]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f0      	beq.n	8001040 <HAL_RCC_OscConfig+0xe0>
 800105e:	e014      	b.n	800108a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fcd6 	bl	8000a10 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fcd2 	bl	8000a10 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	@ 0x64
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e299      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800107a:	4b52      	ldr	r3, [pc, #328]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x108>
 8001086:	e000      	b.n	800108a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d05a      	beq.n	800114c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2b0c      	cmp	r3, #12
 80010a0:	d119      	bne.n	80010d6 <HAL_RCC_OscConfig+0x176>
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d116      	bne.n	80010d6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a8:	4b46      	ldr	r3, [pc, #280]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_OscConfig+0x160>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e276      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c0:	4b40      	ldr	r3, [pc, #256]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	493d      	ldr	r1, [pc, #244]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d4:	e03a      	b.n	800114c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d020      	beq.n	8001120 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010de:	4b3a      	ldr	r3, [pc, #232]	@ (80011c8 <HAL_RCC_OscConfig+0x268>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fc94 	bl	8000a10 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc90 	bl	8000a10 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e257      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010fe:	4b31      	ldr	r3, [pc, #196]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	492a      	ldr	r1, [pc, #168]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
 800111e:	e015      	b.n	800114c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001120:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <HAL_RCC_OscConfig+0x268>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fc73 	bl	8000a10 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fc6f 	bl	8000a10 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e236      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001140:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80b8 	beq.w	80012ca <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d170      	bne.n	8001242 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_OscConfig+0x218>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e21a      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001184:	429a      	cmp	r2, r3
 8001186:	d921      	bls.n	80011cc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fc7d 	bl	8001a8c <RCC_SetFlashLatencyFromMSIRange>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e208      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4906      	ldr	r1, [pc, #24]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	061b      	lsls	r3, r3, #24
 80011bc:	4901      	ldr	r1, [pc, #4]	@ (80011c4 <HAL_RCC_OscConfig+0x264>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
 80011c2:	e020      	b.n	8001206 <HAL_RCC_OscConfig+0x2a6>
 80011c4:	40023800 	.word	0x40023800
 80011c8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011cc:	4b99      	ldr	r3, [pc, #612]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4996      	ldr	r1, [pc, #600]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011de:	4b95      	ldr	r3, [pc, #596]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	061b      	lsls	r3, r3, #24
 80011ec:	4991      	ldr	r1, [pc, #580]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fc48 	bl	8001a8c <RCC_SetFlashLatencyFromMSIRange>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e1d3      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	0b5b      	lsrs	r3, r3, #13
 800120c:	3301      	adds	r3, #1
 800120e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001216:	4a87      	ldr	r2, [pc, #540]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001218:	6892      	ldr	r2, [r2, #8]
 800121a:	0912      	lsrs	r2, r2, #4
 800121c:	f002 020f 	and.w	r2, r2, #15
 8001220:	4985      	ldr	r1, [pc, #532]	@ (8001438 <HAL_RCC_OscConfig+0x4d8>)
 8001222:	5c8a      	ldrb	r2, [r1, r2]
 8001224:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001226:	4a85      	ldr	r2, [pc, #532]	@ (800143c <HAL_RCC_OscConfig+0x4dc>)
 8001228:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800122a:	4b85      	ldr	r3, [pc, #532]	@ (8001440 <HAL_RCC_OscConfig+0x4e0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fba2 	bl	8000978 <HAL_InitTick>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d045      	beq.n	80012ca <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	e1b5      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d029      	beq.n	800129e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800124a:	4b7e      	ldr	r3, [pc, #504]	@ (8001444 <HAL_RCC_OscConfig+0x4e4>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fbde 	bl	8000a10 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001258:	f7ff fbda 	bl	8000a10 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1a1      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800126a:	4b72      	ldr	r3, [pc, #456]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001276:	4b6f      	ldr	r3, [pc, #444]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	496c      	ldr	r1, [pc, #432]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001288:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	4967      	ldr	r1, [pc, #412]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800129e:	4b69      	ldr	r3, [pc, #420]	@ (8001444 <HAL_RCC_OscConfig+0x4e4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fbb4 	bl	8000a10 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ac:	f7ff fbb0 	bl	8000a10 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e177      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012be:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d030      	beq.n	8001338 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d016      	beq.n	800130c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	4b5a      	ldr	r3, [pc, #360]	@ (8001448 <HAL_RCC_OscConfig+0x4e8>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fb94 	bl	8000a10 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fb90 	bl	8000a10 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e157      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x38c>
 800130a:	e015      	b.n	8001338 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130c:	4b4e      	ldr	r3, [pc, #312]	@ (8001448 <HAL_RCC_OscConfig+0x4e8>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fb7d 	bl	8000a10 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fb79 	bl	8000a10 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e140      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800132c:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 800132e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f0      	bne.n	800131a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80b5 	beq.w	80014b0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134a:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10d      	bne.n	8001372 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	4a36      	ldr	r2, [pc, #216]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	6253      	str	r3, [r2, #36]	@ 0x24
 8001362:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136e:	2301      	movs	r3, #1
 8001370:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001372:	4b36      	ldr	r3, [pc, #216]	@ (800144c <HAL_RCC_OscConfig+0x4ec>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137a:	2b00      	cmp	r3, #0
 800137c:	d118      	bne.n	80013b0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137e:	4b33      	ldr	r3, [pc, #204]	@ (800144c <HAL_RCC_OscConfig+0x4ec>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a32      	ldr	r2, [pc, #200]	@ (800144c <HAL_RCC_OscConfig+0x4ec>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138a:	f7ff fb41 	bl	8000a10 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001392:	f7ff fb3d 	bl	8000a10 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	@ 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e104      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	4b29      	ldr	r3, [pc, #164]	@ (800144c <HAL_RCC_OscConfig+0x4ec>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x466>
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80013c4:	e02d      	b.n	8001422 <HAL_RCC_OscConfig+0x4c2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x488>
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d2:	4a18      	ldr	r2, [pc, #96]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d8:	6353      	str	r3, [r2, #52]	@ 0x34
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013de:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80013e6:	e01c      	b.n	8001422 <HAL_RCC_OscConfig+0x4c2>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d10c      	bne.n	800140a <HAL_RCC_OscConfig+0x4aa>
 80013f0:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013fa:	6353      	str	r3, [r2, #52]	@ 0x34
 80013fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 80013fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001406:	6353      	str	r3, [r2, #52]	@ 0x34
 8001408:	e00b      	b.n	8001422 <HAL_RCC_OscConfig+0x4c2>
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001414:	6353      	str	r3, [r2, #52]	@ 0x34
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 8001418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141a:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <HAL_RCC_OscConfig+0x4d4>)
 800141c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001420:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d024      	beq.n	8001474 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff faf1 	bl	8000a10 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001430:	e019      	b.n	8001466 <HAL_RCC_OscConfig+0x506>
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	08002a00 	.word	0x08002a00
 800143c:	20000000 	.word	0x20000000
 8001440:	20000004 	.word	0x20000004
 8001444:	42470020 	.word	0x42470020
 8001448:	42470680 	.word	0x42470680
 800144c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff fade 	bl	8000a10 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0a3      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001466:	4b54      	ldr	r3, [pc, #336]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 8001468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0ee      	beq.n	8001450 <HAL_RCC_OscConfig+0x4f0>
 8001472:	e014      	b.n	800149e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff facc 	bl	8000a10 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800147a:	e00a      	b.n	8001492 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7ff fac8 	bl	8000a10 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e08d      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001492:	4b49      	ldr	r3, [pc, #292]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 8001494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ee      	bne.n	800147c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a4:	4b44      	ldr	r3, [pc, #272]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 80014a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a8:	4a43      	ldr	r2, [pc, #268]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 80014aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d079      	beq.n	80015ac <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d056      	beq.n	800156c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d13b      	bne.n	800153e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <HAL_RCC_OscConfig+0x65c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff faa0 	bl	8000a10 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fa9c 	bl	8000a10 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e063      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	4319      	orrs	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	430b      	orrs	r3, r1
 800150a:	492b      	ldr	r1, [pc, #172]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001510:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <HAL_RCC_OscConfig+0x65c>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fa7b 	bl	8000a10 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fa77 	bl	8000a10 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e03e      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x5be>
 800153c:	e036      	b.n	80015ac <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <HAL_RCC_OscConfig+0x65c>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fa64 	bl	8000a10 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fa60 	bl	8000a10 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e027      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x5ec>
 800156a:	e01f      	b.n	80015ac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e01a      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_RCC_OscConfig+0x658>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	429a      	cmp	r2, r3
 800158a:	d10d      	bne.n	80015a8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d106      	bne.n	80015a8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	42470060 	.word	0x42470060

080015c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e11a      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d919      	bls.n	8001616 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x34>
 80015e8:	4b8a      	ldr	r3, [pc, #552]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a89      	ldr	r2, [pc, #548]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b87      	ldr	r3, [pc, #540]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 0201 	bic.w	r2, r3, #1
 80015fc:	4985      	ldr	r1, [pc, #532]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001604:	4b83      	ldr	r3, [pc, #524]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d001      	beq.n	8001616 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0f9      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001622:	4b7d      	ldr	r3, [pc, #500]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	497a      	ldr	r1, [pc, #488]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 808e 	beq.w	800175e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800164a:	4b73      	ldr	r3, [pc, #460]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d121      	bne.n	800169a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0d7      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001662:	4b6d      	ldr	r3, [pc, #436]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d115      	bne.n	800169a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0cb      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167a:	4b67      	ldr	r3, [pc, #412]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0bf      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800168a:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0b7      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169a:	4b5f      	ldr	r3, [pc, #380]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f023 0203 	bic.w	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	495c      	ldr	r1, [pc, #368]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ac:	f7ff f9b0 	bl	8000a10 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d112      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016bc:	f7ff f9a8 	bl	8000a10 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e09b      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d2:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d1ee      	bne.n	80016bc <HAL_RCC_ClockConfig+0xfc>
 80016de:	e03e      	b.n	800175e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d112      	bne.n	800170e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ea:	f7ff f991 	bl	8000a10 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e084      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001700:	4b45      	ldr	r3, [pc, #276]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b0c      	cmp	r3, #12
 800170a:	d1ee      	bne.n	80016ea <HAL_RCC_ClockConfig+0x12a>
 800170c:	e027      	b.n	800175e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d11d      	bne.n	8001752 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff f97a 	bl	8000a10 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e06d      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800172e:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b04      	cmp	r3, #4
 8001738:	d1ee      	bne.n	8001718 <HAL_RCC_ClockConfig+0x158>
 800173a:	e010      	b.n	800175e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173c:	f7ff f968 	bl	8000a10 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e05b      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001752:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ee      	bne.n	800173c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800175e:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d219      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_RCC_ClockConfig+0x1be>
 8001772:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 0201 	bic.w	r2, r3, #1
 8001786:	4923      	ldr	r1, [pc, #140]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_RCC_ClockConfig+0x254>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e034      	b.n	800180a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4917      	ldr	r1, [pc, #92]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	490f      	ldr	r1, [pc, #60]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017de:	f000 f823 	bl	8001828 <HAL_RCC_GetSysClockFreq>
 80017e2:	4602      	mov	r2, r0
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_RCC_ClockConfig+0x258>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	490b      	ldr	r1, [pc, #44]	@ (800181c <HAL_RCC_ClockConfig+0x25c>)
 80017f0:	5ccb      	ldrb	r3, [r1, r3]
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_RCC_ClockConfig+0x260>)
 80017f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_RCC_ClockConfig+0x264>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f8ba 	bl	8000978 <HAL_InitTick>
 8001804:	4603      	mov	r3, r0
 8001806:	72fb      	strb	r3, [r7, #11]

  return status;
 8001808:	7afb      	ldrb	r3, [r7, #11]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00
 8001818:	40023800 	.word	0x40023800
 800181c:	08002a00 	.word	0x08002a00
 8001820:	20000000 	.word	0x20000000
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800182c:	b092      	sub	sp, #72	@ 0x48
 800182e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001830:	4b79      	ldr	r3, [pc, #484]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b0c      	cmp	r3, #12
 800183e:	d00d      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x34>
 8001840:	2b0c      	cmp	r3, #12
 8001842:	f200 80d5 	bhi.w	80019f0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001846:	2b04      	cmp	r3, #4
 8001848:	d002      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x28>
 800184a:	2b08      	cmp	r3, #8
 800184c:	d003      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x2e>
 800184e:	e0cf      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001850:	4b72      	ldr	r3, [pc, #456]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001852:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001854:	e0da      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001856:	4b72      	ldr	r3, [pc, #456]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001858:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800185a:	e0d7      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800185c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	f003 020f 	and.w	r2, r3, #15
 8001864:	4b6f      	ldr	r3, [pc, #444]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001866:	5c9b      	ldrb	r3, [r3, r2]
 8001868:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800186a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800186c:	0d9b      	lsrs	r3, r3, #22
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	3301      	adds	r3, #1
 8001874:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001876:	4b68      	ldr	r3, [pc, #416]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d05d      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001884:	2200      	movs	r2, #0
 8001886:	4618      	mov	r0, r3
 8001888:	4611      	mov	r1, r2
 800188a:	4604      	mov	r4, r0
 800188c:	460d      	mov	r5, r1
 800188e:	4622      	mov	r2, r4
 8001890:	462b      	mov	r3, r5
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f04f 0100 	mov.w	r1, #0
 800189a:	0159      	lsls	r1, r3, #5
 800189c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a0:	0150      	lsls	r0, r2, #5
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4621      	mov	r1, r4
 80018a8:	1a51      	subs	r1, r2, r1
 80018aa:	6139      	str	r1, [r7, #16]
 80018ac:	4629      	mov	r1, r5
 80018ae:	eb63 0301 	sbc.w	r3, r3, r1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018c0:	4659      	mov	r1, fp
 80018c2:	018b      	lsls	r3, r1, #6
 80018c4:	4651      	mov	r1, sl
 80018c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ca:	4651      	mov	r1, sl
 80018cc:	018a      	lsls	r2, r1, #6
 80018ce:	46d4      	mov	ip, sl
 80018d0:	ebb2 080c 	subs.w	r8, r2, ip
 80018d4:	4659      	mov	r1, fp
 80018d6:	eb63 0901 	sbc.w	r9, r3, r1
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ee:	4690      	mov	r8, r2
 80018f0:	4699      	mov	r9, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	eb18 0303 	adds.w	r3, r8, r3
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	462b      	mov	r3, r5
 80018fc:	eb49 0303 	adc.w	r3, r9, r3
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800190e:	4629      	mov	r1, r5
 8001910:	024b      	lsls	r3, r1, #9
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	4604      	mov	r4, r0
 8001918:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800191c:	4601      	mov	r1, r0
 800191e:	024a      	lsls	r2, r1, #9
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001926:	2200      	movs	r2, #0
 8001928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800192c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001930:	f7fe fc24 	bl	800017c <__aeabi_uldivmod>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4613      	mov	r3, r2
 800193a:	647b      	str	r3, [r7, #68]	@ 0x44
 800193c:	e055      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800193e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001940:	2200      	movs	r2, #0
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	627a      	str	r2, [r7, #36]	@ 0x24
 8001946:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800194a:	4642      	mov	r2, r8
 800194c:	464b      	mov	r3, r9
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	46c4      	mov	ip, r8
 8001964:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001968:	4640      	mov	r0, r8
 800196a:	4649      	mov	r1, r9
 800196c:	468c      	mov	ip, r1
 800196e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800197e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001982:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001986:	ebb2 040a 	subs.w	r4, r2, sl
 800198a:	eb63 050b 	sbc.w	r5, r3, fp
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	00eb      	lsls	r3, r5, #3
 8001998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800199c:	00e2      	lsls	r2, r4, #3
 800199e:	4614      	mov	r4, r2
 80019a0:	461d      	mov	r5, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	18e3      	adds	r3, r4, r3
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	eb45 0303 	adc.w	r3, r5, r3
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019bc:	4629      	mov	r1, r5
 80019be:	028b      	lsls	r3, r1, #10
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	4604      	mov	r4, r0
 80019c6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80019ca:	4601      	mov	r1, r0
 80019cc:	028a      	lsls	r2, r1, #10
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d4:	2200      	movs	r2, #0
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	61fa      	str	r2, [r7, #28]
 80019da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019de:	f7fe fbcd 	bl	800017c <__aeabi_uldivmod>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4613      	mov	r3, r2
 80019e8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80019ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ec:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80019ee:	e00d      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	0b5b      	lsrs	r3, r3, #13
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fe:	3301      	adds	r3, #1
 8001a00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001a0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3748      	adds	r7, #72	@ 0x48
 8001a12:	46bd      	mov	sp, r7
 8001a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	00f42400 	.word	0x00f42400
 8001a20:	007a1200 	.word	0x007a1200
 8001a24:	080029f4 	.word	0x080029f4

08001a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	@ (8001a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	20000000 	.word	0x20000000

08001a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a40:	f7ff fff2 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	@ (8001a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	08002a10 	.word	0x08002a10

08001a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	0adb      	lsrs	r3, r3, #11
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4903      	ldr	r1, [pc, #12]	@ (8001a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	08002a10 	.word	0x08002a10

08001a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a98:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d12c      	bne.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aa4:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e016      	b.n	8001aea <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	6253      	str	r3, [r2, #36]	@ 0x24
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001adc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001af0:	d105      	bne.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001af8:	d101      	bne.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001afa:	2301      	movs	r3, #1
 8001afc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0f      	ldr	r2, [pc, #60]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 0201 	bic.w	r2, r3, #1
 8001b18:	490b      	ldr	r1, [pc, #44]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e042      	b.n	8001be4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fdc8 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2224      	movs	r2, #36	@ 0x24
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f971 	bl	8001e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d175      	bne.n	8001cf8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_UART_Transmit+0x2c>
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e06e      	b.n	8001cfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2221      	movs	r2, #33	@ 0x21
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c2a:	f7fe fef1 	bl	8000a10 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	88fa      	ldrh	r2, [r7, #6]
 8001c34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c44:	d108      	bne.n	8001c58 <HAL_UART_Transmit+0x6c>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d104      	bne.n	8001c58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	e003      	b.n	8001c60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c60:	e02e      	b.n	8001cc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	@ 0x80
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f848 	bl	8001d02 <UART_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e03a      	b.n	8001cfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10b      	bne.n	8001ca2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	e007      	b.n	8001cb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1cb      	bne.n	8001c62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2140      	movs	r1, #64	@ 0x40
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f814 	bl	8001d02 <UART_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e006      	b.n	8001cfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d12:	e03b      	b.n	8001d8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1a:	d037      	beq.n	8001d8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1c:	f7fe fe78 	bl	8000a10 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	6a3a      	ldr	r2, [r7, #32]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d302      	bcc.n	8001d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e03a      	b.n	8001dac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d023      	beq.n	8001d8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b80      	cmp	r3, #128	@ 0x80
 8001d48:	d020      	beq.n	8001d8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b40      	cmp	r3, #64	@ 0x40
 8001d4e:	d01d      	beq.n	8001d8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d116      	bne.n	8001d8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f81d 	bl	8001db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e00f      	b.n	8001dac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4013      	ands	r3, r2
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d0b4      	beq.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b095      	sub	sp, #84	@ 0x54
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	330c      	adds	r3, #12
 8001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc6:	e853 3f00 	ldrex	r3, [r3]
 8001dca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	330c      	adds	r3, #12
 8001dda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ddc:	643a      	str	r2, [r7, #64]	@ 0x40
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001de0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001de2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001de4:	e841 2300 	strex	r3, r2, [r1]
 8001de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e5      	bne.n	8001dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3314      	adds	r3, #20
 8001df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	e853 3f00 	ldrex	r3, [r3]
 8001dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3314      	adds	r3, #20
 8001e0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e18:	e841 2300 	strex	r3, r2, [r1]
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e5      	bne.n	8001df0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d119      	bne.n	8001e60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	330c      	adds	r3, #12
 8001e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	e853 3f00 	ldrex	r3, [r3]
 8001e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f023 0310 	bic.w	r3, r3, #16
 8001e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	330c      	adds	r3, #12
 8001e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e4c:	61ba      	str	r2, [r7, #24]
 8001e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e50:	6979      	ldr	r1, [r7, #20]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	e841 2300 	strex	r3, r2, [r1]
 8001e58:	613b      	str	r3, [r7, #16]
   return(result);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e5      	bne.n	8001e2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e6e:	bf00      	nop
 8001e70:	3754      	adds	r7, #84	@ 0x54
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001eb8:	f023 030c 	bic.w	r3, r3, #12
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a55      	ldr	r2, [pc, #340]	@ (8002038 <UART_SetConfig+0x1c0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d103      	bne.n	8001eee <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ee6:	f7ff fdbd 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	e002      	b.n	8001ef4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001eee:	f7ff fda5 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 8001ef2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001efc:	d14c      	bne.n	8001f98 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	009a      	lsls	r2, r3, #2
 8001f08:	441a      	add	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	4a49      	ldr	r2, [pc, #292]	@ (800203c <UART_SetConfig+0x1c4>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	0119      	lsls	r1, r3, #4
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	009a      	lsls	r2, r3, #2
 8001f28:	441a      	add	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f34:	4b41      	ldr	r3, [pc, #260]	@ (800203c <UART_SetConfig+0x1c4>)
 8001f36:	fba3 0302 	umull	r0, r3, r3, r2
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2064      	movs	r0, #100	@ 0x64
 8001f3e:	fb00 f303 	mul.w	r3, r0, r3
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	3332      	adds	r3, #50	@ 0x32
 8001f48:	4a3c      	ldr	r2, [pc, #240]	@ (800203c <UART_SetConfig+0x1c4>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f56:	4419      	add	r1, r3
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	009a      	lsls	r2, r3, #2
 8001f62:	441a      	add	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f6e:	4b33      	ldr	r3, [pc, #204]	@ (800203c <UART_SetConfig+0x1c4>)
 8001f70:	fba3 0302 	umull	r0, r3, r3, r2
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	2064      	movs	r0, #100	@ 0x64
 8001f78:	fb00 f303 	mul.w	r3, r0, r3
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	3332      	adds	r3, #50	@ 0x32
 8001f82:	4a2e      	ldr	r2, [pc, #184]	@ (800203c <UART_SetConfig+0x1c4>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	f003 0207 	and.w	r2, r3, #7
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	440a      	add	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f96:	e04a      	b.n	800202e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009a      	lsls	r2, r3, #2
 8001fa2:	441a      	add	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4a23      	ldr	r2, [pc, #140]	@ (800203c <UART_SetConfig+0x1c4>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	0119      	lsls	r1, r3, #4
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009a      	lsls	r2, r3, #2
 8001fc2:	441a      	add	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <UART_SetConfig+0x1c4>)
 8001fd0:	fba3 0302 	umull	r0, r3, r3, r2
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	2064      	movs	r0, #100	@ 0x64
 8001fd8:	fb00 f303 	mul.w	r3, r0, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	3332      	adds	r3, #50	@ 0x32
 8001fe2:	4a16      	ldr	r2, [pc, #88]	@ (800203c <UART_SetConfig+0x1c4>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fee:	4419      	add	r1, r3
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009a      	lsls	r2, r3, #2
 8001ffa:	441a      	add	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	fbb2 f2f3 	udiv	r2, r2, r3
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <UART_SetConfig+0x1c4>)
 8002008:	fba3 0302 	umull	r0, r3, r3, r2
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	2064      	movs	r0, #100	@ 0x64
 8002010:	fb00 f303 	mul.w	r3, r0, r3
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	3332      	adds	r3, #50	@ 0x32
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <UART_SetConfig+0x1c4>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	f003 020f 	and.w	r2, r3, #15
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	440a      	add	r2, r1
 800202c:	609a      	str	r2, [r3, #8]
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40013800 	.word	0x40013800
 800203c:	51eb851f 	.word	0x51eb851f

08002040 <std>:
 8002040:	2300      	movs	r3, #0
 8002042:	b510      	push	{r4, lr}
 8002044:	4604      	mov	r4, r0
 8002046:	e9c0 3300 	strd	r3, r3, [r0]
 800204a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800204e:	6083      	str	r3, [r0, #8]
 8002050:	8181      	strh	r1, [r0, #12]
 8002052:	6643      	str	r3, [r0, #100]	@ 0x64
 8002054:	81c2      	strh	r2, [r0, #14]
 8002056:	6183      	str	r3, [r0, #24]
 8002058:	4619      	mov	r1, r3
 800205a:	2208      	movs	r2, #8
 800205c:	305c      	adds	r0, #92	@ 0x5c
 800205e:	f000 f9e7 	bl	8002430 <memset>
 8002062:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <std+0x58>)
 8002064:	6224      	str	r4, [r4, #32]
 8002066:	6263      	str	r3, [r4, #36]	@ 0x24
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <std+0x5c>)
 800206a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <std+0x60>)
 800206e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <std+0x64>)
 8002072:	6323      	str	r3, [r4, #48]	@ 0x30
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <std+0x68>)
 8002076:	429c      	cmp	r4, r3
 8002078:	d006      	beq.n	8002088 <std+0x48>
 800207a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800207e:	4294      	cmp	r4, r2
 8002080:	d002      	beq.n	8002088 <std+0x48>
 8002082:	33d0      	adds	r3, #208	@ 0xd0
 8002084:	429c      	cmp	r4, r3
 8002086:	d105      	bne.n	8002094 <std+0x54>
 8002088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800208c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002090:	f000 ba46 	b.w	8002520 <__retarget_lock_init_recursive>
 8002094:	bd10      	pop	{r4, pc}
 8002096:	bf00      	nop
 8002098:	08002281 	.word	0x08002281
 800209c:	080022a3 	.word	0x080022a3
 80020a0:	080022db 	.word	0x080022db
 80020a4:	080022ff 	.word	0x080022ff
 80020a8:	200000d4 	.word	0x200000d4

080020ac <stdio_exit_handler>:
 80020ac:	4a02      	ldr	r2, [pc, #8]	@ (80020b8 <stdio_exit_handler+0xc>)
 80020ae:	4903      	ldr	r1, [pc, #12]	@ (80020bc <stdio_exit_handler+0x10>)
 80020b0:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <stdio_exit_handler+0x14>)
 80020b2:	f000 b869 	b.w	8002188 <_fwalk_sglue>
 80020b6:	bf00      	nop
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	08002815 	.word	0x08002815
 80020c0:	2000001c 	.word	0x2000001c

080020c4 <cleanup_stdio>:
 80020c4:	6841      	ldr	r1, [r0, #4]
 80020c6:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <cleanup_stdio+0x34>)
 80020c8:	b510      	push	{r4, lr}
 80020ca:	4299      	cmp	r1, r3
 80020cc:	4604      	mov	r4, r0
 80020ce:	d001      	beq.n	80020d4 <cleanup_stdio+0x10>
 80020d0:	f000 fba0 	bl	8002814 <_fflush_r>
 80020d4:	68a1      	ldr	r1, [r4, #8]
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <cleanup_stdio+0x38>)
 80020d8:	4299      	cmp	r1, r3
 80020da:	d002      	beq.n	80020e2 <cleanup_stdio+0x1e>
 80020dc:	4620      	mov	r0, r4
 80020de:	f000 fb99 	bl	8002814 <_fflush_r>
 80020e2:	68e1      	ldr	r1, [r4, #12]
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <cleanup_stdio+0x3c>)
 80020e6:	4299      	cmp	r1, r3
 80020e8:	d004      	beq.n	80020f4 <cleanup_stdio+0x30>
 80020ea:	4620      	mov	r0, r4
 80020ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020f0:	f000 bb90 	b.w	8002814 <_fflush_r>
 80020f4:	bd10      	pop	{r4, pc}
 80020f6:	bf00      	nop
 80020f8:	200000d4 	.word	0x200000d4
 80020fc:	2000013c 	.word	0x2000013c
 8002100:	200001a4 	.word	0x200001a4

08002104 <global_stdio_init.part.0>:
 8002104:	b510      	push	{r4, lr}
 8002106:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <global_stdio_init.part.0+0x30>)
 8002108:	4c0b      	ldr	r4, [pc, #44]	@ (8002138 <global_stdio_init.part.0+0x34>)
 800210a:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <global_stdio_init.part.0+0x38>)
 800210c:	4620      	mov	r0, r4
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	2104      	movs	r1, #4
 8002112:	2200      	movs	r2, #0
 8002114:	f7ff ff94 	bl	8002040 <std>
 8002118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800211c:	2201      	movs	r2, #1
 800211e:	2109      	movs	r1, #9
 8002120:	f7ff ff8e 	bl	8002040 <std>
 8002124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002128:	2202      	movs	r2, #2
 800212a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800212e:	2112      	movs	r1, #18
 8002130:	f7ff bf86 	b.w	8002040 <std>
 8002134:	2000020c 	.word	0x2000020c
 8002138:	200000d4 	.word	0x200000d4
 800213c:	080020ad 	.word	0x080020ad

08002140 <__sfp_lock_acquire>:
 8002140:	4801      	ldr	r0, [pc, #4]	@ (8002148 <__sfp_lock_acquire+0x8>)
 8002142:	f000 b9ee 	b.w	8002522 <__retarget_lock_acquire_recursive>
 8002146:	bf00      	nop
 8002148:	20000215 	.word	0x20000215

0800214c <__sfp_lock_release>:
 800214c:	4801      	ldr	r0, [pc, #4]	@ (8002154 <__sfp_lock_release+0x8>)
 800214e:	f000 b9e9 	b.w	8002524 <__retarget_lock_release_recursive>
 8002152:	bf00      	nop
 8002154:	20000215 	.word	0x20000215

08002158 <__sinit>:
 8002158:	b510      	push	{r4, lr}
 800215a:	4604      	mov	r4, r0
 800215c:	f7ff fff0 	bl	8002140 <__sfp_lock_acquire>
 8002160:	6a23      	ldr	r3, [r4, #32]
 8002162:	b11b      	cbz	r3, 800216c <__sinit+0x14>
 8002164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002168:	f7ff bff0 	b.w	800214c <__sfp_lock_release>
 800216c:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <__sinit+0x28>)
 800216e:	6223      	str	r3, [r4, #32]
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__sinit+0x2c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f5      	bne.n	8002164 <__sinit+0xc>
 8002178:	f7ff ffc4 	bl	8002104 <global_stdio_init.part.0>
 800217c:	e7f2      	b.n	8002164 <__sinit+0xc>
 800217e:	bf00      	nop
 8002180:	080020c5 	.word	0x080020c5
 8002184:	2000020c 	.word	0x2000020c

08002188 <_fwalk_sglue>:
 8002188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800218c:	4607      	mov	r7, r0
 800218e:	4688      	mov	r8, r1
 8002190:	4614      	mov	r4, r2
 8002192:	2600      	movs	r6, #0
 8002194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002198:	f1b9 0901 	subs.w	r9, r9, #1
 800219c:	d505      	bpl.n	80021aa <_fwalk_sglue+0x22>
 800219e:	6824      	ldr	r4, [r4, #0]
 80021a0:	2c00      	cmp	r4, #0
 80021a2:	d1f7      	bne.n	8002194 <_fwalk_sglue+0xc>
 80021a4:	4630      	mov	r0, r6
 80021a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021aa:	89ab      	ldrh	r3, [r5, #12]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d907      	bls.n	80021c0 <_fwalk_sglue+0x38>
 80021b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021b4:	3301      	adds	r3, #1
 80021b6:	d003      	beq.n	80021c0 <_fwalk_sglue+0x38>
 80021b8:	4629      	mov	r1, r5
 80021ba:	4638      	mov	r0, r7
 80021bc:	47c0      	blx	r8
 80021be:	4306      	orrs	r6, r0
 80021c0:	3568      	adds	r5, #104	@ 0x68
 80021c2:	e7e9      	b.n	8002198 <_fwalk_sglue+0x10>

080021c4 <_puts_r>:
 80021c4:	6a03      	ldr	r3, [r0, #32]
 80021c6:	b570      	push	{r4, r5, r6, lr}
 80021c8:	4605      	mov	r5, r0
 80021ca:	460e      	mov	r6, r1
 80021cc:	6884      	ldr	r4, [r0, #8]
 80021ce:	b90b      	cbnz	r3, 80021d4 <_puts_r+0x10>
 80021d0:	f7ff ffc2 	bl	8002158 <__sinit>
 80021d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021d6:	07db      	lsls	r3, r3, #31
 80021d8:	d405      	bmi.n	80021e6 <_puts_r+0x22>
 80021da:	89a3      	ldrh	r3, [r4, #12]
 80021dc:	0598      	lsls	r0, r3, #22
 80021de:	d402      	bmi.n	80021e6 <_puts_r+0x22>
 80021e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021e2:	f000 f99e 	bl	8002522 <__retarget_lock_acquire_recursive>
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	0719      	lsls	r1, r3, #28
 80021ea:	d502      	bpl.n	80021f2 <_puts_r+0x2e>
 80021ec:	6923      	ldr	r3, [r4, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d135      	bne.n	800225e <_puts_r+0x9a>
 80021f2:	4621      	mov	r1, r4
 80021f4:	4628      	mov	r0, r5
 80021f6:	f000 f8c5 	bl	8002384 <__swsetup_r>
 80021fa:	b380      	cbz	r0, 800225e <_puts_r+0x9a>
 80021fc:	f04f 35ff 	mov.w	r5, #4294967295
 8002200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002202:	07da      	lsls	r2, r3, #31
 8002204:	d405      	bmi.n	8002212 <_puts_r+0x4e>
 8002206:	89a3      	ldrh	r3, [r4, #12]
 8002208:	059b      	lsls	r3, r3, #22
 800220a:	d402      	bmi.n	8002212 <_puts_r+0x4e>
 800220c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800220e:	f000 f989 	bl	8002524 <__retarget_lock_release_recursive>
 8002212:	4628      	mov	r0, r5
 8002214:	bd70      	pop	{r4, r5, r6, pc}
 8002216:	2b00      	cmp	r3, #0
 8002218:	da04      	bge.n	8002224 <_puts_r+0x60>
 800221a:	69a2      	ldr	r2, [r4, #24]
 800221c:	429a      	cmp	r2, r3
 800221e:	dc17      	bgt.n	8002250 <_puts_r+0x8c>
 8002220:	290a      	cmp	r1, #10
 8002222:	d015      	beq.n	8002250 <_puts_r+0x8c>
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	6022      	str	r2, [r4, #0]
 800222a:	7019      	strb	r1, [r3, #0]
 800222c:	68a3      	ldr	r3, [r4, #8]
 800222e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002232:	3b01      	subs	r3, #1
 8002234:	60a3      	str	r3, [r4, #8]
 8002236:	2900      	cmp	r1, #0
 8002238:	d1ed      	bne.n	8002216 <_puts_r+0x52>
 800223a:	2b00      	cmp	r3, #0
 800223c:	da11      	bge.n	8002262 <_puts_r+0x9e>
 800223e:	4622      	mov	r2, r4
 8002240:	210a      	movs	r1, #10
 8002242:	4628      	mov	r0, r5
 8002244:	f000 f85f 	bl	8002306 <__swbuf_r>
 8002248:	3001      	adds	r0, #1
 800224a:	d0d7      	beq.n	80021fc <_puts_r+0x38>
 800224c:	250a      	movs	r5, #10
 800224e:	e7d7      	b.n	8002200 <_puts_r+0x3c>
 8002250:	4622      	mov	r2, r4
 8002252:	4628      	mov	r0, r5
 8002254:	f000 f857 	bl	8002306 <__swbuf_r>
 8002258:	3001      	adds	r0, #1
 800225a:	d1e7      	bne.n	800222c <_puts_r+0x68>
 800225c:	e7ce      	b.n	80021fc <_puts_r+0x38>
 800225e:	3e01      	subs	r6, #1
 8002260:	e7e4      	b.n	800222c <_puts_r+0x68>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	6022      	str	r2, [r4, #0]
 8002268:	220a      	movs	r2, #10
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e7ee      	b.n	800224c <_puts_r+0x88>
	...

08002270 <puts>:
 8002270:	4b02      	ldr	r3, [pc, #8]	@ (800227c <puts+0xc>)
 8002272:	4601      	mov	r1, r0
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	f7ff bfa5 	b.w	80021c4 <_puts_r>
 800227a:	bf00      	nop
 800227c:	20000018 	.word	0x20000018

08002280 <__sread>:
 8002280:	b510      	push	{r4, lr}
 8002282:	460c      	mov	r4, r1
 8002284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002288:	f000 f8fc 	bl	8002484 <_read_r>
 800228c:	2800      	cmp	r0, #0
 800228e:	bfab      	itete	ge
 8002290:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002292:	89a3      	ldrhlt	r3, [r4, #12]
 8002294:	181b      	addge	r3, r3, r0
 8002296:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800229a:	bfac      	ite	ge
 800229c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800229e:	81a3      	strhlt	r3, [r4, #12]
 80022a0:	bd10      	pop	{r4, pc}

080022a2 <__swrite>:
 80022a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a6:	461f      	mov	r7, r3
 80022a8:	898b      	ldrh	r3, [r1, #12]
 80022aa:	4605      	mov	r5, r0
 80022ac:	05db      	lsls	r3, r3, #23
 80022ae:	460c      	mov	r4, r1
 80022b0:	4616      	mov	r6, r2
 80022b2:	d505      	bpl.n	80022c0 <__swrite+0x1e>
 80022b4:	2302      	movs	r3, #2
 80022b6:	2200      	movs	r2, #0
 80022b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022bc:	f000 f8d0 	bl	8002460 <_lseek_r>
 80022c0:	89a3      	ldrh	r3, [r4, #12]
 80022c2:	4632      	mov	r2, r6
 80022c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022c8:	81a3      	strh	r3, [r4, #12]
 80022ca:	4628      	mov	r0, r5
 80022cc:	463b      	mov	r3, r7
 80022ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022d6:	f000 b8e7 	b.w	80024a8 <_write_r>

080022da <__sseek>:
 80022da:	b510      	push	{r4, lr}
 80022dc:	460c      	mov	r4, r1
 80022de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e2:	f000 f8bd 	bl	8002460 <_lseek_r>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	bf15      	itete	ne
 80022ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80022ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80022f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80022f6:	81a3      	strheq	r3, [r4, #12]
 80022f8:	bf18      	it	ne
 80022fa:	81a3      	strhne	r3, [r4, #12]
 80022fc:	bd10      	pop	{r4, pc}

080022fe <__sclose>:
 80022fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002302:	f000 b89d 	b.w	8002440 <_close_r>

08002306 <__swbuf_r>:
 8002306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002308:	460e      	mov	r6, r1
 800230a:	4614      	mov	r4, r2
 800230c:	4605      	mov	r5, r0
 800230e:	b118      	cbz	r0, 8002318 <__swbuf_r+0x12>
 8002310:	6a03      	ldr	r3, [r0, #32]
 8002312:	b90b      	cbnz	r3, 8002318 <__swbuf_r+0x12>
 8002314:	f7ff ff20 	bl	8002158 <__sinit>
 8002318:	69a3      	ldr	r3, [r4, #24]
 800231a:	60a3      	str	r3, [r4, #8]
 800231c:	89a3      	ldrh	r3, [r4, #12]
 800231e:	071a      	lsls	r2, r3, #28
 8002320:	d501      	bpl.n	8002326 <__swbuf_r+0x20>
 8002322:	6923      	ldr	r3, [r4, #16]
 8002324:	b943      	cbnz	r3, 8002338 <__swbuf_r+0x32>
 8002326:	4621      	mov	r1, r4
 8002328:	4628      	mov	r0, r5
 800232a:	f000 f82b 	bl	8002384 <__swsetup_r>
 800232e:	b118      	cbz	r0, 8002338 <__swbuf_r+0x32>
 8002330:	f04f 37ff 	mov.w	r7, #4294967295
 8002334:	4638      	mov	r0, r7
 8002336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	6922      	ldr	r2, [r4, #16]
 800233c:	b2f6      	uxtb	r6, r6
 800233e:	1a98      	subs	r0, r3, r2
 8002340:	6963      	ldr	r3, [r4, #20]
 8002342:	4637      	mov	r7, r6
 8002344:	4283      	cmp	r3, r0
 8002346:	dc05      	bgt.n	8002354 <__swbuf_r+0x4e>
 8002348:	4621      	mov	r1, r4
 800234a:	4628      	mov	r0, r5
 800234c:	f000 fa62 	bl	8002814 <_fflush_r>
 8002350:	2800      	cmp	r0, #0
 8002352:	d1ed      	bne.n	8002330 <__swbuf_r+0x2a>
 8002354:	68a3      	ldr	r3, [r4, #8]
 8002356:	3b01      	subs	r3, #1
 8002358:	60a3      	str	r3, [r4, #8]
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	6022      	str	r2, [r4, #0]
 8002360:	701e      	strb	r6, [r3, #0]
 8002362:	6962      	ldr	r2, [r4, #20]
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	429a      	cmp	r2, r3
 8002368:	d004      	beq.n	8002374 <__swbuf_r+0x6e>
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	07db      	lsls	r3, r3, #31
 800236e:	d5e1      	bpl.n	8002334 <__swbuf_r+0x2e>
 8002370:	2e0a      	cmp	r6, #10
 8002372:	d1df      	bne.n	8002334 <__swbuf_r+0x2e>
 8002374:	4621      	mov	r1, r4
 8002376:	4628      	mov	r0, r5
 8002378:	f000 fa4c 	bl	8002814 <_fflush_r>
 800237c:	2800      	cmp	r0, #0
 800237e:	d0d9      	beq.n	8002334 <__swbuf_r+0x2e>
 8002380:	e7d6      	b.n	8002330 <__swbuf_r+0x2a>
	...

08002384 <__swsetup_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4b29      	ldr	r3, [pc, #164]	@ (800242c <__swsetup_r+0xa8>)
 8002388:	4605      	mov	r5, r0
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	460c      	mov	r4, r1
 800238e:	b118      	cbz	r0, 8002398 <__swsetup_r+0x14>
 8002390:	6a03      	ldr	r3, [r0, #32]
 8002392:	b90b      	cbnz	r3, 8002398 <__swsetup_r+0x14>
 8002394:	f7ff fee0 	bl	8002158 <__sinit>
 8002398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800239c:	0719      	lsls	r1, r3, #28
 800239e:	d422      	bmi.n	80023e6 <__swsetup_r+0x62>
 80023a0:	06da      	lsls	r2, r3, #27
 80023a2:	d407      	bmi.n	80023b4 <__swsetup_r+0x30>
 80023a4:	2209      	movs	r2, #9
 80023a6:	602a      	str	r2, [r5, #0]
 80023a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	81a3      	strh	r3, [r4, #12]
 80023b2:	e033      	b.n	800241c <__swsetup_r+0x98>
 80023b4:	0758      	lsls	r0, r3, #29
 80023b6:	d512      	bpl.n	80023de <__swsetup_r+0x5a>
 80023b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023ba:	b141      	cbz	r1, 80023ce <__swsetup_r+0x4a>
 80023bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023c0:	4299      	cmp	r1, r3
 80023c2:	d002      	beq.n	80023ca <__swsetup_r+0x46>
 80023c4:	4628      	mov	r0, r5
 80023c6:	f000 f8af 	bl	8002528 <_free_r>
 80023ca:	2300      	movs	r3, #0
 80023cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80023d4:	81a3      	strh	r3, [r4, #12]
 80023d6:	2300      	movs	r3, #0
 80023d8:	6063      	str	r3, [r4, #4]
 80023da:	6923      	ldr	r3, [r4, #16]
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	89a3      	ldrh	r3, [r4, #12]
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	81a3      	strh	r3, [r4, #12]
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	b94b      	cbnz	r3, 80023fe <__swsetup_r+0x7a>
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f4:	d003      	beq.n	80023fe <__swsetup_r+0x7a>
 80023f6:	4621      	mov	r1, r4
 80023f8:	4628      	mov	r0, r5
 80023fa:	f000 fa58 	bl	80028ae <__smakebuf_r>
 80023fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002402:	f013 0201 	ands.w	r2, r3, #1
 8002406:	d00a      	beq.n	800241e <__swsetup_r+0x9a>
 8002408:	2200      	movs	r2, #0
 800240a:	60a2      	str	r2, [r4, #8]
 800240c:	6962      	ldr	r2, [r4, #20]
 800240e:	4252      	negs	r2, r2
 8002410:	61a2      	str	r2, [r4, #24]
 8002412:	6922      	ldr	r2, [r4, #16]
 8002414:	b942      	cbnz	r2, 8002428 <__swsetup_r+0xa4>
 8002416:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800241a:	d1c5      	bne.n	80023a8 <__swsetup_r+0x24>
 800241c:	bd38      	pop	{r3, r4, r5, pc}
 800241e:	0799      	lsls	r1, r3, #30
 8002420:	bf58      	it	pl
 8002422:	6962      	ldrpl	r2, [r4, #20]
 8002424:	60a2      	str	r2, [r4, #8]
 8002426:	e7f4      	b.n	8002412 <__swsetup_r+0x8e>
 8002428:	2000      	movs	r0, #0
 800242a:	e7f7      	b.n	800241c <__swsetup_r+0x98>
 800242c:	20000018 	.word	0x20000018

08002430 <memset>:
 8002430:	4603      	mov	r3, r0
 8002432:	4402      	add	r2, r0
 8002434:	4293      	cmp	r3, r2
 8002436:	d100      	bne.n	800243a <memset+0xa>
 8002438:	4770      	bx	lr
 800243a:	f803 1b01 	strb.w	r1, [r3], #1
 800243e:	e7f9      	b.n	8002434 <memset+0x4>

08002440 <_close_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	2300      	movs	r3, #0
 8002444:	4d05      	ldr	r5, [pc, #20]	@ (800245c <_close_r+0x1c>)
 8002446:	4604      	mov	r4, r0
 8002448:	4608      	mov	r0, r1
 800244a:	602b      	str	r3, [r5, #0]
 800244c:	f7fe f9e9 	bl	8000822 <_close>
 8002450:	1c43      	adds	r3, r0, #1
 8002452:	d102      	bne.n	800245a <_close_r+0x1a>
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	b103      	cbz	r3, 800245a <_close_r+0x1a>
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	20000210 	.word	0x20000210

08002460 <_lseek_r>:
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4604      	mov	r4, r0
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	2200      	movs	r2, #0
 800246a:	4d05      	ldr	r5, [pc, #20]	@ (8002480 <_lseek_r+0x20>)
 800246c:	602a      	str	r2, [r5, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	f7fe f9fb 	bl	800086a <_lseek>
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	d102      	bne.n	800247e <_lseek_r+0x1e>
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	b103      	cbz	r3, 800247e <_lseek_r+0x1e>
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	bd38      	pop	{r3, r4, r5, pc}
 8002480:	20000210 	.word	0x20000210

08002484 <_read_r>:
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	2200      	movs	r2, #0
 800248e:	4d05      	ldr	r5, [pc, #20]	@ (80024a4 <_read_r+0x20>)
 8002490:	602a      	str	r2, [r5, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	f7fe f9a8 	bl	80007e8 <_read>
 8002498:	1c43      	adds	r3, r0, #1
 800249a:	d102      	bne.n	80024a2 <_read_r+0x1e>
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	b103      	cbz	r3, 80024a2 <_read_r+0x1e>
 80024a0:	6023      	str	r3, [r4, #0]
 80024a2:	bd38      	pop	{r3, r4, r5, pc}
 80024a4:	20000210 	.word	0x20000210

080024a8 <_write_r>:
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	4604      	mov	r4, r0
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	2200      	movs	r2, #0
 80024b2:	4d05      	ldr	r5, [pc, #20]	@ (80024c8 <_write_r+0x20>)
 80024b4:	602a      	str	r2, [r5, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f7fe f80c 	bl	80004d4 <_write>
 80024bc:	1c43      	adds	r3, r0, #1
 80024be:	d102      	bne.n	80024c6 <_write_r+0x1e>
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	b103      	cbz	r3, 80024c6 <_write_r+0x1e>
 80024c4:	6023      	str	r3, [r4, #0]
 80024c6:	bd38      	pop	{r3, r4, r5, pc}
 80024c8:	20000210 	.word	0x20000210

080024cc <__errno>:
 80024cc:	4b01      	ldr	r3, [pc, #4]	@ (80024d4 <__errno+0x8>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000018 	.word	0x20000018

080024d8 <__libc_init_array>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	2600      	movs	r6, #0
 80024dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002510 <__libc_init_array+0x38>)
 80024de:	4c0d      	ldr	r4, [pc, #52]	@ (8002514 <__libc_init_array+0x3c>)
 80024e0:	1b64      	subs	r4, r4, r5
 80024e2:	10a4      	asrs	r4, r4, #2
 80024e4:	42a6      	cmp	r6, r4
 80024e6:	d109      	bne.n	80024fc <__libc_init_array+0x24>
 80024e8:	f000 fa50 	bl	800298c <_init>
 80024ec:	2600      	movs	r6, #0
 80024ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002518 <__libc_init_array+0x40>)
 80024f0:	4c0a      	ldr	r4, [pc, #40]	@ (800251c <__libc_init_array+0x44>)
 80024f2:	1b64      	subs	r4, r4, r5
 80024f4:	10a4      	asrs	r4, r4, #2
 80024f6:	42a6      	cmp	r6, r4
 80024f8:	d105      	bne.n	8002506 <__libc_init_array+0x2e>
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002500:	4798      	blx	r3
 8002502:	3601      	adds	r6, #1
 8002504:	e7ee      	b.n	80024e4 <__libc_init_array+0xc>
 8002506:	f855 3b04 	ldr.w	r3, [r5], #4
 800250a:	4798      	blx	r3
 800250c:	3601      	adds	r6, #1
 800250e:	e7f2      	b.n	80024f6 <__libc_init_array+0x1e>
 8002510:	08002a20 	.word	0x08002a20
 8002514:	08002a20 	.word	0x08002a20
 8002518:	08002a20 	.word	0x08002a20
 800251c:	08002a24 	.word	0x08002a24

08002520 <__retarget_lock_init_recursive>:
 8002520:	4770      	bx	lr

08002522 <__retarget_lock_acquire_recursive>:
 8002522:	4770      	bx	lr

08002524 <__retarget_lock_release_recursive>:
 8002524:	4770      	bx	lr
	...

08002528 <_free_r>:
 8002528:	b538      	push	{r3, r4, r5, lr}
 800252a:	4605      	mov	r5, r0
 800252c:	2900      	cmp	r1, #0
 800252e:	d040      	beq.n	80025b2 <_free_r+0x8a>
 8002530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002534:	1f0c      	subs	r4, r1, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	bfb8      	it	lt
 800253a:	18e4      	addlt	r4, r4, r3
 800253c:	f000 f8de 	bl	80026fc <__malloc_lock>
 8002540:	4a1c      	ldr	r2, [pc, #112]	@ (80025b4 <_free_r+0x8c>)
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	b933      	cbnz	r3, 8002554 <_free_r+0x2c>
 8002546:	6063      	str	r3, [r4, #4]
 8002548:	6014      	str	r4, [r2, #0]
 800254a:	4628      	mov	r0, r5
 800254c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002550:	f000 b8da 	b.w	8002708 <__malloc_unlock>
 8002554:	42a3      	cmp	r3, r4
 8002556:	d908      	bls.n	800256a <_free_r+0x42>
 8002558:	6820      	ldr	r0, [r4, #0]
 800255a:	1821      	adds	r1, r4, r0
 800255c:	428b      	cmp	r3, r1
 800255e:	bf01      	itttt	eq
 8002560:	6819      	ldreq	r1, [r3, #0]
 8002562:	685b      	ldreq	r3, [r3, #4]
 8002564:	1809      	addeq	r1, r1, r0
 8002566:	6021      	streq	r1, [r4, #0]
 8002568:	e7ed      	b.n	8002546 <_free_r+0x1e>
 800256a:	461a      	mov	r2, r3
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	b10b      	cbz	r3, 8002574 <_free_r+0x4c>
 8002570:	42a3      	cmp	r3, r4
 8002572:	d9fa      	bls.n	800256a <_free_r+0x42>
 8002574:	6811      	ldr	r1, [r2, #0]
 8002576:	1850      	adds	r0, r2, r1
 8002578:	42a0      	cmp	r0, r4
 800257a:	d10b      	bne.n	8002594 <_free_r+0x6c>
 800257c:	6820      	ldr	r0, [r4, #0]
 800257e:	4401      	add	r1, r0
 8002580:	1850      	adds	r0, r2, r1
 8002582:	4283      	cmp	r3, r0
 8002584:	6011      	str	r1, [r2, #0]
 8002586:	d1e0      	bne.n	800254a <_free_r+0x22>
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4408      	add	r0, r1
 800258e:	6010      	str	r0, [r2, #0]
 8002590:	6053      	str	r3, [r2, #4]
 8002592:	e7da      	b.n	800254a <_free_r+0x22>
 8002594:	d902      	bls.n	800259c <_free_r+0x74>
 8002596:	230c      	movs	r3, #12
 8002598:	602b      	str	r3, [r5, #0]
 800259a:	e7d6      	b.n	800254a <_free_r+0x22>
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	1821      	adds	r1, r4, r0
 80025a0:	428b      	cmp	r3, r1
 80025a2:	bf01      	itttt	eq
 80025a4:	6819      	ldreq	r1, [r3, #0]
 80025a6:	685b      	ldreq	r3, [r3, #4]
 80025a8:	1809      	addeq	r1, r1, r0
 80025aa:	6021      	streq	r1, [r4, #0]
 80025ac:	6063      	str	r3, [r4, #4]
 80025ae:	6054      	str	r4, [r2, #4]
 80025b0:	e7cb      	b.n	800254a <_free_r+0x22>
 80025b2:	bd38      	pop	{r3, r4, r5, pc}
 80025b4:	2000021c 	.word	0x2000021c

080025b8 <sbrk_aligned>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	4e0f      	ldr	r6, [pc, #60]	@ (80025f8 <sbrk_aligned+0x40>)
 80025bc:	460c      	mov	r4, r1
 80025be:	6831      	ldr	r1, [r6, #0]
 80025c0:	4605      	mov	r5, r0
 80025c2:	b911      	cbnz	r1, 80025ca <sbrk_aligned+0x12>
 80025c4:	f000 f9d2 	bl	800296c <_sbrk_r>
 80025c8:	6030      	str	r0, [r6, #0]
 80025ca:	4621      	mov	r1, r4
 80025cc:	4628      	mov	r0, r5
 80025ce:	f000 f9cd 	bl	800296c <_sbrk_r>
 80025d2:	1c43      	adds	r3, r0, #1
 80025d4:	d103      	bne.n	80025de <sbrk_aligned+0x26>
 80025d6:	f04f 34ff 	mov.w	r4, #4294967295
 80025da:	4620      	mov	r0, r4
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
 80025de:	1cc4      	adds	r4, r0, #3
 80025e0:	f024 0403 	bic.w	r4, r4, #3
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	d0f8      	beq.n	80025da <sbrk_aligned+0x22>
 80025e8:	1a21      	subs	r1, r4, r0
 80025ea:	4628      	mov	r0, r5
 80025ec:	f000 f9be 	bl	800296c <_sbrk_r>
 80025f0:	3001      	adds	r0, #1
 80025f2:	d1f2      	bne.n	80025da <sbrk_aligned+0x22>
 80025f4:	e7ef      	b.n	80025d6 <sbrk_aligned+0x1e>
 80025f6:	bf00      	nop
 80025f8:	20000218 	.word	0x20000218

080025fc <_malloc_r>:
 80025fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002600:	1ccd      	adds	r5, r1, #3
 8002602:	f025 0503 	bic.w	r5, r5, #3
 8002606:	3508      	adds	r5, #8
 8002608:	2d0c      	cmp	r5, #12
 800260a:	bf38      	it	cc
 800260c:	250c      	movcc	r5, #12
 800260e:	2d00      	cmp	r5, #0
 8002610:	4606      	mov	r6, r0
 8002612:	db01      	blt.n	8002618 <_malloc_r+0x1c>
 8002614:	42a9      	cmp	r1, r5
 8002616:	d904      	bls.n	8002622 <_malloc_r+0x26>
 8002618:	230c      	movs	r3, #12
 800261a:	6033      	str	r3, [r6, #0]
 800261c:	2000      	movs	r0, #0
 800261e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002622:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80026f8 <_malloc_r+0xfc>
 8002626:	f000 f869 	bl	80026fc <__malloc_lock>
 800262a:	f8d8 3000 	ldr.w	r3, [r8]
 800262e:	461c      	mov	r4, r3
 8002630:	bb44      	cbnz	r4, 8002684 <_malloc_r+0x88>
 8002632:	4629      	mov	r1, r5
 8002634:	4630      	mov	r0, r6
 8002636:	f7ff ffbf 	bl	80025b8 <sbrk_aligned>
 800263a:	1c43      	adds	r3, r0, #1
 800263c:	4604      	mov	r4, r0
 800263e:	d158      	bne.n	80026f2 <_malloc_r+0xf6>
 8002640:	f8d8 4000 	ldr.w	r4, [r8]
 8002644:	4627      	mov	r7, r4
 8002646:	2f00      	cmp	r7, #0
 8002648:	d143      	bne.n	80026d2 <_malloc_r+0xd6>
 800264a:	2c00      	cmp	r4, #0
 800264c:	d04b      	beq.n	80026e6 <_malloc_r+0xea>
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	4639      	mov	r1, r7
 8002652:	4630      	mov	r0, r6
 8002654:	eb04 0903 	add.w	r9, r4, r3
 8002658:	f000 f988 	bl	800296c <_sbrk_r>
 800265c:	4581      	cmp	r9, r0
 800265e:	d142      	bne.n	80026e6 <_malloc_r+0xea>
 8002660:	6821      	ldr	r1, [r4, #0]
 8002662:	4630      	mov	r0, r6
 8002664:	1a6d      	subs	r5, r5, r1
 8002666:	4629      	mov	r1, r5
 8002668:	f7ff ffa6 	bl	80025b8 <sbrk_aligned>
 800266c:	3001      	adds	r0, #1
 800266e:	d03a      	beq.n	80026e6 <_malloc_r+0xea>
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	442b      	add	r3, r5
 8002674:	6023      	str	r3, [r4, #0]
 8002676:	f8d8 3000 	ldr.w	r3, [r8]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	bb62      	cbnz	r2, 80026d8 <_malloc_r+0xdc>
 800267e:	f8c8 7000 	str.w	r7, [r8]
 8002682:	e00f      	b.n	80026a4 <_malloc_r+0xa8>
 8002684:	6822      	ldr	r2, [r4, #0]
 8002686:	1b52      	subs	r2, r2, r5
 8002688:	d420      	bmi.n	80026cc <_malloc_r+0xd0>
 800268a:	2a0b      	cmp	r2, #11
 800268c:	d917      	bls.n	80026be <_malloc_r+0xc2>
 800268e:	1961      	adds	r1, r4, r5
 8002690:	42a3      	cmp	r3, r4
 8002692:	6025      	str	r5, [r4, #0]
 8002694:	bf18      	it	ne
 8002696:	6059      	strne	r1, [r3, #4]
 8002698:	6863      	ldr	r3, [r4, #4]
 800269a:	bf08      	it	eq
 800269c:	f8c8 1000 	streq.w	r1, [r8]
 80026a0:	5162      	str	r2, [r4, r5]
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	4630      	mov	r0, r6
 80026a6:	f000 f82f 	bl	8002708 <__malloc_unlock>
 80026aa:	f104 000b 	add.w	r0, r4, #11
 80026ae:	1d23      	adds	r3, r4, #4
 80026b0:	f020 0007 	bic.w	r0, r0, #7
 80026b4:	1ac2      	subs	r2, r0, r3
 80026b6:	bf1c      	itt	ne
 80026b8:	1a1b      	subne	r3, r3, r0
 80026ba:	50a3      	strne	r3, [r4, r2]
 80026bc:	e7af      	b.n	800261e <_malloc_r+0x22>
 80026be:	6862      	ldr	r2, [r4, #4]
 80026c0:	42a3      	cmp	r3, r4
 80026c2:	bf0c      	ite	eq
 80026c4:	f8c8 2000 	streq.w	r2, [r8]
 80026c8:	605a      	strne	r2, [r3, #4]
 80026ca:	e7eb      	b.n	80026a4 <_malloc_r+0xa8>
 80026cc:	4623      	mov	r3, r4
 80026ce:	6864      	ldr	r4, [r4, #4]
 80026d0:	e7ae      	b.n	8002630 <_malloc_r+0x34>
 80026d2:	463c      	mov	r4, r7
 80026d4:	687f      	ldr	r7, [r7, #4]
 80026d6:	e7b6      	b.n	8002646 <_malloc_r+0x4a>
 80026d8:	461a      	mov	r2, r3
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	42a3      	cmp	r3, r4
 80026de:	d1fb      	bne.n	80026d8 <_malloc_r+0xdc>
 80026e0:	2300      	movs	r3, #0
 80026e2:	6053      	str	r3, [r2, #4]
 80026e4:	e7de      	b.n	80026a4 <_malloc_r+0xa8>
 80026e6:	230c      	movs	r3, #12
 80026e8:	4630      	mov	r0, r6
 80026ea:	6033      	str	r3, [r6, #0]
 80026ec:	f000 f80c 	bl	8002708 <__malloc_unlock>
 80026f0:	e794      	b.n	800261c <_malloc_r+0x20>
 80026f2:	6005      	str	r5, [r0, #0]
 80026f4:	e7d6      	b.n	80026a4 <_malloc_r+0xa8>
 80026f6:	bf00      	nop
 80026f8:	2000021c 	.word	0x2000021c

080026fc <__malloc_lock>:
 80026fc:	4801      	ldr	r0, [pc, #4]	@ (8002704 <__malloc_lock+0x8>)
 80026fe:	f7ff bf10 	b.w	8002522 <__retarget_lock_acquire_recursive>
 8002702:	bf00      	nop
 8002704:	20000214 	.word	0x20000214

08002708 <__malloc_unlock>:
 8002708:	4801      	ldr	r0, [pc, #4]	@ (8002710 <__malloc_unlock+0x8>)
 800270a:	f7ff bf0b 	b.w	8002524 <__retarget_lock_release_recursive>
 800270e:	bf00      	nop
 8002710:	20000214 	.word	0x20000214

08002714 <__sflush_r>:
 8002714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	0716      	lsls	r6, r2, #28
 800271c:	4605      	mov	r5, r0
 800271e:	460c      	mov	r4, r1
 8002720:	d454      	bmi.n	80027cc <__sflush_r+0xb8>
 8002722:	684b      	ldr	r3, [r1, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	dc02      	bgt.n	800272e <__sflush_r+0x1a>
 8002728:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	dd48      	ble.n	80027c0 <__sflush_r+0xac>
 800272e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002730:	2e00      	cmp	r6, #0
 8002732:	d045      	beq.n	80027c0 <__sflush_r+0xac>
 8002734:	2300      	movs	r3, #0
 8002736:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800273a:	682f      	ldr	r7, [r5, #0]
 800273c:	6a21      	ldr	r1, [r4, #32]
 800273e:	602b      	str	r3, [r5, #0]
 8002740:	d030      	beq.n	80027a4 <__sflush_r+0x90>
 8002742:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002744:	89a3      	ldrh	r3, [r4, #12]
 8002746:	0759      	lsls	r1, r3, #29
 8002748:	d505      	bpl.n	8002756 <__sflush_r+0x42>
 800274a:	6863      	ldr	r3, [r4, #4]
 800274c:	1ad2      	subs	r2, r2, r3
 800274e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002750:	b10b      	cbz	r3, 8002756 <__sflush_r+0x42>
 8002752:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002754:	1ad2      	subs	r2, r2, r3
 8002756:	2300      	movs	r3, #0
 8002758:	4628      	mov	r0, r5
 800275a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800275c:	6a21      	ldr	r1, [r4, #32]
 800275e:	47b0      	blx	r6
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	89a3      	ldrh	r3, [r4, #12]
 8002764:	d106      	bne.n	8002774 <__sflush_r+0x60>
 8002766:	6829      	ldr	r1, [r5, #0]
 8002768:	291d      	cmp	r1, #29
 800276a:	d82b      	bhi.n	80027c4 <__sflush_r+0xb0>
 800276c:	4a28      	ldr	r2, [pc, #160]	@ (8002810 <__sflush_r+0xfc>)
 800276e:	410a      	asrs	r2, r1
 8002770:	07d6      	lsls	r6, r2, #31
 8002772:	d427      	bmi.n	80027c4 <__sflush_r+0xb0>
 8002774:	2200      	movs	r2, #0
 8002776:	6062      	str	r2, [r4, #4]
 8002778:	6922      	ldr	r2, [r4, #16]
 800277a:	04d9      	lsls	r1, r3, #19
 800277c:	6022      	str	r2, [r4, #0]
 800277e:	d504      	bpl.n	800278a <__sflush_r+0x76>
 8002780:	1c42      	adds	r2, r0, #1
 8002782:	d101      	bne.n	8002788 <__sflush_r+0x74>
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	b903      	cbnz	r3, 800278a <__sflush_r+0x76>
 8002788:	6560      	str	r0, [r4, #84]	@ 0x54
 800278a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800278c:	602f      	str	r7, [r5, #0]
 800278e:	b1b9      	cbz	r1, 80027c0 <__sflush_r+0xac>
 8002790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002794:	4299      	cmp	r1, r3
 8002796:	d002      	beq.n	800279e <__sflush_r+0x8a>
 8002798:	4628      	mov	r0, r5
 800279a:	f7ff fec5 	bl	8002528 <_free_r>
 800279e:	2300      	movs	r3, #0
 80027a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80027a2:	e00d      	b.n	80027c0 <__sflush_r+0xac>
 80027a4:	2301      	movs	r3, #1
 80027a6:	4628      	mov	r0, r5
 80027a8:	47b0      	blx	r6
 80027aa:	4602      	mov	r2, r0
 80027ac:	1c50      	adds	r0, r2, #1
 80027ae:	d1c9      	bne.n	8002744 <__sflush_r+0x30>
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0c6      	beq.n	8002744 <__sflush_r+0x30>
 80027b6:	2b1d      	cmp	r3, #29
 80027b8:	d001      	beq.n	80027be <__sflush_r+0xaa>
 80027ba:	2b16      	cmp	r3, #22
 80027bc:	d11d      	bne.n	80027fa <__sflush_r+0xe6>
 80027be:	602f      	str	r7, [r5, #0]
 80027c0:	2000      	movs	r0, #0
 80027c2:	e021      	b.n	8002808 <__sflush_r+0xf4>
 80027c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	e01a      	b.n	8002802 <__sflush_r+0xee>
 80027cc:	690f      	ldr	r7, [r1, #16]
 80027ce:	2f00      	cmp	r7, #0
 80027d0:	d0f6      	beq.n	80027c0 <__sflush_r+0xac>
 80027d2:	0793      	lsls	r3, r2, #30
 80027d4:	bf18      	it	ne
 80027d6:	2300      	movne	r3, #0
 80027d8:	680e      	ldr	r6, [r1, #0]
 80027da:	bf08      	it	eq
 80027dc:	694b      	ldreq	r3, [r1, #20]
 80027de:	1bf6      	subs	r6, r6, r7
 80027e0:	600f      	str	r7, [r1, #0]
 80027e2:	608b      	str	r3, [r1, #8]
 80027e4:	2e00      	cmp	r6, #0
 80027e6:	ddeb      	ble.n	80027c0 <__sflush_r+0xac>
 80027e8:	4633      	mov	r3, r6
 80027ea:	463a      	mov	r2, r7
 80027ec:	4628      	mov	r0, r5
 80027ee:	6a21      	ldr	r1, [r4, #32]
 80027f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80027f4:	47e0      	blx	ip
 80027f6:	2800      	cmp	r0, #0
 80027f8:	dc07      	bgt.n	800280a <__sflush_r+0xf6>
 80027fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002802:	f04f 30ff 	mov.w	r0, #4294967295
 8002806:	81a3      	strh	r3, [r4, #12]
 8002808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800280a:	4407      	add	r7, r0
 800280c:	1a36      	subs	r6, r6, r0
 800280e:	e7e9      	b.n	80027e4 <__sflush_r+0xd0>
 8002810:	dfbffffe 	.word	0xdfbffffe

08002814 <_fflush_r>:
 8002814:	b538      	push	{r3, r4, r5, lr}
 8002816:	690b      	ldr	r3, [r1, #16]
 8002818:	4605      	mov	r5, r0
 800281a:	460c      	mov	r4, r1
 800281c:	b913      	cbnz	r3, 8002824 <_fflush_r+0x10>
 800281e:	2500      	movs	r5, #0
 8002820:	4628      	mov	r0, r5
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	b118      	cbz	r0, 800282e <_fflush_r+0x1a>
 8002826:	6a03      	ldr	r3, [r0, #32]
 8002828:	b90b      	cbnz	r3, 800282e <_fflush_r+0x1a>
 800282a:	f7ff fc95 	bl	8002158 <__sinit>
 800282e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f3      	beq.n	800281e <_fflush_r+0xa>
 8002836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002838:	07d0      	lsls	r0, r2, #31
 800283a:	d404      	bmi.n	8002846 <_fflush_r+0x32>
 800283c:	0599      	lsls	r1, r3, #22
 800283e:	d402      	bmi.n	8002846 <_fflush_r+0x32>
 8002840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002842:	f7ff fe6e 	bl	8002522 <__retarget_lock_acquire_recursive>
 8002846:	4628      	mov	r0, r5
 8002848:	4621      	mov	r1, r4
 800284a:	f7ff ff63 	bl	8002714 <__sflush_r>
 800284e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002850:	4605      	mov	r5, r0
 8002852:	07da      	lsls	r2, r3, #31
 8002854:	d4e4      	bmi.n	8002820 <_fflush_r+0xc>
 8002856:	89a3      	ldrh	r3, [r4, #12]
 8002858:	059b      	lsls	r3, r3, #22
 800285a:	d4e1      	bmi.n	8002820 <_fflush_r+0xc>
 800285c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800285e:	f7ff fe61 	bl	8002524 <__retarget_lock_release_recursive>
 8002862:	e7dd      	b.n	8002820 <_fflush_r+0xc>

08002864 <__swhatbuf_r>:
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	460c      	mov	r4, r1
 8002868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800286c:	4615      	mov	r5, r2
 800286e:	2900      	cmp	r1, #0
 8002870:	461e      	mov	r6, r3
 8002872:	b096      	sub	sp, #88	@ 0x58
 8002874:	da0c      	bge.n	8002890 <__swhatbuf_r+0x2c>
 8002876:	89a3      	ldrh	r3, [r4, #12]
 8002878:	2100      	movs	r1, #0
 800287a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800287e:	bf14      	ite	ne
 8002880:	2340      	movne	r3, #64	@ 0x40
 8002882:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002886:	2000      	movs	r0, #0
 8002888:	6031      	str	r1, [r6, #0]
 800288a:	602b      	str	r3, [r5, #0]
 800288c:	b016      	add	sp, #88	@ 0x58
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	466a      	mov	r2, sp
 8002892:	f000 f849 	bl	8002928 <_fstat_r>
 8002896:	2800      	cmp	r0, #0
 8002898:	dbed      	blt.n	8002876 <__swhatbuf_r+0x12>
 800289a:	9901      	ldr	r1, [sp, #4]
 800289c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80028a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80028a4:	4259      	negs	r1, r3
 80028a6:	4159      	adcs	r1, r3
 80028a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028ac:	e7eb      	b.n	8002886 <__swhatbuf_r+0x22>

080028ae <__smakebuf_r>:
 80028ae:	898b      	ldrh	r3, [r1, #12]
 80028b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028b2:	079d      	lsls	r5, r3, #30
 80028b4:	4606      	mov	r6, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	d507      	bpl.n	80028ca <__smakebuf_r+0x1c>
 80028ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	6123      	str	r3, [r4, #16]
 80028c2:	2301      	movs	r3, #1
 80028c4:	6163      	str	r3, [r4, #20]
 80028c6:	b003      	add	sp, #12
 80028c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ca:	466a      	mov	r2, sp
 80028cc:	ab01      	add	r3, sp, #4
 80028ce:	f7ff ffc9 	bl	8002864 <__swhatbuf_r>
 80028d2:	9f00      	ldr	r7, [sp, #0]
 80028d4:	4605      	mov	r5, r0
 80028d6:	4639      	mov	r1, r7
 80028d8:	4630      	mov	r0, r6
 80028da:	f7ff fe8f 	bl	80025fc <_malloc_r>
 80028de:	b948      	cbnz	r0, 80028f4 <__smakebuf_r+0x46>
 80028e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028e4:	059a      	lsls	r2, r3, #22
 80028e6:	d4ee      	bmi.n	80028c6 <__smakebuf_r+0x18>
 80028e8:	f023 0303 	bic.w	r3, r3, #3
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	81a3      	strh	r3, [r4, #12]
 80028f2:	e7e2      	b.n	80028ba <__smakebuf_r+0xc>
 80028f4:	89a3      	ldrh	r3, [r4, #12]
 80028f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80028fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028fe:	81a3      	strh	r3, [r4, #12]
 8002900:	9b01      	ldr	r3, [sp, #4]
 8002902:	6020      	str	r0, [r4, #0]
 8002904:	b15b      	cbz	r3, 800291e <__smakebuf_r+0x70>
 8002906:	4630      	mov	r0, r6
 8002908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800290c:	f000 f81e 	bl	800294c <_isatty_r>
 8002910:	b128      	cbz	r0, 800291e <__smakebuf_r+0x70>
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	f023 0303 	bic.w	r3, r3, #3
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	81a3      	strh	r3, [r4, #12]
 800291e:	89a3      	ldrh	r3, [r4, #12]
 8002920:	431d      	orrs	r5, r3
 8002922:	81a5      	strh	r5, [r4, #12]
 8002924:	e7cf      	b.n	80028c6 <__smakebuf_r+0x18>
	...

08002928 <_fstat_r>:
 8002928:	b538      	push	{r3, r4, r5, lr}
 800292a:	2300      	movs	r3, #0
 800292c:	4d06      	ldr	r5, [pc, #24]	@ (8002948 <_fstat_r+0x20>)
 800292e:	4604      	mov	r4, r0
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	602b      	str	r3, [r5, #0]
 8002936:	f7fd ff7f 	bl	8000838 <_fstat>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	d102      	bne.n	8002944 <_fstat_r+0x1c>
 800293e:	682b      	ldr	r3, [r5, #0]
 8002940:	b103      	cbz	r3, 8002944 <_fstat_r+0x1c>
 8002942:	6023      	str	r3, [r4, #0]
 8002944:	bd38      	pop	{r3, r4, r5, pc}
 8002946:	bf00      	nop
 8002948:	20000210 	.word	0x20000210

0800294c <_isatty_r>:
 800294c:	b538      	push	{r3, r4, r5, lr}
 800294e:	2300      	movs	r3, #0
 8002950:	4d05      	ldr	r5, [pc, #20]	@ (8002968 <_isatty_r+0x1c>)
 8002952:	4604      	mov	r4, r0
 8002954:	4608      	mov	r0, r1
 8002956:	602b      	str	r3, [r5, #0]
 8002958:	f7fd ff7d 	bl	8000856 <_isatty>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d102      	bne.n	8002966 <_isatty_r+0x1a>
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	b103      	cbz	r3, 8002966 <_isatty_r+0x1a>
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	bd38      	pop	{r3, r4, r5, pc}
 8002968:	20000210 	.word	0x20000210

0800296c <_sbrk_r>:
 800296c:	b538      	push	{r3, r4, r5, lr}
 800296e:	2300      	movs	r3, #0
 8002970:	4d05      	ldr	r5, [pc, #20]	@ (8002988 <_sbrk_r+0x1c>)
 8002972:	4604      	mov	r4, r0
 8002974:	4608      	mov	r0, r1
 8002976:	602b      	str	r3, [r5, #0]
 8002978:	f7fd ff84 	bl	8000884 <_sbrk>
 800297c:	1c43      	adds	r3, r0, #1
 800297e:	d102      	bne.n	8002986 <_sbrk_r+0x1a>
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	b103      	cbz	r3, 8002986 <_sbrk_r+0x1a>
 8002984:	6023      	str	r3, [r4, #0]
 8002986:	bd38      	pop	{r3, r4, r5, pc}
 8002988:	20000210 	.word	0x20000210

0800298c <_init>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	bf00      	nop
 8002990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002992:	bc08      	pop	{r3}
 8002994:	469e      	mov	lr, r3
 8002996:	4770      	bx	lr

08002998 <_fini>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	bf00      	nop
 800299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299e:	bc08      	pop	{r3}
 80029a0:	469e      	mov	lr, r3
 80029a2:	4770      	bx	lr
