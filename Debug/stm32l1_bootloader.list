
stm32l1_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00005100  2**2
                  ALLOC
  2 .myBufBlocFLASH 0000000a  08001000  08001000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .mysection    00000024  08018000  08018000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         00001b68  0800100c  0800100c  0000200c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00000024  08002b74  08002b74  00003b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08002b98  08002b98  00005024  2**0
                  CONTENTS
  7 .ARM          00000008  08002b98  08002b98  00003b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08002ba0  08002ba0  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  08002ba0  08002ba0  00003ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fini_array   00000004  08002ba4  08002ba4  00003ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .data         0000000c  20000180  08002ba8  00004180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00000068  2000018c  08002bb4  0000418c  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  200001f4  08002bb4  000041f4  2**0
                  ALLOC
 14 .ARM.attributes 00000029  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000689a  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000012d6  00000000  00000000  0000b8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000620  00000000  00000000  0000cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000004ac  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000142c5  00000000  00000000  0000d68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00007723  00000000  00000000  00021951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0007eb16  00000000  00000000  00029074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000a7b8a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00001828  00000000  00000000  000a7bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000059  00000000  00000000  000a93f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .mysection:

08018000 <blink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LOCATE_FUNC blink(uint32_t delay_tick)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8018008:	2180      	movs	r1, #128	@ 0x80
 801800a:	4805      	ldr	r0, [pc, #20]	@ (8018020 <blink+0x20>)
 801800c:	f7e9 fe36 	bl	8001c7c <HAL_GPIO_TogglePin>
	HAL_Delay(delay_tick);
 8018010:	6878      	ldr	r0, [r7, #4]
 8018012:	f7e9 fb95 	bl	8001740 <HAL_Delay>
}
 8018016:	bf00      	nop
 8018018:	3708      	adds	r7, #8
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}
 801801e:	bf00      	nop
 8018020:	40020400 	.word	0x40020400

Disassembly of section .text:

0800100c <__do_global_dtors_aux>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4c05      	ldr	r4, [pc, #20]	@ (8001024 <__do_global_dtors_aux+0x18>)
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	b933      	cbnz	r3, 8001022 <__do_global_dtors_aux+0x16>
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__do_global_dtors_aux+0x1c>)
 8001016:	b113      	cbz	r3, 800101e <__do_global_dtors_aux+0x12>
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <__do_global_dtors_aux+0x20>)
 800101a:	f3af 8000 	nop.w
 800101e:	2301      	movs	r3, #1
 8001020:	7023      	strb	r3, [r4, #0]
 8001022:	bd10      	pop	{r4, pc}
 8001024:	2000018c 	.word	0x2000018c
 8001028:	00000000 	.word	0x00000000
 800102c:	08002b5c 	.word	0x08002b5c

08001030 <frame_dummy>:
 8001030:	b508      	push	{r3, lr}
 8001032:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <frame_dummy+0x10>)
 8001034:	b11b      	cbz	r3, 800103e <frame_dummy+0xe>
 8001036:	4903      	ldr	r1, [pc, #12]	@ (8001044 <frame_dummy+0x14>)
 8001038:	4803      	ldr	r0, [pc, #12]	@ (8001048 <frame_dummy+0x18>)
 800103a:	f3af 8000 	nop.w
 800103e:	bd08      	pop	{r3, pc}
 8001040:	00000000 	.word	0x00000000
 8001044:	20000190 	.word	0x20000190
 8001048:	08002b5c 	.word	0x08002b5c

0800104c <__aeabi_uldivmod>:
 800104c:	b953      	cbnz	r3, 8001064 <__aeabi_uldivmod+0x18>
 800104e:	b94a      	cbnz	r2, 8001064 <__aeabi_uldivmod+0x18>
 8001050:	2900      	cmp	r1, #0
 8001052:	bf08      	it	eq
 8001054:	2800      	cmpeq	r0, #0
 8001056:	bf1c      	itt	ne
 8001058:	f04f 31ff 	movne.w	r1, #4294967295
 800105c:	f04f 30ff 	movne.w	r0, #4294967295
 8001060:	f000 b968 	b.w	8001334 <__aeabi_idiv0>
 8001064:	f1ad 0c08 	sub.w	ip, sp, #8
 8001068:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800106c:	f000 f806 	bl	800107c <__udivmoddi4>
 8001070:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001078:	b004      	add	sp, #16
 800107a:	4770      	bx	lr

0800107c <__udivmoddi4>:
 800107c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001080:	9d08      	ldr	r5, [sp, #32]
 8001082:	460c      	mov	r4, r1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d14e      	bne.n	8001126 <__udivmoddi4+0xaa>
 8001088:	4694      	mov	ip, r2
 800108a:	458c      	cmp	ip, r1
 800108c:	4686      	mov	lr, r0
 800108e:	fab2 f282 	clz	r2, r2
 8001092:	d962      	bls.n	800115a <__udivmoddi4+0xde>
 8001094:	b14a      	cbz	r2, 80010aa <__udivmoddi4+0x2e>
 8001096:	f1c2 0320 	rsb	r3, r2, #32
 800109a:	4091      	lsls	r1, r2
 800109c:	fa20 f303 	lsr.w	r3, r0, r3
 80010a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010a4:	4319      	orrs	r1, r3
 80010a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80010aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80010b2:	fb07 1114 	mls	r1, r7, r4, r1
 80010b6:	fa1f f68c 	uxth.w	r6, ip
 80010ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010c2:	fb04 f106 	mul.w	r1, r4, r6
 80010c6:	4299      	cmp	r1, r3
 80010c8:	d90a      	bls.n	80010e0 <__udivmoddi4+0x64>
 80010ca:	eb1c 0303 	adds.w	r3, ip, r3
 80010ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80010d2:	f080 8110 	bcs.w	80012f6 <__udivmoddi4+0x27a>
 80010d6:	4299      	cmp	r1, r3
 80010d8:	f240 810d 	bls.w	80012f6 <__udivmoddi4+0x27a>
 80010dc:	3c02      	subs	r4, #2
 80010de:	4463      	add	r3, ip
 80010e0:	1a59      	subs	r1, r3, r1
 80010e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80010e6:	fb07 1110 	mls	r1, r7, r0, r1
 80010ea:	fb00 f606 	mul.w	r6, r0, r6
 80010ee:	fa1f f38e 	uxth.w	r3, lr
 80010f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010f6:	429e      	cmp	r6, r3
 80010f8:	d90a      	bls.n	8001110 <__udivmoddi4+0x94>
 80010fa:	eb1c 0303 	adds.w	r3, ip, r3
 80010fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8001102:	f080 80fa 	bcs.w	80012fa <__udivmoddi4+0x27e>
 8001106:	429e      	cmp	r6, r3
 8001108:	f240 80f7 	bls.w	80012fa <__udivmoddi4+0x27e>
 800110c:	4463      	add	r3, ip
 800110e:	3802      	subs	r0, #2
 8001110:	2100      	movs	r1, #0
 8001112:	1b9b      	subs	r3, r3, r6
 8001114:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001118:	b11d      	cbz	r5, 8001122 <__udivmoddi4+0xa6>
 800111a:	40d3      	lsrs	r3, r2
 800111c:	2200      	movs	r2, #0
 800111e:	e9c5 3200 	strd	r3, r2, [r5]
 8001122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001126:	428b      	cmp	r3, r1
 8001128:	d905      	bls.n	8001136 <__udivmoddi4+0xba>
 800112a:	b10d      	cbz	r5, 8001130 <__udivmoddi4+0xb4>
 800112c:	e9c5 0100 	strd	r0, r1, [r5]
 8001130:	2100      	movs	r1, #0
 8001132:	4608      	mov	r0, r1
 8001134:	e7f5      	b.n	8001122 <__udivmoddi4+0xa6>
 8001136:	fab3 f183 	clz	r1, r3
 800113a:	2900      	cmp	r1, #0
 800113c:	d146      	bne.n	80011cc <__udivmoddi4+0x150>
 800113e:	42a3      	cmp	r3, r4
 8001140:	d302      	bcc.n	8001148 <__udivmoddi4+0xcc>
 8001142:	4290      	cmp	r0, r2
 8001144:	f0c0 80ee 	bcc.w	8001324 <__udivmoddi4+0x2a8>
 8001148:	1a86      	subs	r6, r0, r2
 800114a:	eb64 0303 	sbc.w	r3, r4, r3
 800114e:	2001      	movs	r0, #1
 8001150:	2d00      	cmp	r5, #0
 8001152:	d0e6      	beq.n	8001122 <__udivmoddi4+0xa6>
 8001154:	e9c5 6300 	strd	r6, r3, [r5]
 8001158:	e7e3      	b.n	8001122 <__udivmoddi4+0xa6>
 800115a:	2a00      	cmp	r2, #0
 800115c:	f040 808f 	bne.w	800127e <__udivmoddi4+0x202>
 8001160:	eba1 040c 	sub.w	r4, r1, ip
 8001164:	2101      	movs	r1, #1
 8001166:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800116a:	fa1f f78c 	uxth.w	r7, ip
 800116e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001172:	fb08 4416 	mls	r4, r8, r6, r4
 8001176:	fb07 f006 	mul.w	r0, r7, r6
 800117a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800117e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001182:	4298      	cmp	r0, r3
 8001184:	d908      	bls.n	8001198 <__udivmoddi4+0x11c>
 8001186:	eb1c 0303 	adds.w	r3, ip, r3
 800118a:	f106 34ff 	add.w	r4, r6, #4294967295
 800118e:	d202      	bcs.n	8001196 <__udivmoddi4+0x11a>
 8001190:	4298      	cmp	r0, r3
 8001192:	f200 80cb 	bhi.w	800132c <__udivmoddi4+0x2b0>
 8001196:	4626      	mov	r6, r4
 8001198:	1a1c      	subs	r4, r3, r0
 800119a:	fbb4 f0f8 	udiv	r0, r4, r8
 800119e:	fb08 4410 	mls	r4, r8, r0, r4
 80011a2:	fb00 f707 	mul.w	r7, r0, r7
 80011a6:	fa1f f38e 	uxth.w	r3, lr
 80011aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011ae:	429f      	cmp	r7, r3
 80011b0:	d908      	bls.n	80011c4 <__udivmoddi4+0x148>
 80011b2:	eb1c 0303 	adds.w	r3, ip, r3
 80011b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80011ba:	d202      	bcs.n	80011c2 <__udivmoddi4+0x146>
 80011bc:	429f      	cmp	r7, r3
 80011be:	f200 80ae 	bhi.w	800131e <__udivmoddi4+0x2a2>
 80011c2:	4620      	mov	r0, r4
 80011c4:	1bdb      	subs	r3, r3, r7
 80011c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80011ca:	e7a5      	b.n	8001118 <__udivmoddi4+0x9c>
 80011cc:	f1c1 0720 	rsb	r7, r1, #32
 80011d0:	408b      	lsls	r3, r1
 80011d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80011d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80011da:	fa24 f607 	lsr.w	r6, r4, r7
 80011de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011e2:	fbb6 f8f9 	udiv	r8, r6, r9
 80011e6:	fa1f fe8c 	uxth.w	lr, ip
 80011ea:	fb09 6618 	mls	r6, r9, r8, r6
 80011ee:	fa20 f307 	lsr.w	r3, r0, r7
 80011f2:	408c      	lsls	r4, r1
 80011f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80011f8:	fb08 f00e 	mul.w	r0, r8, lr
 80011fc:	431c      	orrs	r4, r3
 80011fe:	0c23      	lsrs	r3, r4, #16
 8001200:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001204:	4298      	cmp	r0, r3
 8001206:	fa02 f201 	lsl.w	r2, r2, r1
 800120a:	d90a      	bls.n	8001222 <__udivmoddi4+0x1a6>
 800120c:	eb1c 0303 	adds.w	r3, ip, r3
 8001210:	f108 36ff 	add.w	r6, r8, #4294967295
 8001214:	f080 8081 	bcs.w	800131a <__udivmoddi4+0x29e>
 8001218:	4298      	cmp	r0, r3
 800121a:	d97e      	bls.n	800131a <__udivmoddi4+0x29e>
 800121c:	f1a8 0802 	sub.w	r8, r8, #2
 8001220:	4463      	add	r3, ip
 8001222:	1a1e      	subs	r6, r3, r0
 8001224:	fbb6 f3f9 	udiv	r3, r6, r9
 8001228:	fb09 6613 	mls	r6, r9, r3, r6
 800122c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001230:	b2a4      	uxth	r4, r4
 8001232:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001236:	45a6      	cmp	lr, r4
 8001238:	d908      	bls.n	800124c <__udivmoddi4+0x1d0>
 800123a:	eb1c 0404 	adds.w	r4, ip, r4
 800123e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001242:	d266      	bcs.n	8001312 <__udivmoddi4+0x296>
 8001244:	45a6      	cmp	lr, r4
 8001246:	d964      	bls.n	8001312 <__udivmoddi4+0x296>
 8001248:	3b02      	subs	r3, #2
 800124a:	4464      	add	r4, ip
 800124c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001250:	fba0 8302 	umull	r8, r3, r0, r2
 8001254:	eba4 040e 	sub.w	r4, r4, lr
 8001258:	429c      	cmp	r4, r3
 800125a:	46c6      	mov	lr, r8
 800125c:	461e      	mov	r6, r3
 800125e:	d350      	bcc.n	8001302 <__udivmoddi4+0x286>
 8001260:	d04d      	beq.n	80012fe <__udivmoddi4+0x282>
 8001262:	b155      	cbz	r5, 800127a <__udivmoddi4+0x1fe>
 8001264:	ebba 030e 	subs.w	r3, sl, lr
 8001268:	eb64 0406 	sbc.w	r4, r4, r6
 800126c:	fa04 f707 	lsl.w	r7, r4, r7
 8001270:	40cb      	lsrs	r3, r1
 8001272:	431f      	orrs	r7, r3
 8001274:	40cc      	lsrs	r4, r1
 8001276:	e9c5 7400 	strd	r7, r4, [r5]
 800127a:	2100      	movs	r1, #0
 800127c:	e751      	b.n	8001122 <__udivmoddi4+0xa6>
 800127e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001282:	f1c2 0320 	rsb	r3, r2, #32
 8001286:	40d9      	lsrs	r1, r3
 8001288:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800128c:	fa20 f303 	lsr.w	r3, r0, r3
 8001290:	fa00 fe02 	lsl.w	lr, r0, r2
 8001294:	fbb1 f0f8 	udiv	r0, r1, r8
 8001298:	fb08 1110 	mls	r1, r8, r0, r1
 800129c:	4094      	lsls	r4, r2
 800129e:	431c      	orrs	r4, r3
 80012a0:	fa1f f78c 	uxth.w	r7, ip
 80012a4:	0c23      	lsrs	r3, r4, #16
 80012a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012aa:	fb00 f107 	mul.w	r1, r0, r7
 80012ae:	4299      	cmp	r1, r3
 80012b0:	d908      	bls.n	80012c4 <__udivmoddi4+0x248>
 80012b2:	eb1c 0303 	adds.w	r3, ip, r3
 80012b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80012ba:	d22c      	bcs.n	8001316 <__udivmoddi4+0x29a>
 80012bc:	4299      	cmp	r1, r3
 80012be:	d92a      	bls.n	8001316 <__udivmoddi4+0x29a>
 80012c0:	3802      	subs	r0, #2
 80012c2:	4463      	add	r3, ip
 80012c4:	1a5b      	subs	r3, r3, r1
 80012c6:	fbb3 f1f8 	udiv	r1, r3, r8
 80012ca:	fb08 3311 	mls	r3, r8, r1, r3
 80012ce:	b2a4      	uxth	r4, r4
 80012d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012d4:	fb01 f307 	mul.w	r3, r1, r7
 80012d8:	42a3      	cmp	r3, r4
 80012da:	d908      	bls.n	80012ee <__udivmoddi4+0x272>
 80012dc:	eb1c 0404 	adds.w	r4, ip, r4
 80012e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80012e4:	d213      	bcs.n	800130e <__udivmoddi4+0x292>
 80012e6:	42a3      	cmp	r3, r4
 80012e8:	d911      	bls.n	800130e <__udivmoddi4+0x292>
 80012ea:	3902      	subs	r1, #2
 80012ec:	4464      	add	r4, ip
 80012ee:	1ae4      	subs	r4, r4, r3
 80012f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012f4:	e73b      	b.n	800116e <__udivmoddi4+0xf2>
 80012f6:	4604      	mov	r4, r0
 80012f8:	e6f2      	b.n	80010e0 <__udivmoddi4+0x64>
 80012fa:	4608      	mov	r0, r1
 80012fc:	e708      	b.n	8001110 <__udivmoddi4+0x94>
 80012fe:	45c2      	cmp	sl, r8
 8001300:	d2af      	bcs.n	8001262 <__udivmoddi4+0x1e6>
 8001302:	ebb8 0e02 	subs.w	lr, r8, r2
 8001306:	eb63 060c 	sbc.w	r6, r3, ip
 800130a:	3801      	subs	r0, #1
 800130c:	e7a9      	b.n	8001262 <__udivmoddi4+0x1e6>
 800130e:	4631      	mov	r1, r6
 8001310:	e7ed      	b.n	80012ee <__udivmoddi4+0x272>
 8001312:	4603      	mov	r3, r0
 8001314:	e79a      	b.n	800124c <__udivmoddi4+0x1d0>
 8001316:	4630      	mov	r0, r6
 8001318:	e7d4      	b.n	80012c4 <__udivmoddi4+0x248>
 800131a:	46b0      	mov	r8, r6
 800131c:	e781      	b.n	8001222 <__udivmoddi4+0x1a6>
 800131e:	4463      	add	r3, ip
 8001320:	3802      	subs	r0, #2
 8001322:	e74f      	b.n	80011c4 <__udivmoddi4+0x148>
 8001324:	4606      	mov	r6, r0
 8001326:	4623      	mov	r3, r4
 8001328:	4608      	mov	r0, r1
 800132a:	e711      	b.n	8001150 <__udivmoddi4+0xd4>
 800132c:	3e02      	subs	r6, #2
 800132e:	4463      	add	r3, ip
 8001330:	e732      	b.n	8001198 <__udivmoddi4+0x11c>
 8001332:	bf00      	nop

08001334 <__aeabi_idiv0>:
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f000 f991 	bl	8001662 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f808 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001344:	f000 f87e 	bl	8001444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001348:	f000 f852 	bl	80013f0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  blink(100);
 800134c:	2064      	movs	r0, #100	@ 0x64
 800134e:	f016 fe57 	bl	8018000 <blink>
 8001352:	e7fb      	b.n	800134c <main+0x14>

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b092      	sub	sp, #72	@ 0x48
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2234      	movs	r2, #52	@ 0x34
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fbce 	bl	8002b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <SystemClock_Config+0x98>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800137e:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <SystemClock_Config+0x98>)
 8001380:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001384:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001386:	2302      	movs	r3, #2
 8001388:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138a:	2301      	movs	r3, #1
 800138c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138e:	2310      	movs	r3, #16
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001392:	2302      	movs	r3, #2
 8001394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001396:	2300      	movs	r3, #0
 8001398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800139a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800139e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80013a0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80013a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fc80 	bl	8001cb0 <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013b6:	f000 f883 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ba:	230f      	movs	r3, #15
 80013bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013be:	2303      	movs	r3, #3
 80013c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	2101      	movs	r1, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 ff9c 	bl	8002310 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013de:	f000 f86f 	bl	80014c0 <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3748      	adds	r7, #72	@ 0x48
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <MX_USART2_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001428:	f001 fa38 	bl	800289c <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f000 f845 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200001a8 	.word	0x200001a8
 8001440:	40004400 	.word	0x40004400

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_GPIO_Init+0x74>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <MX_GPIO_Init+0x74>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_GPIO_Init+0x74>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_GPIO_Init+0x74>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <MX_GPIO_Init+0x74>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_GPIO_Init+0x74>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2180      	movs	r1, #128	@ 0x80
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <MX_GPIO_Init+0x78>)
 8001490:	f000 fbdc 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_GPIO_Init+0x78>)
 80014ac:	f000 fa4e 	bl	800194c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_MspInit+0x5c>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <HAL_MspInit+0x5c>)
 80014d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014dc:	6253      	str	r3, [r2, #36]	@ 0x24
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_MspInit+0x5c>)
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_MspInit+0x5c>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <HAL_MspInit+0x5c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_MspInit+0x5c>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_MspInit+0x5c>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_MspInit+0x5c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6253      	str	r3, [r2, #36]	@ 0x24
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_MspInit+0x5c>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800151a:	2007      	movs	r0, #7
 800151c:	f000 f9e2 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a17      	ldr	r2, [pc, #92]	@ (80015a8 <HAL_UART_MspInit+0x7c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d127      	bne.n	800159e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <HAL_UART_MspInit+0x80>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <HAL_UART_MspInit+0x80>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	6253      	str	r3, [r2, #36]	@ 0x24
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <HAL_UART_MspInit+0x80>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <HAL_UART_MspInit+0x80>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <HAL_UART_MspInit+0x80>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_UART_MspInit+0x80>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800157e:	230c      	movs	r3, #12
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158e:	2307      	movs	r3, #7
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <HAL_UART_MspInit+0x84>)
 800159a:	f000 f9d7 	bl	800194c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40004400 	.word	0x40004400
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <NMI_Handler+0x4>

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <MemManage_Handler+0x4>

080015cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <UsageFault_Handler+0x4>

080015dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 f880 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001618:	f7ff fff8 	bl	800160c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800161c:	480b      	ldr	r0, [pc, #44]	@ (800164c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800161e:	490c      	ldr	r1, [pc, #48]	@ (8001650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001620:	4a0c      	ldr	r2, [pc, #48]	@ (8001654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a09      	ldr	r2, [pc, #36]	@ (8001658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001634:	4c09      	ldr	r4, [pc, #36]	@ (800165c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001642:	f001 fa67 	bl	8002b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001646:	f7ff fe77 	bl	8001338 <main>
  bx lr
 800164a:	4770      	bx	lr
  ldr r0, =_sdata
 800164c:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8001650:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001654:	08002ba8 	.word	0x08002ba8
  ldr r2, =_sbss
 8001658:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800165c:	200001f4 	.word	0x200001f4

08001660 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_IRQHandler>

08001662 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f939 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f80e 	bl	8001694 <HAL_InitTick>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	71fb      	strb	r3, [r7, #7]
 8001682:	e001      	b.n	8001688 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001684:	f7ff ff22 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001688:	79fb      	ldrb	r3, [r7, #7]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_InitTick+0x68>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d022      	beq.n	80016ee <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_InitTick+0x6c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_InitTick+0x68>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f938 	bl	8001932 <HAL_SYSTICK_Config>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10f      	bne.n	80016e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d809      	bhi.n	80016e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ce:	2200      	movs	r2, #0
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	f04f 30ff 	mov.w	r0, #4294967295
 80016d6:	f000 f910 	bl	80018fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_InitTick+0x70>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e004      	b.n	80016f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000188 	.word	0x20000188
 8001700:	20000180 	.word	0x20000180
 8001704:	20000184 	.word	0x20000184

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_IncTick+0x1c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_IncTick+0x20>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4413      	add	r3, r2
 8001716:	4a03      	ldr	r2, [pc, #12]	@ (8001724 <HAL_IncTick+0x1c>)
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200001f0 	.word	0x200001f0
 8001728:	20000188 	.word	0x20000188

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b02      	ldr	r3, [pc, #8]	@ (800173c <HAL_GetTick+0x10>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	200001f0 	.word	0x200001f0

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff fff0 	bl	800172c <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d004      	beq.n	8001764 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_Delay+0x40>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001764:	bf00      	nop
 8001766:	f7ff ffe1 	bl	800172c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d8f7      	bhi.n	8001766 <HAL_Delay+0x26>
  {
  }
}
 8001776:	bf00      	nop
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000188 	.word	0x20000188

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	@ (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	@ (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	@ 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff90 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff49 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff5e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff90 	bl	800183c <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5f 	bl	80017e8 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffb0 	bl	80018a0 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001962:	e154      	b.n	8001c0e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8146 	beq.w	8001c08 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d005      	beq.n	8001994 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001990:	2b02      	cmp	r3, #2
 8001992:	d130      	bne.n	80019f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80019ca:	2201      	movs	r2, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 0201 	and.w	r2, r3, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d017      	beq.n	8001a32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d123      	bne.n	8001a86 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	6939      	ldr	r1, [r7, #16]
 8001a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0203 	and.w	r2, r3, #3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80a0 	beq.w	8001c08 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac8:	4b58      	ldr	r3, [pc, #352]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a57      	ldr	r2, [pc, #348]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	4b55      	ldr	r3, [pc, #340]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ae0:	4a53      	ldr	r2, [pc, #332]	@ (8001c30 <HAL_GPIO_Init+0x2e4>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a4b      	ldr	r2, [pc, #300]	@ (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d019      	beq.n	8001b40 <HAL_GPIO_Init+0x1f4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d013      	beq.n	8001b3c <HAL_GPIO_Init+0x1f0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a49      	ldr	r2, [pc, #292]	@ (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00d      	beq.n	8001b38 <HAL_GPIO_Init+0x1ec>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a48      	ldr	r2, [pc, #288]	@ (8001c40 <HAL_GPIO_Init+0x2f4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <HAL_GPIO_Init+0x1e8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a47      	ldr	r2, [pc, #284]	@ (8001c44 <HAL_GPIO_Init+0x2f8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_GPIO_Init+0x1e4>
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	e008      	b.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b30:	2305      	movs	r3, #5
 8001b32:	e006      	b.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e004      	b.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b40:	2300      	movs	r3, #0
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	f002 0203 	and.w	r2, r2, #3
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b52:	4937      	ldr	r1, [pc, #220]	@ (8001c30 <HAL_GPIO_Init+0x2e4>)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b60:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b84:	4a30      	ldr	r2, [pc, #192]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bae:	4a26      	ldr	r2, [pc, #152]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb4:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c02:	4a11      	ldr	r2, [pc, #68]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f47f aea3 	bne.w	8001964 <HAL_GPIO_Init+0x18>
  }
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	619a      	str	r2, [r3, #24]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43d9      	mvns	r1, r3
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e31d      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc2:	4b94      	ldr	r3, [pc, #592]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ccc:	4b91      	ldr	r3, [pc, #580]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d07b      	beq.n	8001dda <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d006      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d10f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf6:	4b87      	ldr	r3, [pc, #540]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d06a      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x128>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d166      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e2f7      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x74>
 8001d16:	4b7f      	ldr	r3, [pc, #508]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e02d      	b.n	8001d80 <HAL_RCC_OscConfig+0xd0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x96>
 8001d2c:	4b79      	ldr	r3, [pc, #484]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a78      	ldr	r2, [pc, #480]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b76      	ldr	r3, [pc, #472]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a75      	ldr	r2, [pc, #468]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0xd0>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0xb8>
 8001d4e:	4b71      	ldr	r3, [pc, #452]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a70      	ldr	r2, [pc, #448]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0xd0>
 8001d68:	4b6a      	ldr	r3, [pc, #424]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a69      	ldr	r2, [pc, #420]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b67      	ldr	r3, [pc, #412]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a66      	ldr	r2, [pc, #408]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fcd0 	bl	800172c <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fccc 	bl	800172c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	@ 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e2ad      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001da2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0xe0>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fcbc 	bl	800172c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fcb8 	bl	800172c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e299      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dca:	4b52      	ldr	r3, [pc, #328]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x108>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d05a      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d119      	bne.n	8001e26 <HAL_RCC_OscConfig+0x176>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d116      	bne.n	8001e26 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df8:	4b46      	ldr	r3, [pc, #280]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x160>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e276      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b40      	ldr	r3, [pc, #256]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	493d      	ldr	r1, [pc, #244]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e24:	e03a      	b.n	8001e9c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d020      	beq.n	8001e70 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f18 <HAL_RCC_OscConfig+0x268>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fc7a 	bl	800172c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fc76 	bl	800172c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e257      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4e:	4b31      	ldr	r3, [pc, #196]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	492a      	ldr	r1, [pc, #168]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
 8001e6e:	e015      	b.n	8001e9c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e70:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <HAL_RCC_OscConfig+0x268>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff fc59 	bl	800172c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fc55 	bl	800172c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e236      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e90:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80b8 	beq.w	800201a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d170      	bne.n	8001f92 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb0:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x218>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e21a      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d921      	bls.n	8001f1c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fc7d 	bl	80027dc <RCC_SetFlashLatencyFromMSIRange>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e208      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4906      	ldr	r1, [pc, #24]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	061b      	lsls	r3, r3, #24
 8001f0c:	4901      	ldr	r1, [pc, #4]	@ (8001f14 <HAL_RCC_OscConfig+0x264>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
 8001f12:	e020      	b.n	8001f56 <HAL_RCC_OscConfig+0x2a6>
 8001f14:	40023800 	.word	0x40023800
 8001f18:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1c:	4b99      	ldr	r3, [pc, #612]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4996      	ldr	r1, [pc, #600]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2e:	4b95      	ldr	r3, [pc, #596]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	4991      	ldr	r1, [pc, #580]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fc48 	bl	80027dc <RCC_SetFlashLatencyFromMSIRange>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1d3      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f66:	4a87      	ldr	r2, [pc, #540]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001f68:	6892      	ldr	r2, [r2, #8]
 8001f6a:	0912      	lsrs	r2, r2, #4
 8001f6c:	f002 020f 	and.w	r2, r2, #15
 8001f70:	4985      	ldr	r1, [pc, #532]	@ (8002188 <HAL_RCC_OscConfig+0x4d8>)
 8001f72:	5c8a      	ldrb	r2, [r1, r2]
 8001f74:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f76:	4a85      	ldr	r2, [pc, #532]	@ (800218c <HAL_RCC_OscConfig+0x4dc>)
 8001f78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f7a:	4b85      	ldr	r3, [pc, #532]	@ (8002190 <HAL_RCC_OscConfig+0x4e0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fb88 	bl	8001694 <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d045      	beq.n	800201a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	e1b5      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d029      	beq.n	8001fee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8002194 <HAL_RCC_OscConfig+0x4e4>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fbc4 	bl	800172c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa8:	f7ff fbc0 	bl	800172c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1a1      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fba:	4b72      	ldr	r3, [pc, #456]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	496c      	ldr	r1, [pc, #432]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	4967      	ldr	r1, [pc, #412]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fee:	4b69      	ldr	r3, [pc, #420]	@ (8002194 <HAL_RCC_OscConfig+0x4e4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fb9a 	bl	800172c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fb96 	bl	800172c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e177      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800200e:	4b5d      	ldr	r3, [pc, #372]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d030      	beq.n	8002088 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b5a      	ldr	r3, [pc, #360]	@ (8002198 <HAL_RCC_OscConfig+0x4e8>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7ff fb7a 	bl	800172c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff fb76 	bl	800172c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e157      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204e:	4b4d      	ldr	r3, [pc, #308]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x38c>
 800205a:	e015      	b.n	8002088 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205c:	4b4e      	ldr	r3, [pc, #312]	@ (8002198 <HAL_RCC_OscConfig+0x4e8>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff fb63 	bl	800172c <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206a:	f7ff fb5f 	bl	800172c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e140      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800207c:	4b41      	ldr	r3, [pc, #260]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 800207e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80b5 	beq.w	8002200 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209a:	4b3a      	ldr	r3, [pc, #232]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10d      	bne.n	80020c2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	4b37      	ldr	r3, [pc, #220]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	4a36      	ldr	r2, [pc, #216]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b0:	6253      	str	r3, [r2, #36]	@ 0x24
 80020b2:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b36      	ldr	r3, [pc, #216]	@ (800219c <HAL_RCC_OscConfig+0x4ec>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d118      	bne.n	8002100 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ce:	4b33      	ldr	r3, [pc, #204]	@ (800219c <HAL_RCC_OscConfig+0x4ec>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a32      	ldr	r2, [pc, #200]	@ (800219c <HAL_RCC_OscConfig+0x4ec>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020da:	f7ff fb27 	bl	800172c <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7ff fb23 	bl	800172c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b64      	cmp	r3, #100	@ 0x64
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e104      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	4b29      	ldr	r3, [pc, #164]	@ (800219c <HAL_RCC_OscConfig+0x4ec>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x466>
 8002108:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 800210a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210c:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002112:	6353      	str	r3, [r2, #52]	@ 0x34
 8002114:	e02d      	b.n	8002172 <HAL_RCC_OscConfig+0x4c2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x488>
 800211e:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002122:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002128:	6353      	str	r3, [r2, #52]	@ 0x34
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 800212c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212e:	4a15      	ldr	r2, [pc, #84]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002130:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002134:	6353      	str	r3, [r2, #52]	@ 0x34
 8002136:	e01c      	b.n	8002172 <HAL_RCC_OscConfig+0x4c2>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d10c      	bne.n	800215a <HAL_RCC_OscConfig+0x4aa>
 8002140:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002144:	4a0f      	ldr	r2, [pc, #60]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800214a:	6353      	str	r3, [r2, #52]	@ 0x34
 800214c:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002156:	6353      	str	r3, [r2, #52]	@ 0x34
 8002158:	e00b      	b.n	8002172 <HAL_RCC_OscConfig+0x4c2>
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 800215c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002164:	6353      	str	r3, [r2, #52]	@ 0x34
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 8002168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216a:	4a06      	ldr	r2, [pc, #24]	@ (8002184 <HAL_RCC_OscConfig+0x4d4>)
 800216c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002170:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d024      	beq.n	80021c4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7ff fad7 	bl	800172c <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002180:	e019      	b.n	80021b6 <HAL_RCC_OscConfig+0x506>
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	08002b80 	.word	0x08002b80
 800218c:	20000180 	.word	0x20000180
 8002190:	20000184 	.word	0x20000184
 8002194:	42470020 	.word	0x42470020
 8002198:	42470680 	.word	0x42470680
 800219c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7ff fac4 	bl	800172c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0a3      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021b6:	4b54      	ldr	r3, [pc, #336]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 80021b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0ee      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4f0>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7ff fab2 	bl	800172c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7ff faae 	bl	800172c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e08d      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 80021e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ee      	bne.n	80021cc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f4:	4b44      	ldr	r3, [pc, #272]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	4a43      	ldr	r2, [pc, #268]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 80021fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	2b00      	cmp	r3, #0
 8002206:	d079      	beq.n	80022fc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d056      	beq.n	80022bc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	2b02      	cmp	r3, #2
 8002214:	d13b      	bne.n	800228e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <HAL_RCC_OscConfig+0x65c>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fa86 	bl	800172c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff fa82 	bl	800172c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e063      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002236:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002242:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002252:	4319      	orrs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	430b      	orrs	r3, r1
 800225a:	492b      	ldr	r1, [pc, #172]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b2a      	ldr	r3, [pc, #168]	@ (800230c <HAL_RCC_OscConfig+0x65c>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff fa61 	bl	800172c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff fa5d 	bl	800172c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e03e      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002280:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x5be>
 800228c:	e036      	b.n	80022fc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <HAL_RCC_OscConfig+0x65c>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fa4a 	bl	800172c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff fa46 	bl	800172c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e027      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ae:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x5ec>
 80022ba:	e01f      	b.n	80022fc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e01a      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_RCC_OscConfig+0x658>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	429a      	cmp	r2, r3
 80022da:	d10d      	bne.n	80022f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d106      	bne.n	80022f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	42470060 	.word	0x42470060

08002310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e11a      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b8f      	ldr	r3, [pc, #572]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d919      	bls.n	8002366 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_RCC_ClockConfig+0x34>
 8002338:	4b8a      	ldr	r3, [pc, #552]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a89      	ldr	r2, [pc, #548]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b87      	ldr	r3, [pc, #540]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 0201 	bic.w	r2, r3, #1
 800234c:	4985      	ldr	r1, [pc, #532]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002354:	4b83      	ldr	r3, [pc, #524]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0f9      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002372:	4b7d      	ldr	r3, [pc, #500]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	497a      	ldr	r1, [pc, #488]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 808e 	beq.w	80024ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800239a:	4b73      	ldr	r3, [pc, #460]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d121      	bne.n	80023ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0d7      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0cb      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ca:	4b67      	ldr	r3, [pc, #412]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0bf      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023da:	4b63      	ldr	r3, [pc, #396]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0b7      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	495c      	ldr	r1, [pc, #368]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7ff f996 	bl	800172c <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d112      	bne.n	8002430 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7ff f98e 	bl	800172c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e09b      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002422:	4b51      	ldr	r3, [pc, #324]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b08      	cmp	r3, #8
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_ClockConfig+0xfc>
 800242e:	e03e      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d112      	bne.n	800245e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243a:	f7ff f977 	bl	800172c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e084      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002450:	4b45      	ldr	r3, [pc, #276]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_ClockConfig+0x12a>
 800245c:	e027      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d11d      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7ff f960 	bl	800172c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e06d      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800247e:	4b3a      	ldr	r3, [pc, #232]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_ClockConfig+0x158>
 800248a:	e010      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7ff f94e 	bl	800172c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e05b      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024a2:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ee      	bne.n	800248c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d219      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCC_ClockConfig+0x1be>
 80024c2:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a27      	ldr	r2, [pc, #156]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0201 	bic.w	r2, r3, #1
 80024d6:	4923      	ldr	r1, [pc, #140]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_RCC_ClockConfig+0x254>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e034      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4917      	ldr	r1, [pc, #92]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490f      	ldr	r1, [pc, #60]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f823 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_RCC_ClockConfig+0x258>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490b      	ldr	r1, [pc, #44]	@ (800256c <HAL_RCC_ClockConfig+0x25c>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x260>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_RCC_ClockConfig+0x264>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f8a0 	bl	8001694 <HAL_InitTick>
 8002554:	4603      	mov	r3, r0
 8002556:	72fb      	strb	r3, [r7, #11]

  return status;
 8002558:	7afb      	ldrb	r3, [r7, #11]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	08002b80 	.word	0x08002b80
 8002570:	20000180 	.word	0x20000180
 8002574:	20000184 	.word	0x20000184

08002578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b092      	sub	sp, #72	@ 0x48
 800257e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002580:	4b79      	ldr	r3, [pc, #484]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b0c      	cmp	r3, #12
 800258e:	d00d      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x34>
 8002590:	2b0c      	cmp	r3, #12
 8002592:	f200 80d5 	bhi.w	8002740 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002596:	2b04      	cmp	r3, #4
 8002598:	d002      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x28>
 800259a:	2b08      	cmp	r3, #8
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x2e>
 800259e:	e0cf      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b72      	ldr	r3, [pc, #456]	@ (800276c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80025a2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80025a4:	e0da      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a6:	4b72      	ldr	r3, [pc, #456]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80025a8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80025aa:	e0d7      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025bc:	0d9b      	lsrs	r3, r3, #22
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	3301      	adds	r3, #1
 80025c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c6:	4b68      	ldr	r3, [pc, #416]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d05d      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d4:	2200      	movs	r2, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	4611      	mov	r1, r2
 80025da:	4604      	mov	r4, r0
 80025dc:	460d      	mov	r5, r1
 80025de:	4622      	mov	r2, r4
 80025e0:	462b      	mov	r3, r5
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0159      	lsls	r1, r3, #5
 80025ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f0:	0150      	lsls	r0, r2, #5
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4621      	mov	r1, r4
 80025f8:	1a51      	subs	r1, r2, r1
 80025fa:	6139      	str	r1, [r7, #16]
 80025fc:	4629      	mov	r1, r5
 80025fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002610:	4659      	mov	r1, fp
 8002612:	018b      	lsls	r3, r1, #6
 8002614:	4651      	mov	r1, sl
 8002616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261a:	4651      	mov	r1, sl
 800261c:	018a      	lsls	r2, r1, #6
 800261e:	46d4      	mov	ip, sl
 8002620:	ebb2 080c 	subs.w	r8, r2, ip
 8002624:	4659      	mov	r1, fp
 8002626:	eb63 0901 	sbc.w	r9, r3, r1
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800263a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800263e:	4690      	mov	r8, r2
 8002640:	4699      	mov	r9, r3
 8002642:	4623      	mov	r3, r4
 8002644:	eb18 0303 	adds.w	r3, r8, r3
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	462b      	mov	r3, r5
 800264c:	eb49 0303 	adc.w	r3, r9, r3
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800265e:	4629      	mov	r1, r5
 8002660:	024b      	lsls	r3, r1, #9
 8002662:	4620      	mov	r0, r4
 8002664:	4629      	mov	r1, r5
 8002666:	4604      	mov	r4, r0
 8002668:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800266c:	4601      	mov	r1, r0
 800266e:	024a      	lsls	r2, r1, #9
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002676:	2200      	movs	r2, #0
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
 800267a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800267c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002680:	f7fe fce4 	bl	800104c <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	647b      	str	r3, [r7, #68]	@ 0x44
 800268c:	e055      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800268e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002690:	2200      	movs	r2, #0
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	627a      	str	r2, [r7, #36]	@ 0x24
 8002696:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800269a:	4642      	mov	r2, r8
 800269c:	464b      	mov	r3, r9
 800269e:	f04f 0000 	mov.w	r0, #0
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	0159      	lsls	r1, r3, #5
 80026a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ac:	0150      	lsls	r0, r2, #5
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	46c4      	mov	ip, r8
 80026b4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80026b8:	4640      	mov	r0, r8
 80026ba:	4649      	mov	r1, r9
 80026bc:	468c      	mov	ip, r1
 80026be:	eb63 0b0c 	sbc.w	fp, r3, ip
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026ce:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026d2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026d6:	ebb2 040a 	subs.w	r4, r2, sl
 80026da:	eb63 050b 	sbc.w	r5, r3, fp
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	00eb      	lsls	r3, r5, #3
 80026e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ec:	00e2      	lsls	r2, r4, #3
 80026ee:	4614      	mov	r4, r2
 80026f0:	461d      	mov	r5, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	18e3      	adds	r3, r4, r3
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	460b      	mov	r3, r1
 80026fa:	eb45 0303 	adc.w	r3, r5, r3
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9d7 4500 	ldrd	r4, r5, [r7]
 800270c:	4629      	mov	r1, r5
 800270e:	028b      	lsls	r3, r1, #10
 8002710:	4620      	mov	r0, r4
 8002712:	4629      	mov	r1, r5
 8002714:	4604      	mov	r4, r0
 8002716:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800271a:	4601      	mov	r1, r0
 800271c:	028a      	lsls	r2, r1, #10
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002724:	2200      	movs	r2, #0
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	61fa      	str	r2, [r7, #28]
 800272a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800272e:	f7fe fc8d 	bl	800104c <__aeabi_uldivmod>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4613      	mov	r3, r2
 8002738:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800273a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800273c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800273e:	e00d      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	0b5b      	lsrs	r3, r3, #13
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	3301      	adds	r3, #1
 8002750:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800275a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800275e:	4618      	mov	r0, r3
 8002760:	3748      	adds	r7, #72	@ 0x48
 8002762:	46bd      	mov	sp, r7
 8002764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	00f42400 	.word	0x00f42400
 8002770:	007a1200 	.word	0x007a1200
 8002774:	08002b74 	.word	0x08002b74

08002778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800277c:	4b02      	ldr	r3, [pc, #8]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x10>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	20000180 	.word	0x20000180

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff2 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08002b90 	.word	0x08002b90

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffde 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0adb      	lsrs	r3, r3, #11
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	@ (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	08002b90 	.word	0x08002b90

080027dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027e8:	4b29      	ldr	r3, [pc, #164]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d12c      	bne.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027f4:	4b26      	ldr	r3, [pc, #152]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002800:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e016      	b.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	4a1f      	ldr	r2, [pc, #124]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6253      	str	r3, [r2, #36]	@ 0x24
 8002818:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800282c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	4a17      	ldr	r2, [pc, #92]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002838:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8002840:	d105      	bne.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002848:	d101      	bne.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800284a:	2301      	movs	r3, #1
 800284c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002854:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0f      	ldr	r2, [pc, #60]	@ (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 0201 	bic.w	r2, r3, #1
 8002868:	490b      	ldr	r1, [pc, #44]	@ (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e042      	b.n	8002934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fe32 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f82b 	bl	800293c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	4313      	orrs	r3, r2
 8002970:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800297c:	f023 030c 	bic.w	r3, r3, #12
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	430b      	orrs	r3, r1
 8002988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a55      	ldr	r2, [pc, #340]	@ (8002afc <UART_SetConfig+0x1c0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d103      	bne.n	80029b2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029aa:	f7ff ff03 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	e002      	b.n	80029b8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029b2:	f7ff feeb 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 80029b6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029c0:	d14c      	bne.n	8002a5c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	4a49      	ldr	r2, [pc, #292]	@ (8002b00 <UART_SetConfig+0x1c4>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	0119      	lsls	r1, r3, #4
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009a      	lsls	r2, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f8:	4b41      	ldr	r3, [pc, #260]	@ (8002b00 <UART_SetConfig+0x1c4>)
 80029fa:	fba3 0302 	umull	r0, r3, r3, r2
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2064      	movs	r0, #100	@ 0x64
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	3332      	adds	r3, #50	@ 0x32
 8002a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b00 <UART_SetConfig+0x1c4>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a1a:	4419      	add	r1, r3
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009a      	lsls	r2, r3, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a32:	4b33      	ldr	r3, [pc, #204]	@ (8002b00 <UART_SetConfig+0x1c4>)
 8002a34:	fba3 0302 	umull	r0, r3, r3, r2
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	2064      	movs	r0, #100	@ 0x64
 8002a3c:	fb00 f303 	mul.w	r3, r0, r3
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	3332      	adds	r3, #50	@ 0x32
 8002a46:	4a2e      	ldr	r2, [pc, #184]	@ (8002b00 <UART_SetConfig+0x1c4>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	f003 0207 	and.w	r2, r3, #7
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	440a      	add	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a5a:	e04a      	b.n	8002af2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	441a      	add	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	4a23      	ldr	r2, [pc, #140]	@ (8002b00 <UART_SetConfig+0x1c4>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	0119      	lsls	r1, r3, #4
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009a      	lsls	r2, r3, #2
 8002a86:	441a      	add	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a92:	4b1b      	ldr	r3, [pc, #108]	@ (8002b00 <UART_SetConfig+0x1c4>)
 8002a94:	fba3 0302 	umull	r0, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	2064      	movs	r0, #100	@ 0x64
 8002a9c:	fb00 f303 	mul.w	r3, r0, r3
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	3332      	adds	r3, #50	@ 0x32
 8002aa6:	4a16      	ldr	r2, [pc, #88]	@ (8002b00 <UART_SetConfig+0x1c4>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab2:	4419      	add	r1, r3
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	009a      	lsls	r2, r3, #2
 8002abe:	441a      	add	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <UART_SetConfig+0x1c4>)
 8002acc:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	2064      	movs	r0, #100	@ 0x64
 8002ad4:	fb00 f303 	mul.w	r3, r0, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	3332      	adds	r3, #50	@ 0x32
 8002ade:	4a08      	ldr	r2, [pc, #32]	@ (8002b00 <UART_SetConfig+0x1c4>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	440a      	add	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40013800 	.word	0x40013800
 8002b00:	51eb851f 	.word	0x51eb851f

08002b04 <memset>:
 8002b04:	4603      	mov	r3, r0
 8002b06:	4402      	add	r2, r0
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d100      	bne.n	8002b0e <memset+0xa>
 8002b0c:	4770      	bx	lr
 8002b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b12:	e7f9      	b.n	8002b08 <memset+0x4>

08002b14 <__libc_init_array>:
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	2600      	movs	r6, #0
 8002b18:	4d0c      	ldr	r5, [pc, #48]	@ (8002b4c <__libc_init_array+0x38>)
 8002b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8002b50 <__libc_init_array+0x3c>)
 8002b1c:	1b64      	subs	r4, r4, r5
 8002b1e:	10a4      	asrs	r4, r4, #2
 8002b20:	42a6      	cmp	r6, r4
 8002b22:	d109      	bne.n	8002b38 <__libc_init_array+0x24>
 8002b24:	f000 f81a 	bl	8002b5c <_init>
 8002b28:	2600      	movs	r6, #0
 8002b2a:	4d0a      	ldr	r5, [pc, #40]	@ (8002b54 <__libc_init_array+0x40>)
 8002b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b58 <__libc_init_array+0x44>)
 8002b2e:	1b64      	subs	r4, r4, r5
 8002b30:	10a4      	asrs	r4, r4, #2
 8002b32:	42a6      	cmp	r6, r4
 8002b34:	d105      	bne.n	8002b42 <__libc_init_array+0x2e>
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b3c:	4798      	blx	r3
 8002b3e:	3601      	adds	r6, #1
 8002b40:	e7ee      	b.n	8002b20 <__libc_init_array+0xc>
 8002b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b46:	4798      	blx	r3
 8002b48:	3601      	adds	r6, #1
 8002b4a:	e7f2      	b.n	8002b32 <__libc_init_array+0x1e>
 8002b4c:	08002ba0 	.word	0x08002ba0
 8002b50:	08002ba0 	.word	0x08002ba0
 8002b54:	08002ba0 	.word	0x08002ba0
 8002b58:	08002ba4 	.word	0x08002ba4

08002b5c <_init>:
 8002b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5e:	bf00      	nop
 8002b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b62:	bc08      	pop	{r3}
 8002b64:	469e      	mov	lr, r3
 8002b66:	4770      	bx	lr

08002b68 <_fini>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	bf00      	nop
 8002b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6e:	bc08      	pop	{r3}
 8002b70:	469e      	mov	lr, r3
 8002b72:	4770      	bx	lr
